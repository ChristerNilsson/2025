// Generated by CoffeeScript 2.7.0
var Game, MAXTRAIL, Move, Player, SIZE, SPEED, Square, echo, games, pgnA, pgnB, pgnC, pgnD, players, shrink, uci2pos, updateInfo,
  indexOf = [].indexOf;

SIZE = 60;

MAXTRAIL = 5;

SPEED = 1;

echo = console.log;

games = {};

players = {};

pgnA = `1. d4 { [%clk 0:15:00] } 1... d5 { [%clk 0:15:00] } { D00 Queen's Pawn Game } 2. c3 { [%clk 0:15:06] } 2... Nc6 { [%clk 0:15:13] } 3. b4 { [%clk 0:15:15] } 3... a5 { [%clk 0:15:23] } 4. b5 { [%clk 0:15:20] } 4... Na7 { [%clk 0:15:28] } 5. a4 { [%clk 0:15:31] } 5... c6 { [%clk 0:15:40] } 6. c4 { [%clk 0:15:21] } 6... cxb5 { [%clk 0:15:52] } 7. cxb5 { [%clk 0:15:30] } 7... b6 { [%clk 0:16:05] } 8. f3 { [%clk 0:15:30] } 8... Nf6 { [%clk 0:16:17] } 9. g4 { [%clk 0:15:26] } 9... g5 { [%clk 0:16:28] } 10. Bg2 { [%clk 0:15:33] } 10... e6 { [%clk 0:16:40] } 11. Bxg5 { [%clk 0:15:36] } 11... Bb4+ { [%clk 0:16:34] } 12. Nd2 { [%clk 0:15:37] } 12... Bxd2+ { [%clk 0:16:47] } 13. Qxd2 { [%clk 0:15:49] } 13... O-O { [%clk 0:16:56] } 14. Qf4 { [%clk 0:15:37] } 14... Qc7 { [%clk 0:16:44] } 15. Qxc7 { [%clk 0:15:43] } { Black resigns. } 1-0`;

pgnB = `1. b4 e5 2. Bb2 d6 3. d4 exd4 4. Qxd4 Nc6 5. Qe4+ Nge7 6. a3 a6 7. Nc3 Bf5 8. Qh4 Bxc2 9. Nd5 Nxd5 10. Qc4 Ndxb4 11. axb4 Bg6 12. e4 Qe7 13. Bd3 Ne5 14. Bxe5 Qxe5 15. Rc1 O-O-O 1-0`;

pgnC = `1. e4 e5 2. Nf3 d6 3. Bc4 c6 4. Ng5 Nh6 5. Qh5 g6 6. Bxf7+ Kd7 7. Be6+ Ke7 8. Qh4 Na6 9. Nf7+ Ke8 10. Qxd8# 1-0`;

pgnD = `1. Nf3 d5 2. d4 e6 3. e3 Bb4+ 4. c3 Bd6 5. Ne5 Qf6 6. f4 Qh4+ 7. g3 Qf6 8. h4 Bxe5 9. dxe5 Qg6 10. Bd3 Qxg3+ 11. Kf1 Nh6 12. Qa4+ c6 13. Nd2 Ng4 14. Ke2 Qf2+ 15. Kd1 Nxe3# 0-1`;

shrink = function(a) { // tar bort indexes från chess.ascii()
  a = a.replaceAll('.', '•');
  a = a.replaceAll('| ', '');
  a = a.replaceAll(' |', '');
  a = a.replaceAll('1 ', '');
  a = a.replaceAll('2 ', '');
  a = a.replaceAll('3 ', '');
  a = a.replaceAll('4 ', '');
  a = a.replaceAll('5 ', '');
  a = a.replaceAll('6 ', '');
  a = a.replaceAll('7 ', '');
  a = a.replaceAll('8 ', '');
  a = a.split('\n');
  a = a.slice(1, 9);
  return a.join('<br>');
};

updateInfo = function(name, player) {
  if (indexOf.call('ABCD', name) >= 0) {
    return document.getElementById(`info${name}`).innerHTML = `plies: ${games[name].chess.history().length}<br>assists: ${player.assists}<br>time: ${games[name].duration.toFixed()} s`;
  }
};

window.setup = function() {
  createCanvas(8 * SIZE, 8 * SIZE, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  games.A = new Game('A', pgnA, 'https://lichess.org/GjV0BK25');
  games.B = new Game('B', pgnB, 'https://lichess.org/BxG8RTkh');
  games.C = new Game('C', pgnC, 'https://lichess.org/QOFUafUP');
  games.D = new Game('D', pgnD, 'https://lichess.org/l16tQWr3');
  document.getElementById("boardA").innerHTML = shrink(games.A.chess.ascii());
  document.getElementById("boardB").innerHTML = shrink(games.B.chess.ascii());
  document.getElementById("boardC").innerHTML = shrink(games.C.chess.ascii());
  document.getElementById("boardD").innerHTML = shrink(games.D.chess.ascii());
  echo(games.A.uci_moves);
  echo(games.B.uci_moves);
  echo(games.C.uci_moves);
  echo(games.D.uci_moves);
  players.A = new Player('A');
  players.B = new Player('B');
  players.C = new Player('C');
  players.D = new Player('D');
  players.E = new Player('E');
  players.F = new Player('F');
  players.G = new Player('G');
  players.H = new Player('H');
  document.getElementById("A").addEventListener("click", function() {
    return games.A.initMove();
  });
  document.getElementById("B").addEventListener("click", function() {
    return games.B.initMove();
  });
  document.getElementById("C").addEventListener("click", function() {
    return games.C.initMove();
  });
  return document.getElementById("D").addEventListener("click", function() {
    return games.D.initMove();
  });
};

window.draw = function() {
  var i, j, k, key, l, player, results, x, y;
  background(0);
  noStroke();
  for (i = k = 0; k < 8; i = ++k) {
    for (j = l = 0; l < 8; j = ++l) {
      if ((i + j) % 2 === 1) {
        fill('green');
      } else {
        fill('lightgreen');
      }
      x = i * SIZE;
      y = j * SIZE;
      rect(x, y, SIZE - 1, SIZE - 1);
    }
  }
  results = [];
  for (key in players) {
    player = players[key];
    player.draw();
    results.push(updateInfo(key, player));
  }
  return results;
};

Player = class Player {
  constructor(name1, tx = 4 * SIZE, ty = 4 * SIZE) {
    this.name = name1;
    this.tx = tx;
    this.ty = ty;
    this.speed = 1 / SPEED;
    this.pos = createVector(4 * SIZE, 4 * SIZE);
    this.target = new Square(createVector(this.tx, this.ty));
    this.home = this.target;
    this.squares = []; // lista med Square som ej påbörjats
    this.trail = [];
    this.n = 0;
    this.distance = 0;
    this.assists = 0;
  }

  closest() {
    var bestDist, bestSq, d, k, len, ref, square;
    if (this.squares.length === 0) {
      return null;
    }
    bestDist = 99999;
    bestSq = this.squares[0];
    ref = this.squares;
    for (k = 0, len = ref.length; k < len; k++) {
      square = ref[k];
      d = p5.Vector.dist(square.pos, this.pos);
      if (d < bestDist) {
        bestDist = d;
        bestSq = square;
      }
    }
    return bestSq;
  }

  add(sq) {
    this.squares.push(sq);
    return this.target = this.closest();
  }

  drawTail() {
    var i, k, ref, results, size;
    if (this.n % (SPEED * 10) === 0) {
      this.trail.push(createVector(this.pos.x, this.pos.y));
    }
    this.n += 1;
    if (this.trail.length > MAXTRAIL) {
      this.trail.shift();
    }
    stroke('black');
    results = [];
    for (i = k = 0, ref = this.trail.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      size = map(i, 0, this.trail.length - 1, 5, 15);
      noFill();
      results.push(ellipse(this.trail[i].x, this.trail[i].y, size, size));
    }
    return results;
  }

  draw() {
    var carriers, d, duration, dx, dy, g, key, ref, ref1, ref2, ref3, ref4, step, target, td;
    target = this.target.pos;
    dx = target.x - this.pos.x;
    dy = target.y - this.pos.y;
    d = sqrt(dx * dx + dy * dy);
    stroke('black');
    if (ref = this.name, indexOf.call('ABCD', ref) >= 0) {
      line(target.x, target.y, this.pos.x, this.pos.y);
    }
    step = p5.Vector.sub(target, this.pos).setMag(min(this.speed, d));
    if (d < this.speed) { // target nådd
      if (!this.target.done) {
        this.target.done = true;
        this.target.carrier = this.name;
// Skicka draget om både start.done och slut.done
        for (key in games) {
          g = games[key];
          if (g.move && g.move.start.done && g.move.stopp.done) {
            duration = 30 * (performance.now() - g.move.start.time) / 1000;
            if (g.index % 2 === 0) {
              g.duration += duration;
            }
            if (g.move.start.carrier === g.move.stopp.carrier) {
              carriers = g.move.start.carrier;
            } else {
              carriers = g.move.start.carrier + g.move.stopp.carrier;
            }
            if (ref1 = g.move.start.carrier, indexOf.call('ABCD', ref1) >= 0) {
              echo('assists: ', g.move.start.carrier, g.move.stopp.carrier);
              players[g.move.start.carrier].assists += 1;
              players[g.move.stopp.carrier].assists += 1;
              echo(g.name, g.move.uci, this.name, g.move.start.carrier + g.move.stopp.carrier);
            }
            g.chess.move({
              from: g.move.uci.slice(0, 2),
              to: g.move.uci.slice(2, 4)
            });
            td = document.getElementById(`SEL${g.name}`);
            td.innerHTML += `${g.san_moves[g.chess.history().length - 1]} by ${carriers} (${duration.toFixed()} s)<br>`;
            document.getElementById(`board${g.name}`).innerHTML = shrink(g.chess.ascii());
            updateInfo(g.name, this);
            g.queue.push(g.move);
            g.move = null;
            g.initMove();
          }
        }
      }
      this.squares = _.filter(this.squares, function(sq) {
        return sq.done === false;
      });
      
      // hämta närmaste uppdrag om sådant finns
      if (this.squares.length > 0) {
        this.target = this.closest();
        d = p5.Vector.dist(this.pos, this.target.pos);
        this.distance += d;
      }
    }
    this.pos.add(step);
    if (ref2 = this.name, indexOf.call('ABCD', ref2) >= 0) {
      this.drawTail();
      if (ref3 = this.name, indexOf.call('ABCD', ref3) >= 0) {
        fill('yellow');
      } else {
        fill('black');
      }
      strokeWeight(1);
      circle(this.pos.x, this.pos.y, 0.4 * SIZE);
      if (ref4 = this.name, indexOf.call('ABCD', ref4) >= 0) {
        fill('black');
      } else {
        fill('yellow');
      }
      noStroke();
      // fill 'black'
      return text(this.name, this.pos.x, this.pos.y);
    }
  }

};

uci2pos = function(uci) { // t ex e2e4 => [[225,75],[225,175]]
  var result, startx, starty, stoppx, stoppy, x, y;
  startx = uci[0];
  starty = uci[1];
  stoppx = uci[2];
  stoppy = uci[3];
  result = [];
  x = "abcdefgh".indexOf(startx);
  y = 7 - "12345678".indexOf(starty);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  x = "abcdefgh".indexOf(stoppx);
  y = 7 - "12345678".indexOf(stoppy);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  return result;
};

Game = class Game {
  constructor(name1, pgn, link) {
    var move;
    this.name = name1;
    this.link = link;
    this.chess = new Chess();
    this.chess.load_pgn(pgn);
    this.san_moves = this.chess.history(); // [Nf3, ...]
    this.uci_moves = (function() {
      var k, len, ref, results;
      ref = this.chess.history({
        verbose: true
      });
      // [g1f3, ...]
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        move = ref[k];
        results.push(move.from + move.to);
      }
      return results;
    }).call(this);
    this.move = null;
    this.queue = [];
    this.duration = 0;
    this.chess.reset();
    this.index = -1;
    document.getElementById(`link${this.name}`).innerHTML = `<a href=\"${this.link}\" target=\"_blank\">Link</a>`;
  }

  initMove() {
    var a, b, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref4, ref5, ref6, ref7, ref8, ref9;
    if (this.index >= this.uci_moves.length - 1) {
      return;
    }
    this.index += 1;
    if (this.move !== null) {
      echo('too quick!');
      return;
    }
    this.move = new Move(this.uci_moves[this.index]);
    // echo 'A', @move
    if (this.index % 2 === 0) {
      a = "1234";
      b = "5678";
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref = this.move.uci[0], indexOf.call("abcd", ref) >= 0) && (ref1 = this.move.uci[1], indexOf.call(a, ref1) >= 0)) {
        players.A.add(this.move.start);
      }
      if ((ref2 = this.move.uci[0], indexOf.call("efgh", ref2) >= 0) && (ref3 = this.move.uci[1], indexOf.call(a, ref3) >= 0)) {
        players.B.add(this.move.start);
      }
      if ((ref4 = this.move.uci[0], indexOf.call("abcd", ref4) >= 0) && (ref5 = this.move.uci[1], indexOf.call(b, ref5) >= 0)) {
        players.C.add(this.move.start);
      }
      if ((ref6 = this.move.uci[0], indexOf.call("efgh", ref6) >= 0) && (ref7 = this.move.uci[1], indexOf.call(b, ref7) >= 0)) {
        players.D.add(this.move.start);
      }
      if ((ref8 = this.move.uci[2], indexOf.call("abcd", ref8) >= 0) && (ref9 = this.move.uci[3], indexOf.call(a, ref9) >= 0)) {
        players.A.add(this.move.stopp);
      }
      if ((ref10 = this.move.uci[2], indexOf.call("efgh", ref10) >= 0) && (ref11 = this.move.uci[3], indexOf.call(a, ref11) >= 0)) {
        players.B.add(this.move.stopp);
      }
      if ((ref12 = this.move.uci[2], indexOf.call("abcd", ref12) >= 0) && (ref13 = this.move.uci[3], indexOf.call(b, ref13) >= 0)) {
        players.C.add(this.move.stopp);
      }
      if ((ref14 = this.move.uci[2], indexOf.call("efgh", ref14) >= 0) && (ref15 = this.move.uci[3], indexOf.call(b, ref15) >= 0)) {
        return players.D.add(this.move.stopp);
      }
    } else {
      a = "1234";
      b = "5678";
      // Hantera motståndaren
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref16 = this.move.uci[0], indexOf.call("abcd", ref16) >= 0) && (ref17 = this.move.uci[1], indexOf.call(a, ref17) >= 0)) {
        players.G.add(this.move.start);
      }
      if ((ref18 = this.move.uci[0], indexOf.call("abcd", ref18) >= 0) && (ref19 = this.move.uci[1], indexOf.call(b, ref19) >= 0)) {
        players.E.add(this.move.start);
      }
      if ((ref20 = this.move.uci[0], indexOf.call("efgh", ref20) >= 0) && (ref21 = this.move.uci[1], indexOf.call(a, ref21) >= 0)) {
        players.H.add(this.move.start);
      }
      if ((ref22 = this.move.uci[0], indexOf.call("efgh", ref22) >= 0) && (ref23 = this.move.uci[1], indexOf.call(b, ref23) >= 0)) {
        players.F.add(this.move.start);
      }
      if ((ref24 = this.move.uci[2], indexOf.call("abcd", ref24) >= 0) && (ref25 = this.move.uci[3], indexOf.call(a, ref25) >= 0)) {
        players.G.add(this.move.stopp);
      }
      if ((ref26 = this.move.uci[2], indexOf.call("abcd", ref26) >= 0) && (ref27 = this.move.uci[3], indexOf.call(b, ref27) >= 0)) {
        players.E.add(this.move.stopp);
      }
      if ((ref28 = this.move.uci[2], indexOf.call("efgh", ref28) >= 0) && (ref29 = this.move.uci[3], indexOf.call(a, ref29) >= 0)) {
        players.H.add(this.move.stopp);
      }
      if ((ref30 = this.move.uci[2], indexOf.call("efgh", ref30) >= 0) && (ref31 = this.move.uci[3], indexOf.call(b, ref31) >= 0)) {
        return players.F.add(this.move.stopp);
      }
    }
  }

};

// echo 'B', @move
Square = class Square {
  constructor(pos, uci1 = "", carrier = "") { // Vector
    this.pos = pos;
    this.uci = uci1;
    this.carrier = carrier;
    this.done = false;
    this.time = performance.now();
  }

};

Move = class Move {
  constructor(uci1) { // e2e4
    this.uci = uci1;
    this.pos = uci2pos(this.uci);
    this.start = new Square(this.pos[0], this.uci);
    this.stopp = new Square(this.pos[1], this.uci);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\007-SchackOrientering\coffee\sketch.coffee