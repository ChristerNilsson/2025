// Generated by CoffeeScript 2.7.0
var Game, MAXTRAIL, Move, Player, SIZE, Square, draw, echo, games, players, san2pos, setup,
  indexOf = [].indexOf;

SIZE = 50;

MAXTRAIL = 5;

games = [];

players = [];

echo = console.log;

setup = function() {
  createCanvas(8 * SIZE, 8 * SIZE);
  textAlign(CENTER, CENTER);
  games.push(new Game('A', "e2e4 d7d6 d2d4 g8f6 b1c3 b8c6 f1b5 a7a6 b5a4 b7b5 a4b3 c8d7 h2h3 b5b4 c3d5 f6e4 d1f3 f7f5 g1e2 g7g6 c2c3 b4c3 b2c3 e7e6 d5b4 c6a5 b3c2 d6d5 h3h4 c7c5 b4d3 c5d4 c3d4 a8c8 c2d1 a5c4 a2a3 d8a5"));
  games.push(new Game('B', "d2d4 d7d5 c1f4 g7g6"));
  games.push(new Game('C', "g1f3 e7e5 a1h8 d7d5"));
  games.push(new Game('D', "g1f3 e7e5 a8h1 d7d5"));
  players = [];
  players.push(new Player('A', 2 * SIZE, 2 * SIZE));
  players.push(new Player('B', 6 * SIZE, 2 * SIZE));
  players.push(new Player('C', 2 * SIZE, 6 * SIZE));
  players.push(new Player('D', 6 * SIZE, 6 * SIZE));
  document.getElementById("A").addEventListener("click", function() {
    return games[0].initMove();
  });
  document.getElementById("B").addEventListener("click", function() {
    return games[1].initMove();
  });
  document.getElementById("C").addEventListener("click", function() {
    return games[2].initMove();
  });
  return document.getElementById("D").addEventListener("click", function() {
    return games[3].initMove();
  });
};

draw = function() {
  var i, j, k, l, len, m, player, results, x, y;
  background(0);
  noStroke();
  for (i = k = 0; k < 8; i = ++k) {
    for (j = l = 0; l < 8; j = ++l) {
      if ((i + j) % 2 === 1) {
        fill('green');
      } else {
        fill('lightgreen');
      }
      x = i * SIZE;
      y = j * SIZE;
      rect(x, y, SIZE - 1, SIZE - 1);
    }
  }
  results = [];
  for (m = 0, len = players.length; m < len; m++) {
    player = players[m];
    results.push(player.draw());
  }
  return results;
};

Player = class Player {
  constructor(name, tx, ty) {
    this.name = name;
    this.tx = tx;
    this.ty = ty;
    this.speed = 1;
    this.pos = createVector(4 * SIZE, 4 * SIZE);
    this.target = new Square(createVector(this.tx, this.ty));
    this.home = this.target;
    // echo 'home',@home
    this.squares = []; // lista med Square
    this.trail = [];
    this.n = 0;
  }

  closest() {
    var bestDist, bestSq, d, k, len, ref, square;
    if (this.squares.length === 0) {
      return null;
    }
    bestDist = 99999;
    bestSq = this.squares[0];
    ref = this.squares;
    for (k = 0, len = ref.length; k < len; k++) {
      square = ref[k];
      d = p5.Vector.dist(square.pos, this.pos);
      if (d < bestDist) {
        bestDist = d;
        bestSq = square;
      }
    }
    return bestSq;
  }

  add(sq) {
    // echo 'add',sq
    this.squares.push(sq);
    return this.target = this.closest();
  }

  draw() {
    var d, dx, dy, g, i, k, l, len, ref, size, step, target, temp;
    target = this.target.pos;
    dx = target.x - this.pos.x;
    dy = target.y - this.pos.y;
    d = sqrt(dx * dx + dy * dy);
    // echo 'draw', @pos, @speed, d, target
    step = p5.Vector.sub(target, this.pos).setMag(min(this.speed, d));
    if (d < this.speed) { // target nådd
      if (!this.target.done) {
        this.target.done = true;
        echo('target done', this.name, this.target); //.san

        // Skicka draget om både start.done och slut.done
        for (k = 0, len = games.length; k < len; k++) {
          g = games[k];
          temp = _.filter(g.queue, function(move) {
            return move.start.done && move.stopp.done;
          });
          if (temp.length > 0) {
            echo('delivered', temp[0].san);
          }
          g.queue = _.filter(g.queue, function(move) {
            return !(move.start.done && move.stopp.done);
          });
        }
      }
      this.squares = _.filter(this.squares, function(sq) {
        return sq.done === false;
      });
      
      // hämta närmaste uppdrag om sådant finns
      if (this.squares.length > 0) {
        this.target = this.closest();
      }
    }
    this.pos.add(step);
    // Lägg till ny position i svansen
    if (this.n % 10 === 0) {
      this.trail.push(createVector(this.pos.x, this.pos.y));
    }
    this.n += 1;
    if (this.trail.length > MAXTRAIL) {
      this.trail.shift();
    }
    // Rita svansen
    stroke('black');
    for (i = l = 0, ref = this.trail.length; (0 <= ref ? l < ref : l > ref); i = 0 <= ref ? ++l : --l) {
      size = map(i, 0, this.trail.length - 1, 5, 15);
      noFill();
      ellipse(this.trail[i].x, this.trail[i].y, size, size);
    }
    fill('yellow');
    // if @free then stroke 'white' else 
    strokeWeight(1);
    circle(this.pos.x, this.pos.y, 0.4 * SIZE);
    fill('black');
    return text(this.name, this.pos.x, this.pos.y);
  }

};

san2pos = function(san) { // t ex e2e4 => [[225,75],[225,175]]
  var result, startx, starty, stoppx, stoppy, x, y;
  startx = san[0];
  starty = san[1];
  stoppx = san[2];
  stoppy = san[3];
  result = [];
  x = "abcdefgh".indexOf(startx);
  y = 7 - "12345678".indexOf(starty);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  x = "abcdefgh".indexOf(stoppx);
  y = 7 - "12345678".indexOf(stoppy);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  return result;
};

Game = class Game {
  constructor(name, s) {
    this.name = name;
    this.moves = s.split(' ');
    this.nr = 0;
    this.queue = [];
  }

  initMove() {
    var move, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    if (this.nr >= this.moves.length) {
      return;
    }
    move = new Move(this.moves[this.nr]);
    this.nr += 1;
    this.queue.push(move);
    // Dela ut start och stopp till rätt spelare beroende på kvadrant
    if ((ref = move.san[0], indexOf.call("abcd", ref) >= 0) && (ref1 = move.san[1], indexOf.call("1234", ref1) >= 0)) {
      players[2].add(move.start);
    }
    if ((ref2 = move.san[0], indexOf.call("abcd", ref2) >= 0) && (ref3 = move.san[1], indexOf.call("5678", ref3) >= 0)) {
      players[0].add(move.start);
    }
    if ((ref4 = move.san[0], indexOf.call("efgh", ref4) >= 0) && (ref5 = move.san[1], indexOf.call("1234", ref5) >= 0)) {
      players[3].add(move.start);
    }
    if ((ref6 = move.san[0], indexOf.call("efgh", ref6) >= 0) && (ref7 = move.san[1], indexOf.call("5678", ref7) >= 0)) {
      players[1].add(move.start);
    }
    if ((ref8 = move.san[2], indexOf.call("abcd", ref8) >= 0) && (ref9 = move.san[3], indexOf.call("1234", ref9) >= 0)) {
      players[2].add(move.stopp);
    }
    if ((ref10 = move.san[2], indexOf.call("abcd", ref10) >= 0) && (ref11 = move.san[3], indexOf.call("5678", ref11) >= 0)) {
      players[0].add(move.stopp);
    }
    if ((ref12 = move.san[2], indexOf.call("efgh", ref12) >= 0) && (ref13 = move.san[3], indexOf.call("1234", ref13) >= 0)) {
      players[3].add(move.stopp);
    }
    if ((ref14 = move.san[2], indexOf.call("efgh", ref14) >= 0) && (ref15 = move.san[3], indexOf.call("5678", ref15) >= 0)) {
      players[1].add(move.stopp);
    }
    return echo('initMove', this.name, (function() {
      var k, len, ref16, results;
      ref16 = this.queue;
      results = [];
      for (k = 0, len = ref16.length; k < len; k++) {
        move = ref16[k];
        results.push(move);
      }
      return results;
    }).call(this));
  }

  exitMove() {}

};

Square = class Square {
  constructor(pos, san1 = "") { // Vector
    this.pos = pos;
    this.san = san1;
    this.done = false;
  }

};

Move = class Move {
  constructor(san1) { // e2e4
    this.san = san1;
    this.pos = san2pos(this.san);
    this.start = new Square(this.pos[0], this.san);
    this.stopp = new Square(this.pos[1], this.san);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\007-SchackOrientering\coffee\sketch.coffee