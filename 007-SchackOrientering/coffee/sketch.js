// Generated by CoffeeScript 2.7.0
var FILES, Game, MAXTRAIL, Move, Player, RANKS, SIZE, SPEED, Square, coordinates, echo, games, pgnA, pgnB, pgnC, pgnD, players, rotate, shrink, startTime, stoppTime, toVector, uci2pos, updateInfo,
  indexOf = [].indexOf;

SIZE = 60;

MAXTRAIL = 5;

SPEED = 0.5; // 1

FILES = 'abcdefgh';

RANKS = '12345678';

echo = console.log;

games = {};

players = {};

startTime = Date.now();

stoppTime = null;

pgnA = `1. d4 d5 2. c3 Nc6 3. b4 a5 4. b5 Na7 5. a4 c6 6. c4 cxb5 7. cxb5 b6 8. f3 Nf6 9. g4 g5 10. Bg2 e6 11. Bxg5 Bb4+ 12. Nd2 Bxd2+ 13. Qxd2 O-O 14. Qf4 Qc7 15. Qxc7 1-0`;

pgnB = `1. b4 e5 2. Bb2 d6 3. d4 exd4 4. Qxd4 Nc6 5. Qe4+ Nge7 6. a3 a6 7. Nc3 Bf5 8. Qh4 Bxc2 9. Nd5 Nxd5 10. Qc4 Ndxb4 11. axb4 Bg6 12. e4 Qe7 13. Bd3 Ne5 14. Bxe5 Qxe5 15. Rc1 O-O-O 1-0`;

pgnC = `1. e4 e5 2. Nf3 d6 3. Bc4 c6 4. Ng5 Nh6 5. Qh5 g6 6. Bxf7+ Kd7 7. Be6+ Ke7 8. Qh4 Na6 9. Nf7+ Ke8 10. Qxd8# 1-0`;

pgnD = `1. Nf3 d5 2. d4 e6 3. e3 Bb4+ 4. c3 Bd6 5. Ne5 Qf6 6. f4 Qh4+ 7. g3 Qf6 8. h4 Bxe5 9. dxe5 Qg6 10. Bd3 Qxg3+ 11. Kf1 Nh6 12. Qa4+ c6 13. Nd2 Ng4 14. Ke2 Qf2+ 15. Kd1 Nxe3# 0-1`;

// pgnA = """1. a3 e6 2. a4 e5 3. a5 e4 4. a6 e3"""
// pgnB = """1. b3 f6 2. b4 f5 3. b5 f4 4. b6 f3"""
// pgnC = """1. c3 g6 2. c4 g5 3. c5 g4 4. c6 g3"""
// pgnD = """1. d3 h6 2. d4 h5 3. d5 h4 4. d6 h3"""
shrink = function(a) { // tar bort indexes från chess.ascii()
  a = a.replaceAll('.', '•');
  a = a.replaceAll('| ', '');
  a = a.replaceAll(' |', '');
  a = a.replaceAll('1 ', '');
  a = a.replaceAll('2 ', '');
  a = a.replaceAll('3 ', '');
  a = a.replaceAll('4 ', '');
  a = a.replaceAll('5 ', '');
  a = a.replaceAll('6 ', '');
  a = a.replaceAll('7 ', '');
  a = a.replaceAll('8 ', '');
  a = a.split('\n');
  a = a.slice(1, 9);
  return a.join('<br>');
};

updateInfo = function(name, player) {
  if (indexOf.call('ABCD', name) >= 0) {
    return document.getElementById(`info${name}`).innerHTML = `plies: ${games[name].chess.history().length}<br>assists: ${player.assists}<br>time: ${games[name].duration.toFixed()} s`;
  }
};

window.setup = function() {
  createCanvas(8 * SIZE, 8 * SIZE, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  games.A = new Game('A', pgnA, 'https://lichess.org/GjV0BK25');
  games.B = new Game('B', pgnB, 'https://lichess.org/BxG8RTkh');
  games.C = new Game('C', pgnC, 'https://lichess.org/QOFUafUP');
  games.D = new Game('D', pgnD, 'https://lichess.org/l16tQWr3');
  document.getElementById("boardA").innerHTML = shrink(games.A.chess.ascii());
  document.getElementById("boardB").innerHTML = shrink(games.B.chess.ascii());
  document.getElementById("boardC").innerHTML = shrink(games.C.chess.ascii());
  document.getElementById("boardD").innerHTML = shrink(games.D.chess.ascii());
  echo(games.A.uci_moves);
  echo(games.B.uci_moves);
  echo(games.C.uci_moves);
  echo(games.D.uci_moves);
  players.A = new Player('A');
  players.B = new Player('B');
  players.C = new Player('C');
  players.D = new Player('D');
  players.E = new Player('E');
  players.F = new Player('F');
  players.G = new Player('G');
  players.H = new Player('H');
  document.getElementById("A").addEventListener("click", function() {
    return games.A.initMove();
  });
  document.getElementById("B").addEventListener("click", function() {
    return games.B.initMove();
  });
  document.getElementById("C").addEventListener("click", function() {
    return games.C.initMove();
  });
  return document.getElementById("D").addEventListener("click", function() {
    return games.D.initMove();
  });
};

window.draw = function() {
  var i, j, k, key, l, len, m, player, ref, results, x, y;
  background(0);
  noStroke();
  for (i = k = 0; k < 8; i = ++k) {
    for (j = l = 0; l < 8; j = ++l) {
      if ((i + j) % 2 === 1) {
        fill('green');
      } else {
        fill('lightgreen');
      }
      x = i * SIZE;
      y = j * SIZE;
      rect(x, y, SIZE - 1, SIZE - 1);
    }
  }
  ref = 'EFGHABCD';
  results = [];
  for (m = 0, len = ref.length; m < len; m++) {
    key = ref[m];
    player = players[key];
    player.draw();
    results.push(updateInfo(key, player));
  }
  return results;
};

Player = class Player {
  constructor(name1, tx = 4 * SIZE, ty = 4 * SIZE) {
    this.name = name1;
    this.tx = tx;
    this.ty = ty;
    this.speed = SPEED;
    this.pos = createVector(4 * SIZE, 4 * SIZE);
    this.target = new Square(createVector(this.tx, this.ty));
    this.home = this.target;
    this.squares = []; // lista med Square som ej påbörjats
    this.trail = [];
    this.n = 0;
    this.distance = 0;
    this.assists = 0;
  }

  closest() {
    var bestDist, bestSq, d, k, len, ref, square;
    if (this.squares.length === 0) {
      return null;
    }
    bestDist = 99999;
    bestSq = this.squares[0];
    ref = this.squares;
    for (k = 0, len = ref.length; k < len; k++) {
      square = ref[k];
      d = p5.Vector.dist(square.pos, this.pos);
      if (d < bestDist) {
        bestDist = d;
        bestSq = square;
      }
    }
    return bestSq;
  }

  add(sq) {
    this.squares.push(sq);
    return this.target = this.closest();
  }

  drawTail() {
    var i, k, ref, results, size;
    if (this.n % (10 / SPEED) === 0) {
      this.trail.push(createVector(this.pos.x, this.pos.y));
    }
    this.n += 1;
    if (this.trail.length > MAXTRAIL) {
      this.trail.shift();
    }
    stroke('black');
    results = [];
    for (i = k = 0, ref = this.trail.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      size = map(i, 0, this.trail.length - 1, 5, 15);
      noFill();
      results.push(ellipse(this.trail[i].x, this.trail[i].y, size, size));
    }
    return results;
  }

  draw() {
    var carriers, d, duration, dx, dy, g, k, key, len, ref, ref1, ref2, ref3, ref4, square, step, target, td;
    target = this.target.pos;
    dx = target.x - this.pos.x;
    dy = target.y - this.pos.y;
    d = sqrt(dx * dx + dy * dy);
    stroke('black');
    // if @name in 'ABCD'
    line(target.x, target.y, this.pos.x, this.pos.y);
    step = p5.Vector.sub(target, this.pos).setMag(min(this.speed, d));
    if (d < this.speed) { // target nådd
      if (!this.target.done) {
        this.target.done = true;
        this.target.carrier = this.name;
// Skicka draget om både start.done och slut.done
        for (key in games) {
          g = games[key];
          if (g.move && g.move.start.done && g.move.stopp.done) {
            duration = 15 / SPEED * (performance.now() - g.move.start.time) / 1000;
            if (g.index % 2 === 0) {
              g.duration += duration;
            }
            if (g.move.start.carrier === g.move.stopp.carrier) {
              carriers = g.move.start.carrier;
            } else {
              carriers = g.move.start.carrier + g.move.stopp.carrier;
            }
            if (ref = g.move.start.carrier, indexOf.call('ABCD', ref) >= 0) {
              echo('assists: ', g.move.start.carrier, g.move.stopp.carrier);
              players[g.move.start.carrier].assists += 1;
              players[g.move.stopp.carrier].assists += 1;
              echo(g.name, g.move.uci, this.name, g.move.start.carrier + g.move.stopp.carrier);
            }
            g.chess.move({
              from: g.move.uci.slice(0, 2),
              to: g.move.uci.slice(2, 4)
            });
            td = document.getElementById(`SEL${g.name}`);
            td.innerHTML += `${g.san_moves[g.chess.history().length - 1]} by ${carriers} (${duration.toFixed()} s)<br>`;
            document.getElementById(`board${g.name}`).innerHTML = shrink(g.chess.ascii());
            updateInfo(g.name, this);
            g.queue.push(g.move);
            g.move = null;
            if (g.initMove() === false) {
              stoppTime = Date.now();
              echo('done', (stoppTime - startTime) / 1000);
            }
          }
        }
      }
      this.squares = _.filter(this.squares, function(sq) {
        return sq.done === false;
      });
      // hämta närmaste uppdrag om sådant finns
      if (this.squares.length > 0) {
        this.target = this.closest();
        d = p5.Vector.dist(this.pos, this.target.pos);
        this.distance += d;
      }
    }
    this.pos.add(step);
    ref1 = this.squares;
    for (k = 0, len = ref1.length; k < len; k++) {
      square = ref1[k];
      if (ref2 = this.name, indexOf.call('ABCD', ref2) >= 0) {
        fill('red');
      } else {
        fill('black');
      }
      circle(square.pos.x, square.pos.y, 10);
    }
    // if @name in 'ABCD'
    this.drawTail();
    if (ref3 = this.name, indexOf.call('ABCD', ref3) >= 0) {
      fill('yellow');
    } else {
      fill('black');
    }
    strokeWeight(1);
    circle(this.pos.x, this.pos.y, 0.4 * SIZE);
    if (ref4 = this.name, indexOf.call('ABCD', ref4) >= 0) {
      fill('black');
    } else {
      fill('yellow');
    }
    noStroke();
    // fill 'black'
    return text(this.name, this.pos.x, this.pos.y);
  }

};

uci2pos = function(uci) { // t ex e2e4 => [[225,75],[225,175]]
  var result, startx, starty, stoppx, stoppy, x, y;
  startx = uci[0];
  starty = uci[1];
  stoppx = uci[2];
  stoppy = uci[3];
  result = [];
  x = FILES.indexOf(startx);
  y = 7 - RANKS.indexOf(starty);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  x = FILES.indexOf(stoppx);
  y = 7 - RANKS.indexOf(stoppy);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  return result;
};

Game = class Game {
  constructor(name1, pgn, link) {
    var move;
    this.name = name1;
    this.link = link;
    this.chess = new Chess();
    this.chess.load_pgn(pgn);
    this.san_moves = this.chess.history(); // [Nf3, ...]
    this.uci_moves = (function() {
      var k, len, ref, results;
      ref = this.chess.history({
        verbose: true
      });
      // [g1f3, ...]
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        move = ref[k];
        results.push(move.from + move.to);
      }
      return results;
    }).call(this);
    this.move = null;
    this.queue = [];
    this.duration = 0;
    this.chess.reset();
    this.index = -1;
    document.getElementById(`link${this.name}`).innerHTML = `<a href=\"${this.link}\" target=\"_blank\">Link</a>`;
  }

  initMove() {
    var a, antal, b, i, k, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref4, ref5, ref6, ref7, ref8, ref9, start, stopp;
    if (this.index >= this.uci_moves.length - 1) {
      return false;
    }
    this.index += 1;
    if (this.move !== null) {
      echo('too quick!');
      return false;
    }
    this.move = new Move(this.uci_moves[this.index], this.name);
    start = this.move.uci.slice(0, 2);
    stopp = this.move.uci.slice(2, 4);
    antal = 'ABCD'.indexOf(this.name);
    for (i = k = 0, ref = antal; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      start = rotate(start);
      stopp = rotate(stopp);
    }
    if (this.index % 2 === 0) {
      a = "1234";
      b = "5678";
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref1 = start[0], indexOf.call("abcd", ref1) >= 0) && (ref2 = start[1], indexOf.call(a, ref2) >= 0)) {
        players.A.add(this.move.start);
      }
      if ((ref3 = start[0], indexOf.call("efgh", ref3) >= 0) && (ref4 = start[1], indexOf.call(a, ref4) >= 0)) {
        players.B.add(this.move.start);
      }
      if ((ref5 = start[0], indexOf.call("abcd", ref5) >= 0) && (ref6 = start[1], indexOf.call(b, ref6) >= 0)) {
        players.C.add(this.move.start);
      }
      if ((ref7 = start[0], indexOf.call("efgh", ref7) >= 0) && (ref8 = start[1], indexOf.call(b, ref8) >= 0)) {
        players.D.add(this.move.start);
      }
      if ((ref9 = stopp[0], indexOf.call("abcd", ref9) >= 0) && (ref10 = stopp[1], indexOf.call(a, ref10) >= 0)) {
        players.A.add(this.move.stopp);
      }
      if ((ref11 = stopp[0], indexOf.call("efgh", ref11) >= 0) && (ref12 = stopp[1], indexOf.call(a, ref12) >= 0)) {
        players.B.add(this.move.stopp);
      }
      if ((ref13 = stopp[0], indexOf.call("abcd", ref13) >= 0) && (ref14 = stopp[1], indexOf.call(b, ref14) >= 0)) {
        players.C.add(this.move.stopp);
      }
      if ((ref15 = stopp[0], indexOf.call("efgh", ref15) >= 0) && (ref16 = stopp[1], indexOf.call(b, ref16) >= 0)) {
        players.D.add(this.move.stopp);
      }
    } else {
      a = "1234";
      b = "5678";
      // Hantera motståndaren
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref17 = start[0], indexOf.call("abcd", ref17) >= 0) && (ref18 = start[1], indexOf.call(a, ref18) >= 0)) {
        players.G.add(this.move.start);
      }
      if ((ref19 = start[0], indexOf.call("abcd", ref19) >= 0) && (ref20 = start[1], indexOf.call(b, ref20) >= 0)) {
        players.E.add(this.move.start);
      }
      if ((ref21 = start[0], indexOf.call("efgh", ref21) >= 0) && (ref22 = start[1], indexOf.call(a, ref22) >= 0)) {
        players.H.add(this.move.start);
      }
      if ((ref23 = start[0], indexOf.call("efgh", ref23) >= 0) && (ref24 = start[1], indexOf.call(b, ref24) >= 0)) {
        players.F.add(this.move.start);
      }
      if ((ref25 = stopp[0], indexOf.call("abcd", ref25) >= 0) && (ref26 = stopp[1], indexOf.call(a, ref26) >= 0)) {
        players.G.add(this.move.stopp);
      }
      if ((ref27 = stopp[0], indexOf.call("abcd", ref27) >= 0) && (ref28 = stopp[1], indexOf.call(b, ref28) >= 0)) {
        players.E.add(this.move.stopp);
      }
      if ((ref29 = stopp[0], indexOf.call("efgh", ref29) >= 0) && (ref30 = stopp[1], indexOf.call(a, ref30) >= 0)) {
        players.H.add(this.move.stopp);
      }
      if ((ref31 = stopp[0], indexOf.call("efgh", ref31) >= 0) && (ref32 = stopp[1], indexOf.call(b, ref32) >= 0)) {
        players.F.add(this.move.stopp);
      }
    }
    return true;
  }

};

Square = class Square {
  constructor(pos, uci1 = "", carrier = "") { // Vector
    this.pos = pos;
    this.uci = uci1;
    this.carrier = carrier;
    this.done = false;
    this.time = performance.now();
  }

};

rotate = function(sq) {
  return FILES[8 - sq[1]] + String(1 + FILES.indexOf(sq[0]));
};

echo("g3" === rotate("c2"));

echo("h1" === rotate("a1"));

echo("h8" === rotate(rotate("a1")));

echo("a8" === rotate(rotate(rotate("a1"))));

echo("a1" === rotate(rotate(rotate(rotate("a1")))));

coordinates = function(sq) {
  var x, y;
  x = FILES.indexOf(sq[0]);
  y = RANKS.indexOf(sq[1]);
  return [x, 7 - y];
};

echo(_.isEqual([4, 4], coordinates("e4")));

echo(_.isEqual([0, 7], coordinates("a1")));

toVector = function([x, y]) {
  return createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y);
};

// echo toVector [3,4]
Move = class Move {
  constructor(uci1, name1) { // e2e4, B
    var antal, i, k, ref, start, stopp;
    this.uci = uci1;
    this.name = name1;
    antal = "ABCD".indexOf(this.name);
    start = this.uci.slice(0, 2);
    stopp = this.uci.slice(2, 4);
    for (i = k = 0, ref = antal; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      start = rotate(start);
      stopp = rotate(stopp);
    }
    start = toVector(coordinates(start));
    stopp = toVector(coordinates(stopp));
    this.pos = [start, stopp];
    this.start = new Square(start, this.uci);
    this.stopp = new Square(stopp, this.uci);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\007-SchackOrientering\coffee\sketch.coffee