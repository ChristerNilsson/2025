// Generated by CoffeeScript 2.7.0
var createChessTables, echo, extract, fetch, formatPGN, getHeader, parsePGN, pretty, removeParenthesis, splitMoves, tabell;

echo = console.log;

// html = (tag, first, args...) ->
// 	if typeof first is 'object' and not Array.isArray first
// 		attrs = Object.entries(first).map(([k, v]) -> "#{k}='#{v}'").join ' '
// 		content = args.join ''
// 	else
// 		attrs = ''
// 		content = [first, args...].join ''
// 	openTag = if attrs then "<#{tag} #{attrs}>" else "<#{tag}>"
// 	"#{openTag}#{content}</#{tag}>"

// table = (args...) -> html 'table', args...
// tr    = (args...) -> html 'tr',    args...
// td    = (args...) -> html 'td',    args...
// span  = (args...) -> html "span",  args...
// table = (args...) -> html "table", args...
// th    = (args...) -> html "th",    args...
// a     = (args...) -> html "a",     args...
// strong= (args...) -> html "strong",args...
// div   = (args...) -> html "div",   args...
formatPGN = function() {
  var ctrlA, ctrlB;
  ctrlA = document.getElementById("pgn-input");
  ctrlB = document.getElementById("knapp");
  ctrlA.hidden = true;
  ctrlB.hidden = true;
  return createChessTables(parsePGN(ctrlA.value));
};

fetch = function(pgn, move, offset, start, stopp) {
  var a, p, q;
  a = offset + move.toString().length;
  p = pgn.indexOf(start);
  q = pgn.indexOf(stopp);
  if (p === -1) { //['','','']
    return {};
  }
  if (q === -1) {
    q = pgn.length;
  }
  return pretty(pgn.substring(p + a, q));
};

extract = function(raw, result, start, stopp) {
  var p, q;
  p = raw.indexOf(start);
  q = raw.indexOf(stopp);
  result.eval = raw.substring(p + start.length, q);
  echo(result.eval);
  // echo 'left',raw.substring(0,p)
  // echo 'right',raw.substring(q+3)
  return raw.substring(0, p) + raw.substring(q + stopp.length);
};

pretty = function(raw) {
  var arr, move, result;
  result = {};
  // echo raw
  raw = extract(raw, result, "{ [%eval ", "] }");
  // if "{" not in raw
  // 	return [raw.trim(),'','']
  arr = raw.split(' ');
  echo(arr);
  move = arr[0];
  if ("Inaccuracy." === arr[3]) {
    result.drag = arr[0];
    result.betyg = ' • ';
    result.best = arr[4];
    return result;
  }
  // return [move, ' • ',   arr[4]]
  if ("Mistake." === arr[3]) {
    result.drag = arr[0];
    result.betyg = ' •• ';
    result.best = arr[4];
    return result;
  }
  // return [move, ' •• ',  arr[4]]
  if ("Blunder." === arr[3]) {
    result.drag = arr[0];
    result.betyg = ' ••• ';
    result.best = arr[4];
    return result;
  }
  // return [move, ' ••• ', arr[4]]
  if ("Checkmate" === arr[3]) {
    result.drag = arr[0];
    result.betyg = ' ••• ';
    result.best = arr[7];
    return result;
  }
  // then return [move, ' ••• ', arr[7]]
  if ("checkmate" === arr[5]) {
    result.drag = arr[0];
    result.betyg = ' ••• ';
    result.best = arr[7];
    return result;
  }
  // then return [move, ' ••• ', arr[7]]
  result.drag = arr[0];
  result.betyg = '';
  result.best = '';
  return result;
};

// echo ["d5",""], pretty "d5  "
// pretty "Bh5  { Inaccuracy. Bxf3 was best. }  " => ["Bh5","• (Bxf3)"]
fetch = function(pgn, move, offset, start, stopp) {
  var a, p, q;
  a = offset + move.toString().length;
  p = pgn.indexOf(start);
  q = pgn.indexOf(stopp);
  if (p === -1) { //['','','']
    return {};
  }
  if (q === -1) {
    q = pgn.length;
  }
  return pretty(pgn.substring(p + a, q));
};

splitMoves = function(pgn) {
  var arr, b, move, w;
  arr = [];
  move = 1;
  while (move < 40) {
    w = fetch(pgn, move, 2, move + '.', move + '...');
    echo('w', w);
    if (w.length === 0) {
      break;
    } else {
      arr.push(w);
    }
    b = fetch(pgn, move, 4, move + '...', (move + 1) + '.');
    if (b.length === 0) {
      break;
    } else {
      arr.push(b);
    }
    // echo 'splitMoves',w
    move++;
  }
  echo(arr);
  return arr;
};

removeParenthesis = function(pgn, left, right) {
  var ch, k, len, level, result;
  result = "";
  level = 0;
  for (k = 0, len = pgn.length; k < len; k++) {
    ch = pgn[k];
    if (ch === left) {
      level++;
    } else if (ch === right) {
      level--;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

tabell = function(arr) {
  var b, i, index, k, l, n, ref, ref1, result, w;
  n = arr.length;
  for (i = k = 0, ref = 160 - n % 160; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    arr.push(['', '', '']);
  }
  result = [];
  n = arr.length; // antal ply
  echo(n);
  for (i = l = 0, ref1 = n / 2; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
    index = 2 * i;
    w = index < n ? arr[index] : {
      eval: '',
      drag: '',
      betyg: '',
      best: ''
    };
    b = index + 1 < n ? arr[index + 1] : {
      eval: '',
      drag: '',
      betyg: '',
      best: ''
    };
    result.push([w.eval, w.drag, w.best, 1 + i, b.best, b.drag, b.eval]);
  }
  return result;
};

getHeader = function(pgn) {
  var arr, attrs, i, k, line, name, p, ref, result, site, value;
  arr = pgn.split('\n');
  attrs = {};
  result = "";
  attrs.Event = "";
  attrs.Date = "";
  attrs.Site = "";
  attrs.TimeControl = "";
  attrs.FEN = "";
  attrs.WhiteElo = "";
  attrs.White = "";
  attrs.BlackElo = "";
  attrs.Black = "";
  attrs.Result = "";
  for (i = k = 0, ref = arr.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    line = arr[i].trim();
    if (line === '') {
      break;
    }
    p = line.indexOf(' ');
    name = line.substring(1, p);
    value = line.substring(p + 2, line.length - 2);
    attrs[name] = value;
  }
  site = `<a href=${attrs.Site}>Lichess</a>`;
  return `${attrs.Event} ${attrs.Date} ${site} ${attrs.FEN} ${attrs.White} ${attrs.WhiteElo} vs ${attrs.BlackElo} ${attrs.Black} ${attrs.Result}<br><br>`;
};

createChessTables = function(arr) {
  var container, header, headerRow, headers, i, j, k, l, len, m, move, newMove, o, ref, ref1, ref2, rowIndex, rowsPerTable, t, table, tableCount, td, th, totalRows, tr;
  rowsPerTable = 40; // Antal rader per tabell
  totalRows = arr.length; // Totalt antal rader
  headers = ["Nr", "Eval", "Vit", "W", "B", "Svart", "Eval"];
  tableCount = Math.ceil(totalRows / rowsPerTable);
  echo('tableCount', tableCount);
  container = document.createElement("div");
  container.className = "table-container";
  for (t = k = 0, ref = tableCount; (0 <= ref ? k < ref : k > ref); t = 0 <= ref ? ++k : --k) {
    table = document.createElement("table");
    table.border = "1";
    table.className = "chessTable";
    // Skapa rubrikrad
    headerRow = document.createElement("tr");
    for (l = 0, len = headers.length; l < len; l++) {
      header = headers[l];
      th = document.createElement("th");
      th.innerText = header;
      headerRow.appendChild(th);
      table.appendChild(headerRow);
    }
// Skapa rader
    for (i = m = 0, ref1 = rowsPerTable; (0 <= ref1 ? m < ref1 : m > ref1); i = 0 <= ref1 ? ++m : --m) {
      rowIndex = t * rowsPerTable + i;
      if (rowIndex >= totalRows) { // return
        continue;
      }
      tr = document.createElement("tr");
      move = arr[rowIndex % arr.length] || ["", "", "", "", "", "", ""];
      newMove = [move[3], move[1], move[2], move[0], move[6], move[4], move[5]];
      for (j = o = 0, ref2 = headers.length; (0 <= ref2 ? o < ref2 : o > ref2); j = 0 <= ref2 ? ++o : --o) {
        td = document.createElement("td");
        td.innerText = newMove[j];
        tr.appendChild(td);
      }
      table.appendChild(tr);
    }
    container.appendChild(table);
  }
  return document.body.appendChild(container);
};

parsePGN = function(pgn) {
  var div;
  div = document.createElement("div");
  div.innerHTML = getHeader(pgn);
  document.body.appendChild(div);
  pgn = removeParenthesis(pgn, '(', ')');
  pgn = removeParenthesis(pgn, '[', ']'); 
  pgn = pgn.replaceAll('{  }', '');
  pgn = pgn.replaceAll('??', '');
  pgn = pgn.replaceAll('?!', '');
  pgn = pgn.replaceAll('?', '');
  pgn = pgn.replaceAll('0-1', '');
  pgn = pgn.replaceAll('1/2-1/2', '');
  pgn = pgn.replaceAll('1-0', '');
  pgn = pgn.replaceAll('*', '');
  echo(pgn);
  return tabell(splitMoves(pgn));
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\003-PrettyPGN\coffee\sketch.coffee