// Generated by CoffeeScript 2.7.0
var a, div, echo, fetch, formatPGN, getHeader, html, parsePGN, pretty, removeParenthesis, span, splitMoves, strong, tabell, table, td, th, tr,
  indexOf = [].indexOf;

echo = console.log;

html = function(tag, first, ...args) {
  var attrs, content, openTag;
  if (typeof first === 'object' && !Array.isArray(first)) {
    attrs = Object.entries(first).map(function([k, v]) {
      return `${k}='${v}'`;
    }).join(' ');
    content = args.join('');
  } else {
    attrs = '';
    content = [first, ...args].join('');
  }
  openTag = attrs ? `<${tag} ${attrs}>` : `<${tag}>`;
  return `${openTag}${content}</${tag}>`;
};

table = function(...args) {
  return html('table', ...args);
};

tr = function(...args) {
  return html('tr', ...args);
};

td = function(...args) {
  return html('td', ...args);
};

span = function(...args) {
  return html("span", ...args);
};

table = function(...args) {
  return html("table", ...args);
};

th = function(...args) {
  return html("th", ...args);
};

a = function(...args) {
  return html("a", ...args);
};

strong = function(...args) {
  return html("strong", ...args);
};

div = function(...args) {
  return html("div", ...args);
};

formatPGN = function() {
  var ctrlA, ctrlB, ctrlC, input;
  ctrlA = document.getElementById("pgn-input");
  ctrlB = document.getElementById("knapp");
  ctrlC = document.getElementById("output");
  ctrlA.hidden = true;
  ctrlB.hidden = true;
  input = ctrlA.value;
  return ctrlC.innerHTML = parsePGN(input);
};

pretty = function(raw) {
  var arr, move;
  if (indexOf.call(raw, "{") < 0) {
    return [raw.trim(), '', ''];
  }
  arr = raw.split(' ');
  move = arr[0];
  if ("Inaccuracy." === arr[3]) {
    return [move, ' • ', arr[4]];
  }
  if ("Mistake." === arr[3]) {
    return [move, ' •• ', arr[4]];
  }
  if ("Blunder." === arr[3]) {
    return [move, ' ••• ', arr[4]];
  }
  if ("Checkmate" === arr[3]) {
    return [move, ' ••• ', arr[7]];
  }
  if ("checkmate" === arr[5]) {
    return [move, ' ••• ', arr[7]];
  }
  return [move, '', ''];
};

// echo ["d5",""], pretty "d5  "
// pretty "Bh5  { Inaccuracy. Bxf3 was best. }  " => ["Bh5","• (Bxf3)"]
fetch = function(pgn, move, offset, start, stopp) {
  var p, q, result;
  a = offset + move.toString().length;
  p = pgn.indexOf(start);
  q = pgn.indexOf(stopp);
  if (p === -1) {
    return ['', '', ''];
  }
  if (q === -1) {
    q = pgn.length;
  }
  result = pretty(pgn.substring(p + a, q));
  echo(result);
  return result;
};

splitMoves = function(pgn) {
  var arr, b, move, w;
  arr = [];
  move = 1;
  while (true) {
    w = fetch(pgn, move, 2, move + '.', move + '...');
    if (w.join('').length === 0) {
      break;
    }
    arr.push(w);
    b = fetch(pgn, move, 4, move + '...', (move + 1) + '.');
    if (b.join('').length === 0) {
      break;
    }
    arr.push(b);
    move++;
  }
  return arr;
};

removeParenthesis = function(pgn, left, right) {
  var ch, j, len, level, result;
  result = "";
  level = 0;
  for (j = 0, len = pgn.length; j < len; j++) {
    ch = pgn[j];
    if (ch === left) {
      level++;
    } else if (ch === right) {
      level--;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

tabell = function(arr) {
  var b, c, d, e, f, i, index, j, n, ref, s;
  s = "";
  n = arr.length; // antal ply
  for (i = j = 0, ref = n / 2; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    index = 2 * i;
    [c, b, a] = index < n ? arr[index] : ['', '', ''];
    [d, e, f] = index + 1 < n ? arr[index + 1] : ['', '', ''];
    s += tr({}, td(a, td(b, td(c, td(strong(1 + i, td(d, td(e, td(f)))))))));
  }
  return table({
    class: "inner-table"
  }, s);
};

getHeader = function(pgn) {
  var arr, attrs, i, j, line, name, p, ref, result, site, value;
  arr = pgn.split('\n');
  attrs = {};
  result = "";
  attrs.Event = "";
  attrs.Date = "";
  attrs.Site = "";
  attrs.TimeControl = "";
  attrs.FEN = "";
  attrs.WhiteElo = "";
  attrs.White = "";
  attrs.BlackElo = "";
  attrs.Black = "";
  attrs.Result = "";
  for (i = j = 0, ref = arr.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    line = arr[i].trim();
    if (line === '') {
      break;
    }
    p = line.indexOf(' ');
    name = line.substring(1, p);
    value = line.substring(p + 2, line.length - 2);
    attrs[name] = value;
  }
  site = a({
    href: attrs.Site
  }, "Lichess");
  return `${attrs.Event} ${attrs.Date}<br>${site}<br> FEN: ${attrs.FEN}<br> White: ${attrs.WhiteElo} ${attrs.White}<br>Black: ${attrs.BlackElo} ${attrs.Black}<br>${attrs.Result}<br><br>`;
};

parsePGN = function(pgn) {
  var header;
  header = getHeader(pgn);
  pgn = removeParenthesis(pgn, '(', ')');
  pgn = removeParenthesis(pgn, '[', ']');
  pgn = pgn.replaceAll('{  }', '');
  pgn = pgn.replaceAll('??', '');
  pgn = pgn.replaceAll('?!', '');
  pgn = pgn.replaceAll('?', '');
  pgn = pgn.replaceAll('0-1', '');
  pgn = pgn.replaceAll('1/2-1/2', '');
  pgn = pgn.replaceAll('1-0', '');
  pgn = pgn.replaceAll('*', '');
  return div({}, header, tabell(splitMoves(pgn)));
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\003-PrettyPGN\coffee\sketch.coffee