// Generated by CoffeeScript 2.7.0
var a, echo, fetch, formatPGN, getHeader, parsePGN, pretty, removeEval, removeParenthesis, span, splitMoves, strong, tabell, table, td, th, tr,
  indexOf = [].indexOf;

echo = console.log;

span = function(s, attrs = "") {
  return `<span ${attrs}>${s}</span>`;
};

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

a = function(s, attrs = "") {
  return `<a ${attrs}>${s}</a>`;
};

strong = function(s) {
  return `<strong>${s}</strong>`;
};

formatPGN = function() {
  var ctrlA, ctrlB, ctrlC, input;
  ctrlA = document.getElementById("pgn-input");
  ctrlB = document.getElementById("knapp");
  ctrlC = document.getElementById("output");
  ctrlA.hidden = true;
  ctrlB.hidden = true;
  input = ctrlA.value;
  return ctrlC.innerHTML = parsePGN(input);
};

pretty = function(raw) {
  var arr, move;
  if (indexOf.call(raw, "{") < 0) {
    return [raw.trim(), '', ''];
  }
  arr = raw.split(' ');
  move = arr[0];
  if ("Inaccuracy." === arr[3]) {
    return [move, ' • ', arr[4]];
  }
  if ("Mistake." === arr[3]) {
    return [move, ' •• ', arr[4]];
  }
  if ("Blunder." === arr[3]) {
    return [move, ' ••• ', arr[4]];
  }
  if ("Checkmate" === arr[3]) {
    return [move, ' ••• ', arr[7]];
  }
  if ("checkmate" === arr[5]) {
    return [move, ' ••• ', arr[7]];
  }
  return [move, '', ''];
};

// echo ["d5",""], pretty "d5  "
// pretty "Bh5  { Inaccuracy. Bxf3 was best. }  " => ["Bh5","• (Bxf3)"]
fetch = function(pgn, move, offset, start, stopp) {
  var p, q, result;
  a = offset + move.toString().length;
  p = pgn.indexOf(start);
  q = pgn.indexOf(stopp);
  if (p === -1) {
    return ['', '', ''];
  }
  if (q === -1) {
    q = pgn.length;
  }
  result = pretty(pgn.substring(p + a, q));
  echo(result);
  return result;
};

splitMoves = function(pgn) {
  var arr, b, move, w;
  arr = [];
  move = 1;
  while (true) {
    w = fetch(pgn, move, 2, move + '.', move + '...');
    if (w.join('').length === 0) {
      break;
    }
    arr.push(w);
    b = fetch(pgn, move, 4, move + '...', (move + 1) + '.');
    if (b.join('').length === 0) {
      break;
    }
    arr.push(b);
    move++;
  }
  return arr;
};

removeParenthesis = function(pgn) {
  var ch, j, len, level, result;
  result = "";
  level = 0;
  for (j = 0, len = pgn.length; j < len; j++) {
    ch = pgn[j];
    if (ch === '(') {
      level++;
    } else if (ch === ')') {
      level--;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

removeEval = function(pgn) {
  var ch, j, len, level, result;
  result = "";
  level = 0;
  for (j = 0, len = pgn.length; j < len; j++) {
    ch = pgn[j];
    if (ch === '[') {
      level = level + 1;
    } else if (ch === ']') {
      level = level - 1;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

tabell = function(arr, start, stopp) {
  var b, c, d, e, f, i, index, j, n, ref, ref1, s, t;
  s = "";
  n = arr.length; // antal ply
  echo(n, start, stopp);
  if (start >= n) {
    return '';
  }
  for (i = j = ref = start / 2, ref1 = stopp / 2; (ref <= ref1 ? j < ref1 : j > ref1); i = ref <= ref1 ? ++j : --j) {
    index = 2 * i;
    [c, b, a] = index < n ? arr[index] : ['', '', ''];
    [d, e, f] = index + 1 < n ? arr[index + 1] : ['', '', ''];
    t = tr(td(a) + td(b) + td(c) + td(strong(1 + i)) + td(d) + td(e) + td(f));
    echo(i, t);
    s += t;
  }
  return table(s, 'class="inner-table"');
};

getHeader = function(pgn) {
  var arr, attrs, i, j, line, name, p, ref, result, site, value;
  arr = pgn.split('\n');
  attrs = {};
  result = "";
  attrs.Event = "";
  attrs.Date = "";
  attrs.Site = "";
  attrs.TimeControl = "";
  attrs.FEN = "";
  attrs.WhiteElo = "";
  attrs.White = "";
  attrs.BlackElo = "";
  attrs.Black = "";
  attrs.Result = "";
  for (i = j = 0, ref = arr.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    line = arr[i].trim();
    if (line === '') {
      break;
    }
    p = line.indexOf(' ');
    name = line.substring(1, p);
    value = line.substring(p + 2, line.length - 2);
    attrs[name] = value;
  }
  site = a("Lichess", `href=${attrs.Site}`);
  return `${attrs.Event} ${attrs.Date}<br>${site}<br> FEN: ${attrs.FEN}<br> White: ${attrs.WhiteElo} ${attrs.White}<br>Black: ${attrs.BlackElo} ${attrs.Black}<br>${attrs.Result}`;
};

parsePGN = function(pgn) {
  var a0, a1, a2, arr, gap, header;
  header = getHeader(pgn);
  echo(header);
  pgn = removeParenthesis(pgn);
  pgn = removeEval(pgn);
  pgn = pgn.replaceAll('{  }', '');
  pgn = pgn.replaceAll('??', '');
  pgn = pgn.replaceAll('?!', '');
  pgn = pgn.replaceAll('?', '');
  pgn = pgn.replaceAll('0-1', '');
  pgn = pgn.replaceAll('1/2-1/2', '');
  pgn = pgn.replaceAll('1-0', '');
  pgn = pgn.replaceAll('*', '');
  arr = splitMoves(pgn);
  echo('arr', arr);
  a0 = tabell(arr, 0, 80); // klarar 40 drag
  if (arr.length > 80) {
    a1 = tabell(arr, 80, 160);
  } else {
    a1 = "";
  }
  a2 = tabell(arr, 160, 240); // klarar 40 till
  echo('a0', a0);
  echo('a1', a1);
  echo('a2', a2);
  gap = td("", 'style="width:10px"');
  return table(tr(td(header, 'colspan="5" style="text-align:left"')) + tr(td(a0) + gap + td(a1) + gap + td(a2)), 'class="outer-table"');
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\003-PrettyPGN\coffee\sketch.coffee