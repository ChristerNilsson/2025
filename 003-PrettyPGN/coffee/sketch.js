// Generated by CoffeeScript 2.7.0
var echo, fetch, formatPGN, getHeader, parsePGN, pretty, removeEval, removeParenthesis, splitMoves, tabell,
  indexOf = [].indexOf;

echo = console.log;

formatPGN = function() {
  var ctrlA, ctrlB, ctrlC, input;
  ctrlA = document.getElementById("pgn-input");
  ctrlB = document.getElementById("knapp");
  ctrlC = document.getElementById("output");
  ctrlA.hidden = true;
  ctrlB.hidden = true;
  input = ctrlA.value;
  return ctrlC.innerHTML = parsePGN(input);
};

pretty = function(raw) {
  var arr, move;
  if (indexOf.call(raw, "{") < 0) {
    return [raw.trim(), '', ''];
  }
  arr = raw.split(' ');
  move = arr[0];
  if ("Inaccuracy." === arr[3]) {
    return [move, ' • ', arr[4]];
  }
  if ("Mistake." === arr[3]) {
    return [move, ' •• ', arr[4]];
  }
  if ("Blunder." === arr[3]) {
    return [move, ' ••• ', arr[4]];
  }
  if ("Checkmate" === arr[3]) {
    return [move, ' ••• ', arr[7]];
  }
  if ("checkmate" === arr[5]) {
    return [move, ' ••• ', arr[7]];
  }
  return [move, '', ''];
};

// echo ["d5",""], pretty "d5  "
// pretty "Bh5  { Inaccuracy. Bxf3 was best. }  " => ["Bh5","• (Bxf3)"]
fetch = function(pgn, move, offset, start, stopp) {
  var a, p, q, result;
  a = offset + move.toString().length;
  p = pgn.indexOf(start);
  q = pgn.indexOf(stopp);
  if (p === -1) {
    return ['', '', ''];
  }
  if (q === -1) {
    q = pgn.length;
  }
  result = pretty(pgn.substring(p + a, q));
  echo(result);
  return result;
};

splitMoves = function(pgn) {
  var arr, b, move, w;
  arr = [];
  move = 1;
  while (true) {
    w = fetch(pgn, move, 2, move + '.', move + '...');
    b = fetch(pgn, move, 4, move + '...', (move + 1) + '.');
    arr.push(w);
    if (b.join('').length === 0) {
      break;
    }
    arr.push(b);
    move++;
  }
  return arr;
};

removeParenthesis = function(pgn) {
  var ch, j, len, level, result;
  result = "";
  level = 0;
  for (j = 0, len = pgn.length; j < len; j++) {
    ch = pgn[j];
    if (ch === '(') {
      level++;
    } else if (ch === ')') {
      level--;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

removeEval = function(pgn) {
  var ch, j, len, level, result;
  result = "";
  level = 0;
  for (j = 0, len = pgn.length; j < len; j++) {
    ch = pgn[j];
    if (ch === '[') {
      level = level + 1;
    } else if (ch === ']') {
      level = level - 1;
    } else if (level === 0) {
      result += ch;
    }
  }
  return result;
};

tabell = function(arr, start, stopp) {
  var a, b, c, d, e, f, i, n, s;
  s = "";
  n = arr.length; // antal ply
  echo(n, start, stopp);
  if (start >= n) {
    return '';
  }
  //arr = arr.slice start,stopp
  i = start / 2;
  while (i < stopp / 2) { // moves
    [a, b, c] = ['', '', ''];
    [d, e, f] = ['', '', ''];
    if (2 * i < n) {
      [c, b, a] = arr[2 * i];
    }
    if (2 * i + 1 < n) {
      [d, e, f] = arr[2 * i + 1];
    }
    s += `<tr><td>${a}</td><td>${b}</td><td>${c}</td><td><strong>${1 + i}</strong></td><td>${d}</td><td>${e}</td><td>${f}</td></tr>`;
    i++;
  }
  return '<table class="inner-table">' + s + '</table>';
};

getHeader = function(pgn) {
  var arr, attrs, i, j, line, name, p, ref, result, value;
  arr = pgn.split('\n');
  attrs = {};
  result = "";
  attrs.Event = "";
  attrs.Date = "";
  attrs.Site = "";
  attrs.TimeControl = "";
  attrs.FEN = "";
  attrs.WhiteElo = "";
  attrs.White = "";
  attrs.BlackElo = "";
  attrs.Black = "";
  attrs.Result = "";
  for (i = j = 0, ref = arr.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    line = arr[i].trim();
    if (line === '') {
      break;
    }
    p = line.indexOf(' ');
    name = line.substring(1, p);
    value = line.substring(p + 2, line.length - 2);
    attrs[name] = value;
  }
  return `${attrs.Event} ${attrs.Date}<br>Site: ${attrs.Site}<br> FEN: ${attrs.FEN}<br> White: ${attrs.WhiteElo} ${attrs.White}<br>Black: ${attrs.BlackElo} ${attrs.Black}<br>${attrs.Result}`;
};

parsePGN = function(pgn) {
  var a, arr, b, header;
  header = getHeader(pgn);
  echo(header);
  pgn = removeParenthesis(pgn);
  pgn = removeEval(pgn);
  pgn = pgn.replaceAll('{  }', '');
  pgn = pgn.replaceAll('??', '');
  pgn = pgn.replaceAll('?!', '');
  pgn = pgn.replaceAll('?', '');
  pgn = pgn.replaceAll('0-1', '');
  pgn = pgn.replaceAll('1/2-1/2', '');
  pgn = pgn.replaceAll('1-0', '');
  pgn = pgn.replaceAll('*', '');
  arr = splitMoves(pgn);
  echo('arr', arr);
  a = tabell(arr, 0, 80);
  b = tabell(arr, 80, 160);
  return `<table class=\"outer-table\"><tr><td style=\"text-align:left\">${header}</td></tr><tr><td>${a}</td><td style=\"width:20px\"></td><td>${b}</td></tr></table>`;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\003-PrettyPGN\coffee\sketch.coffee