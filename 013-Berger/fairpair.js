// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var FairPair = class FairPair {
  constructor(players, R, GAMES) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.R = R;
    this.GAMES = GAMES;
    this.N = this.players.length;
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("â€¢");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.summa = 0;
    this.rounds = [];
    ref = range(this.R);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.push(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = a.elo - b.elo;
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  // sortTables : (tables) -> # Blossom verkar redan ge en bra bordsplacering
  // 	tables.sort (x,y) -> y[2] - x[2]
  // 	table.slice 0,2 for table in tables
  updatePlayers(magic, r) {
    var a, b, i, id, j, k, len, tables;
    tables = [];
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      this.matrix[i][j] = (r + 1).toString();
      if (i > j) {
        continue;
      }
      this.summa += Math.abs(this.players[i].elo - this.players[j].elo);
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      if (a.balans() > b.balans()) {
        a.col += 'b';
        b.col += 'w';
        tables.push([
          j,
          i //, a.elo + b.elo]
        ]);
      } else {
        a.col += 'w';
        b.col += 'b';
        tables.push([
          i,
          j //, a.elo + b.elo]
        ]);
      }
    }
    
    //@sortTables tables
    //echo 'updatePlayers',tables
    return tables;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    if (this.GAMES % 2 === 0) {
      return true;
    }
    return Math.abs(a.balans() + b.balans()) < 2;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpcnBhaXIuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZhaXJwYWlyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLEdBQUEsT0FBQSxDQUFBO0FBQ2YsUUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBO0lBRGdCLElBQUMsQ0FBQTtJQUFTLElBQUMsQ0FBQTtJQUFHLElBQUMsQ0FBQTtJQUM3QixJQUFDLENBQUEsQ0FBRCxHQUFLLElBQUMsQ0FBQSxPQUFPLENBQUM7SUFDZCxJQUFDLENBQUEsTUFBRDs7QUFBVztBQUFBO01BQUEsS0FBQSxxQ0FBQTs7OztBQUFDO0FBQUE7VUFBQSxLQUFBLHdDQUFBOzswQkFBQTtVQUFBLENBQUE7OztNQUFELENBQUE7OztJQUNYLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFDVCxJQUFDLENBQUEsTUFBRCxHQUFVO0FBRVY7SUFBQSxLQUFBLHFDQUFBOztNQUNDLEtBQUEsR0FBUSxJQUFDLENBQUEsU0FBRCxDQUFBO01BQ1IsT0FBQSxHQUFVLElBQUksT0FBSixDQUFZLEtBQVo7TUFDVixLQUFBLEdBQVEsT0FBTyxDQUFDLGlCQUFSLENBQTBCLEtBQTFCO01BQ1IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLGFBQUQsQ0FBZSxLQUFmLEVBQXFCLENBQXJCLENBQWI7SUFKRDtFQU5hOztFQVlkLFNBQVksQ0FBQSxDQUFBO0FBQ2IsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBO0lBQUUsS0FBQSxHQUFRO0FBQ1I7SUFBQSxLQUFBLHFDQUFBOztNQUNDLENBQUEsR0FBSSxJQUFDLENBQUEsT0FBTyxDQUFDLENBQUQ7QUFDWjtNQUFBLEtBQUEsd0NBQUE7O1FBQ0MsSUFBRyxDQUFBLEtBQUcsQ0FBTjtVQUFhLElBQUMsQ0FBQSxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFWLEdBQWdCLElBQTdCOztRQUNBLENBQUEsR0FBSSxJQUFDLENBQUEsT0FBTyxDQUFDLENBQUQ7UUFDWixJQUFBLEdBQU8sQ0FBQyxDQUFDLEdBQUYsR0FBUSxDQUFDLENBQUM7UUFDakIsSUFBRyxJQUFDLENBQUEsRUFBRCxDQUFJLENBQUosRUFBTSxDQUFOLENBQUg7VUFBZ0IsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sS0FBQSxHQUFRLElBQUEsSUFBUSxJQUF2QixDQUFYLEVBQWhCOztNQUpEO0lBRkQ7V0FPQTtFQVRXLENBWmI7Ozs7O0VBMkJDLGFBQWdCLENBQUMsS0FBRCxFQUFPLENBQVAsQ0FBQTtBQUNqQixRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFFLE1BQUEsR0FBUztJQUNULEtBQUEsdUNBQUE7O01BQ0MsQ0FBQSxHQUFJO01BQ0osQ0FBQSxHQUFJLEtBQUssQ0FBQyxFQUFEO01BQ1QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQVYsR0FBZ0IsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFPLENBQUMsUUFBUixDQUFBO01BQ2hCLElBQUcsQ0FBQSxHQUFJLENBQVA7QUFBYyxpQkFBZDs7TUFDQSxJQUFDLENBQUEsS0FBRCxJQUFVLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxHQUFaLEdBQWtCLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsR0FBdkM7TUFDVixDQUFBLEdBQUksSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUFEO01BQ1osQ0FBQSxHQUFJLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRDtNQUNaLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBTixDQUFXLENBQVg7TUFDQSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQU4sQ0FBVyxDQUFYO01BQ0EsSUFBRyxDQUFDLENBQUMsTUFBRixDQUFBLENBQUEsR0FBYSxDQUFDLENBQUMsTUFBRixDQUFBLENBQWhCO1FBQ0MsQ0FBQyxDQUFDLEdBQUYsSUFBUztRQUNULENBQUMsQ0FBQyxHQUFGLElBQVM7UUFDVCxNQUFNLENBQUMsSUFBUCxDQUFZO1VBQUMsQ0FBRDtVQUFJLENBQUo7U0FBWixFQUhEO09BQUEsTUFBQTtRQUtDLENBQUMsQ0FBQyxHQUFGLElBQVM7UUFDVCxDQUFDLENBQUMsR0FBRixJQUFTO1FBQ1QsTUFBTSxDQUFDLElBQVAsQ0FBWTtVQUFDLENBQUQ7VUFBSSxDQUFKO1NBQVosRUFQRDs7SUFWRCxDQURGOzs7O1dBc0JFO0VBdkJlOztFQXlCaEIsRUFBSyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7QUFDTixRQUFBO0lBQUUsSUFBRyxDQUFDLENBQUMsRUFBRixLQUFRLENBQUMsQ0FBQyxFQUFiO0FBQXFCLGFBQU8sTUFBNUI7O0lBQ0EsVUFBRyxDQUFDLENBQUMsaUJBQU0sQ0FBQyxDQUFDLEtBQVYsU0FBSDtBQUFzQixhQUFPLE1BQTdCOztJQUNBLElBQUcsSUFBQyxDQUFBLEtBQUQsR0FBUyxDQUFULEtBQWMsQ0FBakI7QUFBd0IsYUFBTyxLQUEvQjs7V0FDQSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxNQUFGLENBQUEsQ0FBQSxHQUFhLENBQUMsQ0FBQyxNQUFGLENBQUEsQ0FBdEIsQ0FBQSxHQUFvQztFQUpoQzs7QUFyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZG1vbmRzIH0gZnJvbSAnLi9ibG9zc29tLmpzJyAgXHJcblxyXG5yYW5nZSA9IF8ucmFuZ2VcclxuZWNobyA9IGNvbnNvbGUubG9nXHJcblxyXG5leHBvcnQgY2xhc3MgRmFpclBhaXIgXHJcblx0Y29uc3RydWN0b3IgOiAoQHBsYXllcnMsIEBSLCBAR0FNRVMpIC0+XHJcblx0XHRATiA9IEBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0QG1hdHJpeCA9ICgoXCLigKJcIiBmb3IgaSBpbiByYW5nZSBATikgZm9yIGogaW4gcmFuZ2UgQE4pXHJcblx0XHRAc3VtbWEgPSAwXHJcblx0XHRAcm91bmRzID0gW11cclxuXHJcblx0XHRmb3IgciBpbiByYW5nZSBAUlxyXG5cdFx0XHRlZGdlcyA9IEBtYWtlRWRnZXMoKVxyXG5cdFx0XHRlZG1vbmRzID0gbmV3IEVkbW9uZHMgZWRnZXNcclxuXHRcdFx0bWFnaWMgPSBlZG1vbmRzLm1heFdlaWdodE1hdGNoaW5nIGVkZ2VzXHJcblx0XHRcdEByb3VuZHMucHVzaCBAdXBkYXRlUGxheWVycyBtYWdpYyxyXHJcblxyXG5cdG1ha2VFZGdlcyA6IC0+XHJcblx0XHRlZGdlcyA9IFtdIFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQE5cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aWYgaT09aiB0aGVuIEBtYXRyaXhbaV1bal0gPSAnICdcclxuXHRcdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0XHRkaWZmID0gYS5lbG8gLSBiLmVsb1xyXG5cdFx0XHRcdGlmIEBvayBhLGIgdGhlbiBlZGdlcy5wdXNoIFtpLCBqLCAxMDAwMCAtIGRpZmYgKiogMS4wMV1cclxuXHRcdGVkZ2VzXHJcblxyXG5cdCMgc29ydFRhYmxlcyA6ICh0YWJsZXMpIC0+ICMgQmxvc3NvbSB2ZXJrYXIgcmVkYW4gZ2UgZW4gYnJhIGJvcmRzcGxhY2VyaW5nXHJcblx0IyBcdHRhYmxlcy5zb3J0ICh4LHkpIC0+IHlbMl0gLSB4WzJdXHJcblx0IyBcdHRhYmxlLnNsaWNlIDAsMiBmb3IgdGFibGUgaW4gdGFibGVzXHJcblxyXG5cdHVwZGF0ZVBsYXllcnMgOiAobWFnaWMscikgLT5cclxuXHRcdHRhYmxlcyA9IFtdXHJcblx0XHRmb3IgaWQgaW4gbWFnaWNcclxuXHRcdFx0aSA9IGlkXHJcblx0XHRcdGogPSBtYWdpY1tpZF1cclxuXHRcdFx0QG1hdHJpeFtpXVtqXSA9IChyICsgMSkudG9TdHJpbmcoKVxyXG5cdFx0XHRpZiBpID4gaiB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdEBzdW1tYSArPSBNYXRoLmFicyBAcGxheWVyc1tpXS5lbG8gLSBAcGxheWVyc1tqXS5lbG9cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGIgPSBAcGxheWVyc1tqXVxyXG5cdFx0XHRhLm9wcC5wdXNoIGpcclxuXHRcdFx0Yi5vcHAucHVzaCBpXHJcblx0XHRcdGlmIGEuYmFsYW5zKCkgPiBiLmJhbGFucygpXHJcblx0XHRcdFx0YS5jb2wgKz0gJ2InXHJcblx0XHRcdFx0Yi5jb2wgKz0gJ3cnXHJcblx0XHRcdFx0dGFibGVzLnB1c2ggW2osIGldICMsIGEuZWxvICsgYi5lbG9dXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRhLmNvbCArPSAndydcclxuXHRcdFx0XHRiLmNvbCArPSAnYidcclxuXHRcdFx0XHR0YWJsZXMucHVzaCBbaSwgal0gIywgYS5lbG8gKyBiLmVsb11cclxuXHJcblx0XHQjQHNvcnRUYWJsZXMgdGFibGVzXHJcblx0XHQjZWNobyAndXBkYXRlUGxheWVycycsdGFibGVzXHJcblx0XHR0YWJsZXNcclxuXHJcblx0b2sgOiAoYSxiKSAtPiBcclxuXHRcdGlmIGEuaWQgPT0gYi5pZCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0aWYgYS5pZCBpbiBiLm9wcCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0aWYgQEdBTUVTICUgMiA9PSAwIHRoZW4gcmV0dXJuIHRydWVcclxuXHRcdE1hdGguYWJzKGEuYmFsYW5zKCkgKyBiLmJhbGFucygpKSA8IDJcclxuIl19
//# sourceURL=c:\github\2025\013-Berger\fairpair.coffee