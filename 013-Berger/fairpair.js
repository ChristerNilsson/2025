// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var FairPair = class FairPair {
  constructor(players, R) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.R = R;
    echo('constructor', this.R);
    this.N = this.players.length;
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("â€¢");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.summa = 0;
    this.rounds = [];
    ref = range(this.R);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.push(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - Math.abs(a.elo - b.elo)]);
        }
      }
    }
    return edges;
  }

  // sortTables : (tables) -> # Blossom verkar redan ge en bra bordsplacering
  // 	tables.sort (x,y) -> y[2] - x[2]
  // 	table.slice 0,2 for table in tables
  updatePlayers(magic, r) {
    var a, b, i, id, j, k, len, tables;
    tables = [];
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      this.matrix[i][j] = (r + 1).toString();
      if (i > j) {
        continue;
      }
      this.summa += Math.abs(this.players[i].elo - this.players[j].elo);
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      if (a.balans() > b.balans()) {
        a.col += 'b';
        b.col += 'w';
        tables.push([
          j,
          i //, a.elo + b.elo]
        ]);
      } else {
        a.col += 'w';
        b.col += 'b';
        tables.push([
          i,
          j //, a.elo + b.elo]
        ]);
      }
    }
    
    //@sortTables tables
    echo('updatePlayers', tables);
    return tables;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    return Math.abs(a.balans() + b.balans()) < 2;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpcnBhaXIuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZhaXJwYWlyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLEdBQUEsQ0FBQTtBQUNmLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtJQURnQixJQUFDLENBQUE7SUFBUyxJQUFDLENBQUE7SUFDekIsSUFBQSxDQUFLLGFBQUwsRUFBbUIsSUFBQyxDQUFBLENBQXBCO0lBQ0EsSUFBQyxDQUFBLENBQUQsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDO0lBQ2QsSUFBQyxDQUFBLE1BQUQ7O0FBQVc7QUFBQTtNQUFBLEtBQUEscUNBQUE7Ozs7QUFBQztBQUFBO1VBQUEsS0FBQSx3Q0FBQTs7MEJBQUE7VUFBQSxDQUFBOzs7TUFBRCxDQUFBOzs7SUFDWCxJQUFDLENBQUEsS0FBRCxHQUFTO0lBQ1QsSUFBQyxDQUFBLE1BQUQsR0FBVTtBQUVWO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxLQUFBLEdBQVEsSUFBQyxDQUFBLFNBQUQsQ0FBQTtNQUNSLE9BQUEsR0FBVSxJQUFJLE9BQUosQ0FBWSxLQUFaO01BQ1YsS0FBQSxHQUFRLE9BQU8sQ0FBQyxpQkFBUixDQUEwQixLQUExQjtNQUNSLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxhQUFELENBQWUsS0FBZixFQUFxQixDQUFyQixDQUFiO0lBSkQ7RUFQYTs7RUFhZCxTQUFZLENBQUEsQ0FBQTtBQUNiLFFBQUEsQ0FBQSxF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cG9ydCB7IEVkbW9uZHMgfSBmcm9tICcuL2Jsb3Nzb20uanMnICBcclxuXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5lY2hvID0gY29uc29sZS5sb2dcclxuXHJcbmV4cG9ydCBjbGFzcyBGYWlyUGFpciBcclxuXHRjb25zdHJ1Y3RvciA6IChAcGxheWVycywgQFIpIC0+XHJcblx0XHRlY2hvICdjb25zdHJ1Y3RvcicsQFJcclxuXHRcdEBOID0gQHBsYXllcnMubGVuZ3RoXHJcblx0XHRAbWF0cml4ID0gKChcIuKAolwiIGZvciBpIGluIHJhbmdlIEBOKSBmb3IgaiBpbiByYW5nZSBATilcclxuXHRcdEBzdW1tYSA9IDBcclxuXHRcdEByb3VuZHMgPSBbXVxyXG5cclxuXHRcdGZvciByIGluIHJhbmdlIEBSXHJcblx0XHRcdGVkZ2VzID0gQG1ha2VFZGdlcygpXHJcblx0XHRcdGVkbW9uZHMgPSBuZXcgRWRtb25kcyBlZGdlc1xyXG5cdFx0XHRtYWdpYyA9IGVkbW9uZHMubWF4V2VpZ2h0TWF0Y2hpbmcgZWRnZXNcclxuXHRcdFx0QHJvdW5kcy5wdXNoIEB1cGRhdGVQbGF5ZXJzIG1hZ2ljLHJcclxuXHJcblx0bWFrZUVkZ2VzIDogLT5cclxuXHRcdGVkZ2VzID0gW10gXHJcblx0XHRmb3IgaSBpbiByYW5nZSBATlxyXG5cdFx0XHRhID0gQHBsYXllcnNbaV1cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgQE5cclxuXHRcdFx0XHRpZiBpPT1qIHRoZW4gQG1hdHJpeFtpXVtqXSA9ICcgJ1xyXG5cdFx0XHRcdGIgPSBAcGxheWVyc1tqXVxyXG5cdFx0XHRcdGlmIEBvayBhLGIgdGhlbiBlZGdlcy5wdXNoIFtpLCBqLCAxMDAwMCAtIE1hdGguYWJzIGEuZWxvIC0gYi5lbG9dXHJcblx0XHRlZGdlc1xyXG5cclxuXHQjIHNvcnRUYWJsZXMgOiAodGFibGVzKSAtPiAjIEJsb3Nzb20gdmVya2FyIHJlZGFuIGdlIGVuIGJyYSBib3Jkc3BsYWNlcmluZ1xyXG5cdCMgXHR0YWJsZXMuc29ydCAoeCx5KSAtPiB5WzJdIC0geFsyXVxyXG5cdCMgXHR0YWJsZS5zbGljZSAwLDIgZm9yIHRhYmxlIGluIHRhYmxlc1xyXG5cclxuXHR1cGRhdGVQbGF5ZXJzIDogKG1hZ2ljLHIpIC0+XHJcblx0XHR0YWJsZXMgPSBbXVxyXG5cdFx0Zm9yIGlkIGluIG1hZ2ljXHJcblx0XHRcdGkgPSBpZFxyXG5cdFx0XHRqID0gbWFnaWNbaWRdXHJcblx0XHRcdEBtYXRyaXhbaV1bal0gPSAociArIDEpLnRvU3RyaW5nKClcclxuXHRcdFx0aWYgaSA+IGogdGhlbiBjb250aW51ZVxyXG5cdFx0XHRAc3VtbWEgKz0gTWF0aC5hYnMgQHBsYXllcnNbaV0uZWxvIC0gQHBsYXllcnNbal0uZWxvXHJcblx0XHRcdGEgPSBAcGxheWVyc1tpXVxyXG5cdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0YS5vcHAucHVzaCBqXHJcblx0XHRcdGIub3BwLnB1c2ggaVxyXG5cdFx0XHRpZiBhLmJhbGFucygpID4gYi5iYWxhbnMoKVxyXG5cdFx0XHRcdGEuY29sICs9ICdiJ1xyXG5cdFx0XHRcdGIuY29sICs9ICd3J1xyXG5cdFx0XHRcdHRhYmxlcy5wdXNoIFtqLCBpXSAjLCBhLmVsbyArIGIuZWxvXVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YS5jb2wgKz0gJ3cnXHJcblx0XHRcdFx0Yi5jb2wgKz0gJ2InXHJcblx0XHRcdFx0dGFibGVzLnB1c2ggW2ksIGpdICMsIGEuZWxvICsgYi5lbG9dXHJcblxyXG5cdFx0I0Bzb3J0VGFibGVzIHRhYmxlc1xyXG5cdFx0ZWNobyAndXBkYXRlUGxheWVycycsdGFibGVzXHJcblx0XHR0YWJsZXNcclxuXHJcblx0b2sgOiAoYSxiKSAtPiBcclxuXHRcdGlmIGEuaWQgPT0gYi5pZCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0aWYgYS5pZCBpbiBiLm9wcCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0TWF0aC5hYnMoYS5iYWxhbnMoKSArIGIuYmFsYW5zKCkpIDwgMlxyXG4iXX0=
//# sourceURL=c:\github\2025\013-Berger\fairpair.coffee