// Generated by CoffeeScript 2.7.0
var DOMAIN, MAX, RESULTS, echo, expected_score, extrapolate, main, makeBerger, parseQuery, performance, performance_rating, prettify, safeGet, savePairing, showBerger, showHelp, showTables, summa,
  indexOf = [].indexOf;

echo = console.log;

//DOMAIN = "http://127.0.0.1:5500"
DOMAIN = "https://christernilsson.github.io/2025/013-Berger";

MAX = 2;

RESULTS = '012';

summa = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

expected_score = function(ratings, own_rating) {
  var rating;
  return summa((function() {
    var k, len, results1;
    results1 = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results1.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results1;
  })());
};

performance_rating = function(pp, ratings) {
  var hi, lo, rating;
  lo = 0;
  hi = 4000;
  while (Math.abs(hi - lo) > 0.001) {
    rating = (lo + hi) / 2;
    if (pp > expected_score(ratings, rating)) {
      lo = rating;
    } else {
      hi = rating;
    }
  }
  return rating;
};


// Use two extreme values when calculating 0% or 100%
extrapolate = function(a0, b0, elos) {
  var a, b;
  a = performance_rating(a0, elos);
  b = performance_rating(b0, elos);
  return b + b - a;
};

performance = function(pp, elos) {
  var n;
  n = elos.length;
  if (n === 1) {
    if (pp === 0) {
      return extrapolate(0.50, 0.25, elos);
    }
    if (pp === n) {
      return extrapolate(0.50, 0.75, elos);
    }
  } else {
    if (pp === 0) {
      return extrapolate(1, 0.5, elos);
    }
    if (pp === n) {
      return extrapolate(n - 1, n - 0.5, elos);
    }
  }
  return performance_rating(pp, elos);
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var elo, i, k, l, name, p, params, players, ref, results, title;
  params = new URLSearchParams(window.location.search);
  title = safeGet(params, "title");
  MAX = parseInt(safeGet(params, "MAX", "2"));
  RESULTS = '012345678'.slice(0, MAX + 1);
  players = [];
  for (i = k = 1; k <= 20; i = ++k) {
    p = safeGet(params, `p${i}`, "");
    if (p === "") {
      break;
    }
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push({
      elo,
      name,
      index: i - 1
    });
  }
  echo(players);
  results = [];
  for (i = l = 1, ref = players.length - 1; (1 <= ref ? l <= ref : l >= ref); i = 1 <= ref ? ++l : --l) {
    results.push(safeGet(params, `r${i}`, "x" * players.length / 2));
  }
  return {players, results, title};
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function(n) {
  var A, half, i, k, ref, rounds;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

showHelp = function() {
  var help, link, url;
  url = [];
  url.push(`${DOMAIN}/?title=Joukos Sommar 2025`);
  url.push("&MAX=2");
  url.push("&p1=1698 Onni Aikio");
  url.push("&p2=1558 Helge Bergström");
  url.push("&p3=1549 Jonas Hök");
  url.push("&p4=1679 Lars Johansson");
  url.push("&p5=0000 Per Eriksson");
  url.push("&p6=1653 Christer Nilsson");
  url.push("&p7=1673 Per Hamnström");
  url.push("&p8=1504 Thomas Paulin");
  url.push("&p9=1706 Abbas Razavi");
  url.push("&p10=1579 Jouko Liistamo");
  url.push("&r1=202x2");
  url.push("&r2=01020");
  url.push("&r3=20022");
  url.push("&r4=20002");
  url.push("&r5=02222");
  url.push("&r7=xx2xx");
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<p>Exempel:</p><pre>${url.join("\n")}</pre>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = url.join('');
  link.text = "Exempel";
  return document.getElementById('berger').appendChild(link);
};

showBerger = function(title, players, rounds, results, points) {
  var a, b, cell, h2, header, html, i, k, l, len, m, oppElos, opponent, p, r, ref, ref1, ref2, result, row, tableIndex, tbl, w;
  h2 = document.createElement('h2');
  h2.textContent = title;
  document.getElementById('berger').appendChild(h2);
  tbl = document.createElement('table');
  header = tbl.insertRow();
  header.innerHTML = '<th>#</th><th>Namn</th><th>Elo</th>';
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    cell = document.createElement('th');
    cell.textContent = `${i + 1}`;
    (function(i) {
      return cell.addEventListener('click', function() {
        echo(`Du klickade på rond ${i + 1}`);
        return showTables(rounds[i] || [], players, i, results);
      });
    })(i);
    header.appendChild(cell);
  }
  cell = document.createElement('th');
  cell.textContent = "Poäng";
  header.appendChild(cell);
  cell = document.createElement('th');
  cell.textContent = "PR";
  header.appendChild(cell);
  for (i = l = 0, len = players.length; l < len; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    oppElos = [];
    row.insertCell().textContent = p.elo;
    for (r = m = 0, ref1 = rounds.length; (0 <= ref1 ? m < ref1 : m > ref1); r = 0 <= ref1 ? ++m : --m) {
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      result = ((ref2 = results[r]) != null ? ref2[tableIndex] : void 0) || "";
      result = result.replace("x", "");
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      if (indexOf.call(RESULTS, result) >= 0 && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
      }
      if (i === b && result !== "") {
        result = MAX - parseInt(result);
      }
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px; ${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;        font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    cell = row.insertCell();
    cell.textContent = points[i];
    cell.style.textAlign = 'right';
    row.insertCell().textContent = performance(points[i] / MAX, oppElos).toFixed(0);
  }
  return document.getElementById('berger').appendChild(tbl);
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${MAX - ch}`;
  }
  return "-";
};

showTables = function(rounds, players, selectedRound, results) {
  var b, header, i, k, ref, ref1, ref2, svart, table, td, title, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  header = table.insertRow();
  header.innerHTML = `<th>Bord</th><th>Vit</th><th>Svart</th><th>${RESULTS}</th>`;
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = prettify(results[selectedRound][i]);
    td.style.align = 'center';
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, players, points, ref, ref1, res, results, round, rounds, title, w;
  ({players, results, title} = parseQuery());
  document.title = title;
  if (players.length < 4) {
    showHelp();
    return;
  }
  rounds = makeBerger(players.length);
  echo(rounds);
  points = Array(players.length).fill(0);
  for (i = k = 0, ref = results.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += MAX - parseInt(res[j]);
      }
    }
  }
  showBerger(title, players, rounds, results, points);
  return showTables(rounds[0] || [], players, 0, results);
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVyZ2VyLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJiZXJnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsV0FBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFdBQUEsRUFBQSxrQkFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUE7RUFBQTs7QUFBQSxJQUFBLEdBQU8sT0FBTyxDQUFDLElBQWY7OztBQUdBLE1BQUEsR0FBUzs7QUFFVCxHQUFBLEdBQU07O0FBQ04sT0FBQSxHQUFVOztBQUVWLEtBQUEsR0FBUSxRQUFBLENBQUMsR0FBRCxDQUFBO0FBQ1IsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTTtFQUNOLEtBQUEscUNBQUE7O0lBQ0MsR0FBQSxJQUFPO0VBRFI7U0FFQTtBQUpPOztBQU1SLGNBQUEsR0FBaUIsUUFBQSxDQUFDLE9BQUQsRUFBVSxVQUFWLENBQUE7QUFBd0IsTUFBQTtTQUFDLEtBQUE7O0FBQU87SUFBQSxLQUFBLHlDQUFBOztvQkFBQSxDQUFBLEdBQUksQ0FBQyxDQUFBLEdBQUksRUFBQSxJQUFJLENBQUMsQ0FBQyxNQUFBLEdBQVMsVUFBVixDQUFBLEdBQXdCLEdBQXpCLENBQVQ7SUFBSixDQUFBOztNQUFQO0FBQXpCOztBQUVqQixrQkFBQSxHQUFxQixRQUFBLENBQUMsRUFBRCxFQUFLLE9BQUwsQ0FBQTtBQUNyQixNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxFQUFBLEdBQUs7RUFDTCxFQUFBLEdBQUs7QUFDTCxTQUFNLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBQSxHQUFLLEVBQWQsQ0FBQSxHQUFvQixLQUExQjtJQUNDLE1BQUEsR0FBUyxDQUFDLEVBQUEsR0FBSyxFQUFOLENBQUEsR0FBWTtJQUNyQixJQUFHLEVBQUEsR0FBSyxjQUFBLENBQWUsT0FBZixFQUF3QixNQUF4QixDQUFSO01BQ0MsRUFBQSxHQUFLLE9BRE47S0FBQSxNQUFBO01BR0MsRUFBQSxHQUFLLE9BSE47O0VBRkQ7U0FNQTtBQVRvQixFQWhCckI7Ozs7QUE0QkEsV0FBQSxHQUFjLFFBQUEsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLElBQVQsQ0FBQTtBQUNkLE1BQUEsQ0FBQSxFQUFBO0VBQUMsQ0FBQSxHQUFJLGtCQUFBLENBQW1CLEVBQW5CLEVBQXNCLElBQXRCO0VBQ0osQ0FBQSxHQUFJLGtCQUFBLENBQW1CLEVBQW5CLEVBQXNCLElBQXRCO1NBQ0osQ0FBQSxHQUFJLENBQUosR0FBUTtBQUhLOztBQUtkLFdBQUEsR0FBYyxRQUFBLENBQUMsRUFBRCxFQUFJLElBQUosQ0FBQTtBQUNkLE1BQUE7RUFBQyxDQUFBLEdBQUksSUFBSSxDQUFDO0VBQ1QsSUFBRyxDQUFBLEtBQUssQ0FBUjtJQUNDLElBQUcsRUFBQSxLQUFNLENBQVQ7QUFBZ0IsYUFBTyxXQUFBLENBQVksSUFBWixFQUFpQixJQUFqQixFQUFzQixJQUF0QixFQUF2Qjs7SUFDQSxJQUFHLEVBQUEsS0FBTSxDQUFUO0FBQWdCLGFBQU8sV0FBQSxDQUFZLElBQVosRUFBaUIsSUFBakIsRUFBc0IsSUFBdEIsRUFBdkI7S0FGRDtHQUFBLE1BQUE7SUFJQyxJQUFHLEVBQUEsS0FBTSxDQUFUO0FBQWdCLGFBQU8sV0FBQSxDQUFjLENBQWQsRUFBa0IsR0FBbEIsRUFBc0IsSUFBdEIsRUFBdkI7O0lBQ0EsSUFBRyxFQUFBLEtBQU0sQ0FBVDtBQUFnQixhQUFPLFdBQUEsQ0FBWSxDQUFBLEdBQUUsQ0FBZCxFQUFnQixDQUFBLEdBQUUsR0FBbEIsRUFBc0IsSUFBdEIsRUFBdkI7S0FMRDs7U0FNQSxrQkFBQSxDQUFtQixFQUFuQixFQUFzQixJQUF0QjtBQVJhOztBQVVkLE9BQUEsR0FBVSxRQUFBLENBQUMsTUFBRCxFQUFRLEdBQVIsRUFBWSxXQUFTLEVBQXJCLENBQUE7RUFDVCxJQUFHLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBWCxDQUFIO0FBQXVCLFdBQU8sTUFBTSxDQUFDLEdBQVAsQ0FBVyxHQUFYLEVBQTlCOztFQUNBLElBQUcsTUFBTSxDQUFDLEdBQVAsQ0FBVyxHQUFBLEdBQU0sR0FBakIsQ0FBSDtBQUE2QixXQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBQSxHQUFNLEdBQWpCLEVBQXBDOztTQUNBO0FBSFM7O0FBS1YsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBO0FBQ2IsTUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVMsSUFBSSxlQUFKLENBQW9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBcEM7RUFFVCxLQUFBLEdBQVEsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsT0FBaEI7RUFDUixHQUFBLEdBQU0sUUFBQSxDQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLEtBQWhCLEVBQXVCLEdBQXZCLENBQVQ7RUFDTixPQUFBLEdBQVUsV0FBVyxDQUFDLEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsR0FBQSxHQUFNLENBQTNCO0VBRVYsT0FBQSxHQUFVO0VBQ1YsS0FBUywyQkFBVDtJQUNDLENBQUEsR0FBSSxPQUFBLENBQVEsTUFBUixFQUFnQixDQUFBLENBQUEsQ0FBQSxDQUFJLENBQUosQ0FBQSxDQUFoQixFQUF5QixFQUF6QjtJQUNKLElBQUcsQ0FBQSxLQUFLLEVBQVI7QUFBZ0IsWUFBaEI7O0lBQ0EsR0FBQSxHQUFNLFFBQUEsQ0FBUyxDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFBVSxDQUFWLENBQVQ7SUFDTixJQUFBLEdBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLENBQVUsQ0FBQyxJQUFYLENBQUE7SUFDUCxPQUFPLENBQUMsSUFBUixDQUFhO01BQUMsR0FBRDtNQUFNLElBQU47TUFBWSxLQUFBLEVBQU8sQ0FBQSxHQUFJO0lBQXZCLENBQWI7RUFMRDtFQU1BLElBQUEsQ0FBSyxPQUFMO0VBRUEsT0FBQSxHQUFVO0VBQ1YsS0FBUywrRkFBVDtJQUNDLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsQ0FBQSxDQUFBLENBQUEsQ0FBSSxDQUFKLENBQUEsQ0FBaEIsRUFBeUIsR0FBQSxHQUFNLE9BQU8sQ0FBQyxNQUFkLEdBQXVCLENBQWhELENBQWI7RUFERDtTQUdBLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsS0FBbkI7QUFwQlk7O0FBc0JiLFdBQUEsR0FBYyxRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxJQUFQLEVBQWEsQ0FBYixDQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEdBQUEsR0FBUyxDQUFBLEdBQUksQ0FBSixLQUFTLENBQVosR0FBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFGLEVBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixDQUFELENBQW5CLEdBQTJDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFMLENBQVIsQ0FBRDtFQUNqRCxLQUFTLCtFQUFUO0lBQ0MsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBTyxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQVIsQ0FBVDtFQUREO1NBRUE7QUFKYTs7QUFNZCxVQUFBLEdBQWEsUUFBQSxDQUFDLENBQUQsQ0FBQTtBQUNiLE1BQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLElBQUcsQ0FBQSxHQUFJLENBQUosS0FBUyxDQUFaO0lBQW1CLENBQUEsSUFBSyxFQUF4Qjs7RUFDQSxJQUFBLGNBQU8sSUFBSztFQUNaLENBQUEsR0FBSTs7Ozs7RUFDSixNQUFBLEdBQVM7RUFDVCxLQUFTLGdGQUFUO0lBQ0MsTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFBLENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsSUFBbEIsRUFBd0IsQ0FBeEIsQ0FBWjtJQUNBLENBQUMsQ0FBQyxHQUFGLENBQUE7SUFDQSxDQUFBLEdBQUksQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFSLENBQWEsQ0FBQyxNQUFkLENBQXFCLENBQUMsQ0FBQyxLQUFGLENBQVEsQ0FBUixFQUFVLElBQVYsQ0FBckI7SUFDSixDQUFDLENBQUMsSUFBRixDQUFPLENBQUEsR0FBRSxDQUFUO0VBSkQ7U0FLQTtBQVZZOztBQVliLFFBQUEsR0FBVyxRQUFBLENBQUEsQ0FBQTtBQUNYLE1BQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTTtFQUNOLEdBQUcsQ0FBQyxJQUFKLENBQVMsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFBLDBCQUFBLENBQVQ7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLFFBQVQ7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLHFCQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUywwQkFBVDtFQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsb0JBQVQ7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLHlCQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyx1QkFBVDtFQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsMkJBQVQ7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLHdCQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyx3QkFBVDtFQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsdUJBQVQ7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLDBCQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFUO0VBRUEsSUFBQSxHQUFPLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCO0VBQ1AsSUFBSSxDQUFDLFNBQUwsR0FBaUI7RUFDakIsSUFBSSxDQUFDLFNBQUwsR0FBaUIsQ0FBQSxvQkFBQSxDQUFBLENBQXVCLEdBQUcsQ0FBQyxJQUFKLENBQVMsSUFBVCxDQUF2QixDQUFBLE1BQUE7RUFDakIsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxXQUFsQyxDQUE4QyxJQUE5QztFQUVBLElBQUEsR0FBTyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QjtFQUNQLElBQUksQ0FBQyxJQUFMLEdBQVksR0FBRyxDQUFDLElBQUosQ0FBUyxFQUFUO0VBQ1osSUFBSSxDQUFDLElBQUwsR0FBWTtTQUNaLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWlDLENBQUMsV0FBbEMsQ0FBOEMsSUFBOUM7QUE3QlU7O0FBK0JYLFVBQUEsR0FBYSxRQUFBLENBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsTUFBakIsRUFBeUIsT0FBekIsRUFBa0MsTUFBbEMsQ0FBQTtBQUNiLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUMsRUFBQSxHQUFNLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCO0VBQ04sRUFBRSxDQUFDLFdBQUgsR0FBaUI7RUFDakIsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxXQUFsQyxDQUE4QyxFQUE5QztFQUVBLEdBQUEsR0FBTSxRQUFRLENBQUMsYUFBVCxDQUF1QixPQUF2QjtFQUNOLE1BQUEsR0FBUyxHQUFHLENBQUMsU0FBSixDQUFBO0VBQ1QsTUFBTSxDQUFDLFNBQVAsR0FBbUI7RUFDbkIsS0FBUyx3RkFBVDtJQUNDLElBQUEsR0FBTyxRQUFRLENBQUMsYUFBVCxDQUF1QixJQUF2QjtJQUNQLElBQUksQ0FBQyxXQUFMLEdBQW1CLENBQUEsQ0FBQSxDQUFHLENBQUEsR0FBRSxDQUFMLENBQUE7SUFDaEIsQ0FBQSxRQUFBLENBQUMsQ0FBRCxDQUFBO2FBQ0YsSUFBSSxDQUFDLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFFBQUEsQ0FBQSxDQUFBO1FBQzlCLElBQUEsQ0FBSyxDQUFBLG9CQUFBLENBQUEsQ0FBdUIsQ0FBQSxHQUFFLENBQXpCLENBQUEsQ0FBTDtlQUNBLFVBQUEsQ0FBVyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWEsRUFBeEIsRUFBNEIsT0FBNUIsRUFBcUMsQ0FBckMsRUFBd0MsT0FBeEM7TUFGOEIsQ0FBL0I7SUFERSxDQUFBLEVBQUM7SUFLSixNQUFNLENBQUMsV0FBUCxDQUFtQixJQUFuQjtFQVJEO0VBU0EsSUFBQSxHQUFPLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCO0VBQ1AsSUFBSSxDQUFDLFdBQUwsR0FBbUI7RUFDbkIsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsSUFBbkI7RUFFQSxJQUFBLEdBQU8sUUFBUSxDQUFDLGFBQVQsQ0FBdUIsSUFBdkI7RUFDUCxJQUFJLENBQUMsV0FBTCxHQUFtQjtFQUNuQixNQUFNLENBQUMsV0FBUCxDQUFtQixJQUFuQjtFQUVBLEtBQUEsaURBQUE7O0lBQ0MsR0FBQSxHQUFNLEdBQUcsQ0FBQyxTQUFKLENBQUE7SUFDTixHQUFHLENBQUMsVUFBSixDQUFBLENBQWdCLENBQUMsV0FBakIsR0FBK0IsQ0FBQSxHQUFJO0lBRW5DLElBQUEsR0FBTyxHQUFHLENBQUMsVUFBSixDQUFBO0lBQ1AsSUFBSSxDQUFDLFdBQUwsR0FBbUIsQ0FBQyxDQUFDO0lBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBWCxHQUF1QjtJQUV2QixPQUFBLEdBQVU7SUFDVixHQUFHLENBQUMsVUFBSixDQUFBLENBQWdCLENBQUMsV0FBakIsR0FBK0IsQ0FBQyxDQUFDO0lBQ2pDLEtBQVMsNkZBQVQ7TUFDQyxJQUFBLEdBQU8sR0FBRyxDQUFDLFVBQUosQ0FBQTtNQUNQLFVBQUEsR0FBYSxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsU0FBVixDQUFvQixRQUFBLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBQUE7ZUFBWSxDQUFBLEtBQUssQ0FBTCxJQUFVLENBQUEsS0FBSztNQUEzQixDQUFwQjtNQUNiLElBQUcsVUFBQSxLQUFjLENBQUMsQ0FBbEI7QUFBeUIsaUJBQXpCOztNQUNBLE1BQUEsc0NBQW1CLENBQUUsVUFBRixXQUFWLElBQTJCO01BQ3BDLE1BQUEsR0FBUyxNQUFNLENBQUMsT0FBUCxDQUFlLEdBQWYsRUFBb0IsRUFBcEI7TUFFVCxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUEsR0FBUyxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsVUFBRDtNQUNsQixRQUFBLEdBQWMsQ0FBQSxLQUFLLENBQVIsR0FBZSxDQUFmLEdBQXNCO01BQ2pDLGlCQUFhLFNBQVYsWUFBQSxJQUFzQixPQUFPLENBQUMsUUFBRCxDQUFVLENBQUMsR0FBbEIsS0FBeUIsQ0FBbEQ7UUFBeUQsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFPLENBQUMsUUFBRCxDQUFVLENBQUMsR0FBL0IsRUFBekQ7O01BRUEsSUFBRyxDQUFBLEtBQUssQ0FBTCxJQUFXLE1BQUEsS0FBVSxFQUF4QjtRQUFnQyxNQUFBLEdBQVMsR0FBQSxHQUFNLFFBQUEsQ0FBUyxNQUFULEVBQS9DOztNQUVBLElBQUcsQ0FBQSxLQUFLLENBQVI7UUFBZSxDQUFBLEdBQUksYUFBbkI7T0FBQSxNQUFBO1FBQXFDLENBQUEsR0FBSSxZQUF6Qzs7TUFFQSxJQUFBLEdBQU87TUFDUCxJQUFBLElBQVEsQ0FBQSwwQ0FBQSxDQUFBLENBQTZDLENBQTdDLENBQUEsb0JBQUEsQ0FBQSxDQUFxRSxRQUFBLEdBQVcsQ0FBaEYsQ0FBQSxNQUFBO01BQ1IsSUFBQSxJQUFRLENBQUEsa0VBQUEsQ0FBQSxDQUFxRSxNQUFyRSxDQUFBLE1BQUE7TUFDUixJQUFJLENBQUMsU0FBTCxHQUFpQixrQ0FBQSxHQUFxQyxJQUFyQyxHQUE0QztJQWxCOUQ7SUFvQkEsSUFBQSxHQUFPLEdBQUcsQ0FBQyxVQUFKLENBQUE7SUFDUCxJQUFJLENBQUMsV0FBTCxHQUFtQixNQUFNLENBQUMsQ0FBRDtJQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVgsR0FBdUI7SUFFdkIsR0FBRyxDQUFDLFVBQUosQ0FBQSxDQUFnQixDQUFDLFdBQWpCLEdBQStCLFdBQUEsQ0FBWSxNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVUsR0FBdEIsRUFBMkIsT0FBM0IsQ0FBbUMsQ0FBQyxPQUFwQyxDQUE0QyxDQUE1QztFQWxDaEM7U0FtQ0EsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxXQUFsQyxDQUE4QyxHQUE5QztBQTVEWTs7QUE4RGIsUUFBQSxHQUFXLFFBQUEsQ0FBQyxFQUFELENBQUE7RUFDVixpQkFBUyxTQUFOLFFBQUg7QUFBc0IsV0FBTyxDQUFBLENBQUEsQ0FBRyxFQUFILENBQUEsR0FBQSxDQUFBLENBQVcsR0FBQSxHQUFNLEVBQWpCLENBQUEsRUFBN0I7O1NBQ0E7QUFGVTs7QUFJWCxVQUFBLEdBQWEsUUFBQSxDQUFDLE1BQUQsRUFBUyxPQUFULEVBQWtCLGFBQWxCLEVBQWlDLE9BQWpDLENBQUE7QUFDYixNQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLElBQUcsTUFBTSxDQUFDLE1BQVAsS0FBaUIsQ0FBcEI7QUFBMkIsV0FBM0I7O0VBRUEsS0FBQSxHQUFRLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCO0VBQ1IsS0FBSyxDQUFDLFdBQU4sR0FBb0IsQ0FBQSxvQkFBQSxDQUFBLENBQXVCLGFBQUEsR0FBYyxDQUFyQyxDQUFBO0VBQ3BCLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWlDLENBQUMsU0FBbEMsR0FBOEM7RUFDOUMsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxXQUFsQyxDQUE4QyxLQUE5QztFQUVBLEtBQUEsR0FBUSxRQUFRLENBQUMsYUFBVCxDQUF1QixPQUF2QjtFQUVSLE1BQUEsR0FBUyxLQUFLLENBQUMsU0FBTixDQUFBO0VBQ1QsTUFBTSxDQUFDLFNBQVAsR0FBbUIsQ0FBQSwyQ0FBQSxDQUFBLENBQThDLE9BQTlDLENBQUEsS0FBQTtFQUVuQixLQUFTLHdGQUFUO0lBQ0MsRUFBQSxHQUFLLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCO0lBQ0wsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFBLEdBQVMsTUFBTSxDQUFDLENBQUQ7SUFDZixHQUFBLHNDQUFnQixDQUFFLGNBQVosSUFBb0I7SUFDMUIsS0FBQSxzQ0FBa0IsQ0FBRSxjQUFaLElBQW9CO0lBRTVCLEVBQUEsR0FBSyxRQUFRLENBQUMsYUFBVCxDQUF1QixJQUF2QjtJQUNMLEVBQUUsQ0FBQyxXQUFILEdBQWlCLENBQUEsQ0FBQSxDQUFHLENBQUEsR0FBSSxDQUFQLENBQUE7SUFDakIsRUFBRSxDQUFDLFdBQUgsQ0FBZSxFQUFmO0lBRUEsRUFBQSxHQUFLLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCO0lBQ0wsRUFBRSxDQUFDLFdBQUgsR0FBaUI7SUFDakIsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFULEdBQXFCO0lBQ3JCLEVBQUUsQ0FBQyxXQUFILENBQWUsRUFBZjtJQUVBLEVBQUEsR0FBSyxRQUFRLENBQUMsYUFBVCxDQUF1QixJQUF2QjtJQUNMLEVBQUUsQ0FBQyxXQUFILEdBQWlCO0lBQ2pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBVCxHQUFxQjtJQUNyQixFQUFFLENBQUMsV0FBSCxDQUFlLEVBQWY7SUFFQSxFQUFBLEdBQUssUUFBUSxDQUFDLGFBQVQsQ0FBdUIsSUFBdkI7SUFDTCxFQUFFLENBQUMsV0FBSCxHQUFpQixRQUFBLENBQVMsT0FBTyxDQUFDLGFBQUQsQ0FBZSxDQUFDLENBQUQsQ0FBL0I7SUFDakIsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFULEdBQWlCO0lBQ2pCLEVBQUUsQ0FBQyxXQUFILENBQWUsRUFBZjtJQUVBLEtBQUssQ0FBQyxXQUFOLENBQWtCLEVBQWxCO0VBekJEO1NBMEJBLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWlDLENBQUMsV0FBbEMsQ0FBOEMsS0FBOUM7QUF2Q1k7O0FBeUNiLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBO0VBQUMsQ0FBQSxDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLEtBQW5CLENBQUEsR0FBNEIsVUFBQSxDQUFBLENBQTVCO0VBQ0EsUUFBUSxDQUFDLEtBQVQsR0FBaUI7RUFFakIsSUFBRyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFwQjtJQUNDLFFBQUEsQ0FBQTtBQUNBLFdBRkQ7O0VBR0EsTUFBQSxHQUFTLFVBQUEsQ0FBVyxPQUFPLENBQUMsTUFBbkI7RUFDVCxJQUFBLENBQUssTUFBTDtFQUNBLE1BQUEsR0FBUyxLQUFBLENBQU0sT0FBTyxDQUFDLE1BQWQsQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixDQUEzQjtFQUVULEtBQVMseUZBQVQ7SUFDQyxHQUFBLEdBQU0sT0FBTyxDQUFDLENBQUQ7SUFDYixLQUFBLEdBQVEsTUFBTSxDQUFDLENBQUQ7SUFDZCxLQUFBLFVBQUE7TUFBTyxDQUFDLENBQUQsRUFBSSxDQUFKO01BQ04sV0FBRyxHQUFHLENBQUMsQ0FBRCxnQkFBTyxTQUFWLFVBQUg7UUFDQyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWEsUUFBQSxDQUFTLEdBQUcsQ0FBQyxDQUFELENBQVo7UUFDYixNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWEsR0FBQSxHQUFNLFFBQUEsQ0FBUyxHQUFHLENBQUMsQ0FBRCxDQUFaLEVBRnBCOztJQUREO0VBSEQ7RUFRQSxVQUFBLENBQVcsS0FBWCxFQUFrQixPQUFsQixFQUEyQixNQUEzQixFQUFtQyxPQUFuQyxFQUE0QyxNQUE1QztTQUNBLFVBQUEsQ0FBVyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWEsRUFBeEIsRUFBNEIsT0FBNUIsRUFBcUMsQ0FBckMsRUFBd0MsT0FBeEM7QUFwQk07O0FBc0JQLElBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImVjaG8gPSBjb25zb2xlLmxvZ1xyXG5cclxuI0RPTUFJTiA9IFwiaHR0cDovLzEyNy4wLjAuMTo1NTAwXCJcclxuRE9NQUlOID0gXCJodHRwczovL2NocmlzdGVybmlsc3Nvbi5naXRodWIuaW8vMjAyNS8wMTMtQmVyZ2VyXCJcclxuXHJcbk1BWCA9IDJcclxuUkVTVUxUUyA9ICcwMTInXHJcblxyXG5zdW1tYSA9IChhcnIpIC0+XHJcblx0cmVzID0gMFxyXG5cdGZvciBpdGVtIGluIGFyclxyXG5cdFx0cmVzICs9IGl0ZW1cclxuXHRyZXNcclxuXHJcbmV4cGVjdGVkX3Njb3JlID0gKHJhdGluZ3MsIG93bl9yYXRpbmcpIC0+IHN1bW1hICgxIC8gKDEgKyAxMCoqKChyYXRpbmcgLSBvd25fcmF0aW5nKSAvIDQwMCkpIGZvciByYXRpbmcgaW4gcmF0aW5ncylcclxuXHJcbnBlcmZvcm1hbmNlX3JhdGluZyA9IChwcCwgcmF0aW5ncykgLT5cclxuXHRsbyA9IDBcclxuXHRoaSA9IDQwMDBcclxuXHR3aGlsZSBNYXRoLmFicyhoaSAtIGxvKSA+IDAuMDAxXHJcblx0XHRyYXRpbmcgPSAobG8gKyBoaSkgLyAyXHJcblx0XHRpZiBwcCA+IGV4cGVjdGVkX3Njb3JlIHJhdGluZ3MsIHJhdGluZ1xyXG5cdFx0XHRsbyA9IHJhdGluZ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRoaSA9IHJhdGluZ1xyXG5cdHJhdGluZ1xyXG4gXHJcbiMgVXNlIHR3byBleHRyZW1lIHZhbHVlcyB3aGVuIGNhbGN1bGF0aW5nIDAlIG9yIDEwMCVcclxuZXh0cmFwb2xhdGUgPSAoYTAsIGIwLCBlbG9zKSAtPlxyXG5cdGEgPSBwZXJmb3JtYW5jZV9yYXRpbmcgYTAsZWxvc1xyXG5cdGIgPSBwZXJmb3JtYW5jZV9yYXRpbmcgYjAsZWxvc1xyXG5cdGIgKyBiIC0gYVxyXG5cclxucGVyZm9ybWFuY2UgPSAocHAsZWxvcykgLT4gXHJcblx0biA9IGVsb3MubGVuZ3RoXHJcblx0aWYgbiA9PSAxXHJcblx0XHRpZiBwcCA9PSAwIHRoZW4gcmV0dXJuIGV4dHJhcG9sYXRlIDAuNTAsMC4yNSxlbG9zXHJcblx0XHRpZiBwcCA9PSBuIHRoZW4gcmV0dXJuIGV4dHJhcG9sYXRlIDAuNTAsMC43NSxlbG9zXHJcblx0ZWxzZVxyXG5cdFx0aWYgcHAgPT0gMCB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSAgIDEsICAwLjUsZWxvc1xyXG5cdFx0aWYgcHAgPT0gbiB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSBuLTEsbi0wLjUsZWxvc1xyXG5cdHBlcmZvcm1hbmNlX3JhdGluZyBwcCxlbG9zXHJcblxyXG5zYWZlR2V0ID0gKHBhcmFtcyxrZXksc3RhbmRhcmQ9XCJcIikgLT4gXHJcblx0aWYgcGFyYW1zLmdldCBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCBrZXkgXHJcblx0aWYgcGFyYW1zLmdldCAnICcgKyBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCAnICcgKyBrZXlcclxuXHRzdGFuZGFyZFxyXG5cclxucGFyc2VRdWVyeSA9IC0+XHJcblx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblxyXG5cdHRpdGxlID0gc2FmZUdldCBwYXJhbXMsIFwidGl0bGVcIlxyXG5cdE1BWCA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIk1BWFwiLCBcIjJcIlxyXG5cdFJFU1VMVFMgPSAnMDEyMzQ1Njc4Jy5zbGljZSAwLCBNQVggKyAxXHJcblx0XHJcblx0cGxheWVycyA9IFtdXHJcblx0Zm9yIGkgaW4gWzEuLjIwXVxyXG5cdFx0cCA9IHNhZmVHZXQgcGFyYW1zLCBcInAje2l9XCIsIFwiXCJcclxuXHRcdGlmIHAgPT0gXCJcIiB0aGVuIGJyZWFrXHJcblx0XHRlbG8gPSBwYXJzZUludCBwLnNsaWNlIDAsNFxyXG5cdFx0bmFtZSA9IHAuc2xpY2UoNCkudHJpbSgpXHJcblx0XHRwbGF5ZXJzLnB1c2gge2VsbywgbmFtZSwgaW5kZXg6IGkgLSAxfVxyXG5cdGVjaG8gcGxheWVyc1xyXG5cclxuXHRyZXN1bHRzID0gW11cclxuXHRmb3IgaSBpbiBbMS4ucGxheWVycy5sZW5ndGggLSAxXVxyXG5cdFx0cmVzdWx0cy5wdXNoIHNhZmVHZXQgcGFyYW1zLCBcInIje2l9XCIsIFwieFwiICogcGxheWVycy5sZW5ndGggLyAyXHJcblxyXG5cdHtwbGF5ZXJzLCByZXN1bHRzLCB0aXRsZX1cclxuXHJcbnNhdmVQYWlyaW5nID0gKHIsIEEsIGhhbGYsIG4pIC0+XHJcblx0bHN0ID0gaWYgciAlIDIgPT0gMSB0aGVuIFtbQVtuIC0gMV0sIEFbMF1dXSBlbHNlIFtbQVswXSwgQVtuIC0gMV1dXVxyXG5cdGZvciBpIGluIFsxLi4uaGFsZl1cclxuXHRcdGxzdC5wdXNoIFtBW2ldLCBBW24gLSAxIC0gaV1dXHJcblx0bHN0XHJcblxyXG5tYWtlQmVyZ2VyID0gKG4pIC0+XHJcblx0aWYgbiAlIDIgPT0gMSB0aGVuIG4gKz0gMVxyXG5cdGhhbGYgPSBuIC8vIDIgXHJcblx0QSA9IFswLi4ubl1cclxuXHRyb3VuZHMgPSBbXVxyXG5cdGZvciBpIGluIFswLi4ubi0xXVxyXG5cdFx0cm91bmRzLnB1c2goc2F2ZVBhaXJpbmcoaSwgQSwgaGFsZiwgbikpXHJcblx0XHRBLnBvcCgpXHJcblx0XHRBID0gQS5zbGljZShoYWxmKS5jb25jYXQgQS5zbGljZSgwLGhhbGYpXHJcblx0XHRBLnB1c2gobi0xKVxyXG5cdHJvdW5kc1xyXG5cclxuc2hvd0hlbHAgPSAtPlxyXG5cdHVybCA9IFtdXHJcblx0dXJsLnB1c2ggXCIje0RPTUFJTn0vP3RpdGxlPUpvdWtvcyBTb21tYXIgMjAyNVwiXHJcblx0dXJsLnB1c2ggXCImTUFYPTJcIlxyXG5cdHVybC5wdXNoIFwiJnAxPTE2OTggT25uaSBBaWtpb1wiXHJcblx0dXJsLnB1c2ggXCImcDI9MTU1OCBIZWxnZSBCZXJnc3Ryw7ZtXCJcclxuXHR1cmwucHVzaCBcIiZwMz0xNTQ5IEpvbmFzIEjDtmtcIlxyXG5cdHVybC5wdXNoIFwiJnA0PTE2NzkgTGFycyBKb2hhbnNzb25cIlxyXG5cdHVybC5wdXNoIFwiJnA1PTAwMDAgUGVyIEVyaWtzc29uXCJcclxuXHR1cmwucHVzaCBcIiZwNj0xNjUzIENocmlzdGVyIE5pbHNzb25cIlxyXG5cdHVybC5wdXNoIFwiJnA3PTE2NzMgUGVyIEhhbW5zdHLDtm1cIlxyXG5cdHVybC5wdXNoIFwiJnA4PTE1MDQgVGhvbWFzIFBhdWxpblwiXHJcblx0dXJsLnB1c2ggXCImcDk9MTcwNiBBYmJhcyBSYXphdmlcIlxyXG5cdHVybC5wdXNoIFwiJnAxMD0xNTc5IEpvdWtvIExpaXN0YW1vXCJcclxuXHR1cmwucHVzaCBcIiZyMT0yMDJ4MlwiXHJcblx0dXJsLnB1c2ggXCImcjI9MDEwMjBcIlxyXG5cdHVybC5wdXNoIFwiJnIzPTIwMDIyXCJcclxuXHR1cmwucHVzaCBcIiZyND0yMDAwMlwiXHJcblx0dXJsLnB1c2ggXCImcjU9MDIyMjJcIlxyXG5cdHVybC5wdXNoIFwiJnI3PXh4Mnh4XCJcclxuXHJcblx0aGVscCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcclxuXHRoZWxwLmNsYXNzTmFtZSA9ICdoZWxwJ1xyXG5cdGhlbHAuaW5uZXJIVE1MID0gXCI8cD5FeGVtcGVsOjwvcD48cHJlPiN7dXJsLmpvaW4gXCJcXG5cIn08L3ByZT5cIlxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXJnZXInKS5hcHBlbmRDaGlsZCBoZWxwXHJcblxyXG5cdGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdhJ1xyXG5cdGxpbmsuaHJlZiA9IHVybC5qb2luICcnXHJcblx0bGluay50ZXh0ID0gXCJFeGVtcGVsXCJcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmVyZ2VyJykuYXBwZW5kQ2hpbGQgbGlua1xyXG5cclxuc2hvd0JlcmdlciA9ICh0aXRsZSwgcGxheWVycywgcm91bmRzLCByZXN1bHRzLCBwb2ludHMpIC0+XHJcblx0aDIgPSAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnaDInXHJcblx0aDIudGV4dENvbnRlbnQgPSB0aXRsZVxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXJnZXInKS5hcHBlbmRDaGlsZCBoMlxyXG5cclxuXHR0YmwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0YWJsZSdcclxuXHRoZWFkZXIgPSB0YmwuaW5zZXJ0Um93KClcclxuXHRoZWFkZXIuaW5uZXJIVE1MID0gJzx0aD4jPC90aD48dGg+TmFtbjwvdGg+PHRoPkVsbzwvdGg+J1xyXG5cdGZvciBpIGluIFswLi4ucm91bmRzLmxlbmd0aF1cclxuXHRcdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0aCdcclxuXHRcdGNlbGwudGV4dENvbnRlbnQgPSBcIiN7aSsxfVwiXHJcblx0XHRkbyAoaSkgLT5cclxuXHRcdFx0Y2VsbC5hZGRFdmVudExpc3RlbmVyICdjbGljaycsIC0+XHJcblx0XHRcdFx0ZWNobyBcIkR1IGtsaWNrYWRlIHDDpSByb25kICN7aSsxfVwiXHJcblx0XHRcdFx0c2hvd1RhYmxlcyByb3VuZHNbaV0gb3IgW10sIHBsYXllcnMsIGksIHJlc3VsdHNcclxuXHJcblx0XHRoZWFkZXIuYXBwZW5kQ2hpbGQgY2VsbFxyXG5cdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0aCdcclxuXHRjZWxsLnRleHRDb250ZW50ID0gXCJQb8OkbmdcIlxyXG5cdGhlYWRlci5hcHBlbmRDaGlsZCBjZWxsXHJcblxyXG5cdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0aCdcclxuXHRjZWxsLnRleHRDb250ZW50ID0gXCJQUlwiXHJcblx0aGVhZGVyLmFwcGVuZENoaWxkIGNlbGxcclxuXHJcblx0Zm9yIHAsIGkgaW4gcGxheWVyc1xyXG5cdFx0cm93ID0gdGJsLmluc2VydFJvdygpXHJcblx0XHRyb3cuaW5zZXJ0Q2VsbCgpLnRleHRDb250ZW50ID0gaSArIDFcclxuXHRcdFxyXG5cdFx0Y2VsbCA9IHJvdy5pbnNlcnRDZWxsKClcclxuXHRcdGNlbGwudGV4dENvbnRlbnQgPSBwLm5hbWVcclxuXHRcdGNlbGwuc3R5bGUudGV4dEFsaWduID0gJ2xlZnQnXHJcblxyXG5cdFx0b3BwRWxvcyA9IFtdXHJcblx0XHRyb3cuaW5zZXJ0Q2VsbCgpLnRleHRDb250ZW50ID0gcC5lbG9cclxuXHRcdGZvciByIGluIFswLi4ucm91bmRzLmxlbmd0aF1cclxuXHRcdFx0Y2VsbCA9IHJvdy5pbnNlcnRDZWxsKClcclxuXHRcdFx0dGFibGVJbmRleCA9IHJvdW5kc1tyXS5maW5kSW5kZXgoKFt3LCBiXSkgLT4gdyA9PSBpIG9yIGIgPT0gaSlcclxuXHRcdFx0aWYgdGFibGVJbmRleCA9PSAtMSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdHJlc3VsdCA9IHJlc3VsdHNbcl0/W3RhYmxlSW5kZXhdIG9yIFwiXCJcclxuXHRcdFx0cmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UgXCJ4XCIsIFwiXCJcclxuXHJcblx0XHRcdFt3LCBiXSA9IHJvdW5kc1tyXVt0YWJsZUluZGV4XVxyXG5cdFx0XHRvcHBvbmVudCA9IGlmIHcgPT0gaSB0aGVuIGIgZWxzZSB3XHJcblx0XHRcdGlmIHJlc3VsdCBpbiBSRVNVTFRTIGFuZCBwbGF5ZXJzW29wcG9uZW50XS5lbG8gIT0gMCB0aGVuIG9wcEVsb3MucHVzaCBwbGF5ZXJzW29wcG9uZW50XS5lbG9cclxuXHJcblx0XHRcdGlmIGkgPT0gYiBhbmQgcmVzdWx0ICE9IFwiXCIgdGhlbiByZXN1bHQgPSBNQVggLSBwYXJzZUludCByZXN1bHRcclxuXHJcblx0XHRcdGlmIGkgPT0gdyB0aGVuIGEgPSBcInJpZ2h0Oi03cHhcIiBlbHNlIGEgPSBcImxlZnQ6LTdweFwiXHJcblxyXG5cdFx0XHRodG1sID0gXCJcIlxyXG5cdFx0XHRodG1sICs9IFwiPGRpdiBzdHlsZT0ncG9zaXRpb246YWJzb2x1dGU7IHRvcDotMTdweDsgI3thfTsgZm9udC1zaXplOjAuN2VtOyc+I3tvcHBvbmVudCArIDF9PC9kaXY+XCJcclxuXHRcdFx0aHRtbCArPSBcIjxkaXYgc3R5bGU9J3Bvc2l0aW9uOmFic29sdXRlOyB0b3A6LTRweDsgICAgICAgIGZvbnQtc2l6ZToxLjBlbTsnPiN7cmVzdWx0fTwvZGl2PlwiXHJcblx0XHRcdGNlbGwuaW5uZXJIVE1MID0gXCI8ZGl2IHN0eWxlPSdwb3NpdGlvbjpyZWxhdGl2ZTsnPlwiICsgaHRtbCArIFwiPC9kaXY+XCJcclxuXHJcblx0XHRjZWxsID0gcm93Lmluc2VydENlbGwoKVxyXG5cdFx0Y2VsbC50ZXh0Q29udGVudCA9IHBvaW50c1tpXVxyXG5cdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnXHJcblxyXG5cdFx0cm93Lmluc2VydENlbGwoKS50ZXh0Q29udGVudCA9IHBlcmZvcm1hbmNlKHBvaW50c1tpXS9NQVgsIG9wcEVsb3MpLnRvRml4ZWQgMFxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXJnZXInKS5hcHBlbmRDaGlsZCB0YmxcclxuXHJcbnByZXR0aWZ5ID0gKGNoKSAtPlxyXG5cdGlmIGNoIGluIFJFU1VMVFMgdGhlbiByZXR1cm4gXCIje2NofSAtICN7TUFYIC0gY2h9XCJcclxuXHRcIi1cIlxyXG5cclxuc2hvd1RhYmxlcyA9IChyb3VuZHMsIHBsYXllcnMsIHNlbGVjdGVkUm91bmQsIHJlc3VsdHMpIC0+XHJcblx0aWYgcm91bmRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblxyXG5cdHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnaDInXHJcblx0dGl0bGUudGV4dENvbnRlbnQgPSBcIkJvcmRzbGlzdGEgZsO2ciByb25kICN7c2VsZWN0ZWRSb3VuZCsxfVwiXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlcycpLmlubmVySFRNTCA9ICcnXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlcycpLmFwcGVuZENoaWxkIHRpdGxlXHJcblxyXG5cdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGFibGUnXHJcblxyXG5cdGhlYWRlciA9IHRhYmxlLmluc2VydFJvdygpXHJcblx0aGVhZGVyLmlubmVySFRNTCA9IFwiPHRoPkJvcmQ8L3RoPjx0aD5WaXQ8L3RoPjx0aD5TdmFydDwvdGg+PHRoPiN7UkVTVUxUU308L3RoPlwiXHJcblxyXG5cdGZvciBpIGluIFswLi4ucm91bmRzLmxlbmd0aF1cclxuXHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndHInXHJcblx0XHRbdywgYl0gPSByb3VuZHNbaV1cclxuXHRcdHZpdCA9IHBsYXllcnNbd10/Lm5hbWUgb3IgXCJcIlxyXG5cdFx0c3ZhcnQgPSBwbGF5ZXJzW2JdPy5uYW1lIG9yIFwiXCJcclxuXHJcblx0XHR0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RkJ1xyXG5cdFx0dGQudGV4dENvbnRlbnQgPSBcIiN7aSArIDF9XCJcclxuXHRcdHRyLmFwcGVuZENoaWxkIHRkXHJcblxyXG5cdFx0dGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0ZCdcclxuXHRcdHRkLnRleHRDb250ZW50ID0gdml0XHJcblx0XHR0ZC5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCdcclxuXHRcdHRyLmFwcGVuZENoaWxkIHRkXHJcblxyXG5cdFx0dGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0ZCdcclxuXHRcdHRkLnRleHRDb250ZW50ID0gc3ZhcnRcclxuXHRcdHRkLnN0eWxlLnRleHRBbGlnbiA9ICdsZWZ0J1xyXG5cdFx0dHIuYXBwZW5kQ2hpbGQgdGRcclxuXHJcblx0XHR0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RkJ1xyXG5cdFx0dGQudGV4dENvbnRlbnQgPSBwcmV0dGlmeSByZXN1bHRzW3NlbGVjdGVkUm91bmRdW2ldXHJcblx0XHR0ZC5zdHlsZS5hbGlnbiA9ICdjZW50ZXInXHJcblx0XHR0ci5hcHBlbmRDaGlsZCB0ZFxyXG5cclxuXHRcdHRhYmxlLmFwcGVuZENoaWxkIHRyXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlcycpLmFwcGVuZENoaWxkIHRhYmxlXHJcblxyXG5tYWluID0gLT5cclxuXHR7cGxheWVycywgcmVzdWx0cywgdGl0bGV9ID0gcGFyc2VRdWVyeSgpXHJcblx0ZG9jdW1lbnQudGl0bGUgPSB0aXRsZVxyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCA8IDRcclxuXHRcdHNob3dIZWxwKClcclxuXHRcdHJldHVyblxyXG5cdHJvdW5kcyA9IG1ha2VCZXJnZXIocGxheWVycy5sZW5ndGgpXHJcblx0ZWNobyByb3VuZHNcclxuXHRwb2ludHMgPSBBcnJheShwbGF5ZXJzLmxlbmd0aCkuZmlsbCgwKVxyXG5cclxuXHRmb3IgaSBpbiBbMC4uLnJlc3VsdHMubGVuZ3RoXVxyXG5cdFx0cmVzID0gcmVzdWx0c1tpXVxyXG5cdFx0cm91bmQgPSByb3VuZHNbaV1cclxuXHRcdGZvciBqLCBbdywgYl0gb2Ygcm91bmRcclxuXHRcdFx0aWYgcmVzW2pdIGluIFJFU1VMVFNcclxuXHRcdFx0XHRwb2ludHNbd10gKz0gcGFyc2VJbnQgcmVzW2pdXHJcblx0XHRcdFx0cG9pbnRzW2JdICs9IE1BWCAtIHBhcnNlSW50IHJlc1tqXVxyXG5cclxuXHRzaG93QmVyZ2VyIHRpdGxlLCBwbGF5ZXJzLCByb3VuZHMsIHJlc3VsdHMsIHBvaW50c1xyXG5cdHNob3dUYWJsZXMgcm91bmRzWzBdIG9yIFtdLCBwbGF5ZXJzLCAwLCByZXN1bHRzXHJcblxyXG5tYWluKClcclxuIl19
//# sourceURL=c:\github\2025\013-Berger\berger.coffee