// Generated by CoffeeScript 2.7.0
var DOMAIN_GLOBAL, DOMAIN_LOCAL, GAMES, R, RESULTS, TITLE, TYPE, alignCenter, alignLeft, alignRight, display, echo, findNumberOfDecimals, main, makeBerger, makeFairPair, parseQuery, players, prettify, range, results, rounds, roundsContent, safeGet, savePairing, showHelp, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  bergerText,
  fairpairText,
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

DOMAIN_LOCAL = "http://127.0.0.1:5500";

DOMAIN_GLOBAL = "https://christernilsson.github.io/2025/013-Berger";

TITLE = 'Bergerturnering';

GAMES = 2;

RESULTS = '012';

TYPE = 'Berger';

R = 0;

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]

results = []; // ['012xx', '22210'] Vitspelarnas resultat i varje rond

display = 3; // both

sorteringsOrdning = {}; // Spara per kolumn

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var _th, index, k, len, results1, ths;
  ths = document.querySelectorAll('#bergertabell th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    _th = ths[k];
    index += 1;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#bergertabell tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var elo, i, k, l, len, len1, name, params, person, persons, ref, results1;
  params = new URLSearchParams(window.location.search);
  TITLE = safeGet(params, "TITLE");
  GAMES = parseInt(safeGet(params, "GAMES", "1"));
  RESULTS = '012345678'.slice(0, 2 * GAMES + 1);
  TYPE = safeGet(params, "TYPE", 'Berger');
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    person = persons[k];
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  R = parseInt(safeGet(params, "R", players.length - 1));
  results = [];
  ref = range(R);
  results1 = [];
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    results1.push(results.push(safeGet(params, `r${i + 1}`, "x".repeat(players.length / 2))));
  }
  return results1;
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function() {
  var A, half, i, k, n, ref;
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, k, len, line, ref;
  fairpair = new FairPair(players, R, GAMES);
  echo("");
  ref = range(players.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  return fairpair.rounds;
};

showHelp = function() {
  var result;
  result = div({}, div({
    class: "help"
  }, pre({}, helpText)), p({}, a({
    href: DOMAIN_GLOBAL + bergerText
  }, 'Berger')), p({}, a({
    href: DOMAIN_LOCAL + bergerText
  }, 'Berger dev')), div({
    class: "help"
  }, pre({}, DOMAIN_GLOBAL + bergerText)), p({}, a({
    href: DOMAIN_GLOBAL + fairpairText
  }, 'FairPair')), p({}, a({
    href: DOMAIN_LOCAL + fairpairText
  }, 'FairPair dev')), div({
    class: "help"
  }, pre({}, DOMAIN_GLOBAL + fairpairText)));
  return document.getElementById('berger').innerHTML = result;
};

roundsContent = function(points, i) { // rondernas data + poäng + PR
  var attr, b, cell, k, len, oppElos, opponent, pointsPR, r, ref, ref1, ref2, result, ronder, tableIndex, w;
  ronder = [];
  oppElos = [];
  pointsPR = 0;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    tableIndex = rounds[r].findIndex(function([w, b]) {
      return w === i || b === i;
    });
    if (tableIndex === -1) {
      continue;
    }
    result = (ref1 = results[r]) != null ? ref1[tableIndex] : void 0;
    [w, b] = rounds[r][tableIndex];
    opponent = w === i ? b : w;
    if (indexOf.call(RESULTS, result) >= 0) {
      if (w === i) {
        result = parseInt(result);
      } else {
        result = 2 * GAMES - parseInt(result);
      }
      if ((ref2 = result.toString(), indexOf.call(RESULTS, ref2) >= 0) && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
        pointsPR += parseInt(result);
      }
    } else {
      result = "";
    }
    if (i === w) {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;" + attr + "font-size:0.7em;"
    }, opponent + 1), div({
      style: "position:absolute; top:12px;           font-size:1.1em;"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, points[i]));
  ronder.push(td({}, performance(pointsPR / (2 * GAMES), oppElos)));
  return ronder.join("");
};

showPlayers = function(points) {
  var decimals, i, k, l, len, len1, lst, player, rad, rader, result, results1, rows, tbody, value;
  rows = [];
  for (i = k = 0, len = players.length; k < len; i = ++k) {
    player = players[i];
    rows.push(tr({}, td({}, i + 1), td(alignLeft, player.name), td({}, player.elo), roundsContent(points, i)));
  }
  result = div({}, h2({}, TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var l, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results1.push(th({}, `${i + 1}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  document.getElementById('bergertabell').innerHTML = result;
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#bergertabell tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var l, len1, results1;
    results1 = [];
    for (l = 0, len1 = rader.length; l < len1; l++) {
      rad = rader[l];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (l = 0, len1 = rader.length; l < len1; l++) {
    rad = rader[l];
    value = parseFloat(_.last(rad.children).textContent);
    value = value > 3999 ? "" : value.toFixed(decimals);
    results1.push(_.last(rad.children).textContent = value);
  }
  return results1;
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${2 * GAMES - ch}`;
  }
  return "-";
};

showTables = function(rounds, selectedRound) {
  var b, i, k, len, ref, ref1, ref2, result, rows, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    rows += tr({}, td({}, i + 1), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(results[selectedRound][i])));
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + 1}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, `${RESULTS}`)), rows));
  return document.getElementById('tables').innerHTML = result;
};

main = function() {
  var b, i, j, k, len, points, ref, ref1, res, round, w;
  parseQuery();
  document.title = TITLE;
  if (players.length < 4) {
    showHelp();
    return;
  }
  if (TYPE === 'Berger') {
    R = players.length - 1;
    rounds = makeBerger();
  } else {
    rounds = makeFairPair();
  }
  points = Array(players.length).fill(0);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += 2 * GAMES - parseInt(res[j]);
      }
    }
  }
  showPlayers(points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

document.addEventListener('keyup', function(event) {
  if (event.key === '1') {
    display = 1;
  }
  if (event.key === '2') {
    display = 2;
  }
  if (event.key === '3') {
    display = 3;
  }
  document.getElementById("bergertabell").style.display = display === 1 || display === 3 ? "table" : "none";
  return document.getElementById("tables").style.display = display === 2 || display === 3 ? "table" : "none";
});

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVyZ2VyLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJiZXJnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLG9CQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsb0JBQUEsRUFBQSxpQkFBQTtFQUFBOztBQUFBLE9BQUE7RUFBUSxNQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFVBQVI7RUFBb0IsWUFBcEI7RUFBa0MsUUFBbEM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxXQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsS0FBUjtFQUFjLEtBQWQ7RUFBb0IsRUFBcEI7RUFBdUIsRUFBdkI7RUFBMEIsRUFBMUI7RUFBNkIsQ0FBN0I7RUFBK0IsR0FBL0I7RUFBbUMsR0FBbkM7RUFBdUMsQ0FBdkM7RUFBeUMsRUFBekM7Q0FBQSxNQUFBOztBQUVBLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBQ2YsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFFVixZQUFBLEdBQWU7O0FBQ2YsYUFBQSxHQUFnQjs7QUFFaEIsS0FBQSxHQUFROztBQUNSLEtBQUEsR0FBUTs7QUFDUixPQUFBLEdBQVU7O0FBQ1YsSUFBQSxHQUFPOztBQUNQLENBQUEsR0FBSTs7QUFFSixTQUFBLEdBQWM7RUFBQyxLQUFBLEVBQU87QUFB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T0FBQSxHQUFVLEVBQW5DOztFQUNBLElBQUcsS0FBSyxDQUFDLEdBQU4sS0FBYSxHQUFoQjtJQUF5QixPQUFBLEdBQVUsRUFBbkM7O0VBQ0EsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLEdBQWhCO0lBQXlCLE9BQUEsR0FBVSxFQUFuQzs7RUFFQSxRQUFRLENBQUMsY0FBVCxDQUF3QixjQUF4QixDQUF1QyxDQUFDLEtBQUssQ0FBQyxPQUE5QyxHQUEyRCxZQUFZLEtBQVosWUFBYyxDQUFqQixHQUF5QixPQUF6QixHQUFzQztTQUM5RixRQUFRLENBQUMsY0FBVCxDQUF3QixRQUF4QixDQUFpQyxDQUFDLEtBQUssQ0FBQyxPQUF4QyxHQUFxRCxZQUFZLEtBQVosWUFBYyxDQUFqQixHQUF5QixPQUF6QixHQUFzQztBQVB0RCxDQUFuQzs7QUFTQSxJQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BsYXllcn0gZnJvbSAnLi9wbGF5ZXIuanMnXHJcbmltcG9ydCB7RmFpclBhaXJ9IGZyb20gJy4vZmFpcnBhaXIuanMnXHJcbmltcG9ydCB7YmVyZ2VyVGV4dCwgZmFpcnBhaXJUZXh0LCBoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcbmltcG9ydCB7dGFibGUsdGhlYWQsdGgsdHIsdGQsYSxkaXYscHJlLHAsaDJ9IGZyb20gJy4vaHRtbC5qcydcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbkRPTUFJTl9MT0NBTCA9IFwiaHR0cDovLzEyNy4wLjAuMTo1NTAwXCJcclxuRE9NQUlOX0dMT0JBTCA9IFwiaHR0cHM6Ly9jaHJpc3Rlcm5pbHNzb24uZ2l0aHViLmlvLzIwMjUvMDEzLUJlcmdlclwiXHJcblxyXG5USVRMRSA9ICdCZXJnZXJ0dXJuZXJpbmcnXHJcbkdBTUVTID0gMlxyXG5SRVNVTFRTID0gJzAxMidcclxuVFlQRSA9ICdCZXJnZXInXHJcblIgPSAwXHJcblxyXG5hbGlnbkxlZnQgICA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOmxlZnRcIn1cclxuYWxpZ25DZW50ZXIgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpjZW50ZXJcIn1cclxuYWxpZ25SaWdodCAgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpyaWdodFwifVxyXG5cclxucGxheWVycyA9IFtdXHJcbnJvdW5kcyA9IFtdICMgdmVtIG3DtnRlciB2ZW0/IFt3LGJdXHJcbnJlc3VsdHMgPSBbXSAjIFsnMDEyeHgnLCAnMjIyMTAnXSBWaXRzcGVsYXJuYXMgcmVzdWx0YXQgaSB2YXJqZSByb25kXHJcblxyXG5kaXNwbGF5ID0gMyAjIGJvdGhcclxuXHJcbnNvcnRlcmluZ3NPcmRuaW5nID0ge31cdCMgU3BhcmEgcGVyIGtvbHVtblxyXG5cclxuZmluZE51bWJlck9mRGVjaW1hbHMgPSAobHN0KSAtPlxyXG5cdGJlc3QgPSAwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0dW5payA9IF8udW5pcSAoaXRlbS50b0ZpeGVkKGkpIGZvciBpdGVtIGluIGxzdClcclxuXHRcdGlmIHVuaWsubGVuZ3RoID4gYmVzdCB0aGVuIFtiZXN0LGliZXN0XSA9IFt1bmlrLmxlbmd0aCxpXVxyXG5cdGliZXN0XHJcblxyXG5za2FwYVNvcnRlcmluZ3NrbGljayA9IC0+XHJcblxyXG5cdHRocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNiZXJnZXJ0YWJlbGwgdGgnXHJcblxyXG5cdCNlY2hvIHRoc1xyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgX3RoIGluIHRoc1xyXG5cdFx0aW5kZXggKz0gMVxyXG5cdFx0ZG8gKF90aCxpbmRleCkgLT5cclxuXHRcdFx0X3RoLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgKGV2ZW50KSAtPlxyXG5cdFx0XHRcdGtleSA9IF90aC50ZXh0Q29udGVudFxyXG5cdFx0XHRcdGlmICFpc05hTiBwYXJzZUludCBrZXlcclxuXHRcdFx0XHRcdGtleSA9IHBhcnNlSW50KGtleSkgLSAxIFxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcyByb3VuZHNba2V5XSBvciBbXSwga2V5XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0dGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICcjYmVyZ2VydGFiZWxsIHRib2R5J1xyXG5cdFx0XHRcdHJhZGVyID0gQXJyYXkuZnJvbSB0Ym9keS5xdWVyeVNlbGVjdG9yQWxsICd0cidcclxuXHRcdFx0XHRzdGlnYW5kZSA9IGtleSBpbiBcIiMgTmFtblwiLnNwbGl0ICcgJ1xyXG5cclxuXHRcdFx0XHRyYWRlci5zb3J0IChhLCBiKSAtPlxyXG5cdFx0XHRcdFx0Y2VsbEEgPSBhLmNoaWxkcmVuW2luZGV4XS50ZXh0Q29udGVudC50cmltKClcclxuXHRcdFx0XHRcdGNlbGxCID0gYi5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblxyXG5cdFx0XHRcdFx0IyBGw7Zyc8O2ayBqw6RtZsO2cmEgc29tIHRhbCwgYW5uYXJzIHNvbSB0ZXh0XHJcblx0XHRcdFx0XHRudW1BID0gcGFyc2VJbnQgY2VsbEFcclxuXHRcdFx0XHRcdG51bUIgPSBwYXJzZUludCBjZWxsQlxyXG5cdFx0XHRcdFx0aWYgIWlzTmFOKG51bUEpIGFuZCAhaXNOYU4obnVtQilcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGlmIHN0aWdhbmRlIHRoZW4gbnVtQSAtIG51bUIgZWxzZSBudW1CIC0gbnVtQVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBjZWxsQS5sb2NhbGVDb21wYXJlIGNlbGxCIGVsc2UgY2VsbEIubG9jYWxlQ29tcGFyZSBjZWxsQVxyXG5cclxuXHRcdFx0XHQjIEzDpGdnIHRpbGxiYWthIHJhZGVybmEgaSBzb3J0ZXJhZCBvcmRuaW5nXHJcblx0XHRcdFx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0XHRcdFx0dGJvZHkuYXBwZW5kQ2hpbGQgcmFkXHJcblxyXG5zYWZlR2V0ID0gKHBhcmFtcyxrZXksc3RhbmRhcmQ9XCJcIikgLT4gXHJcblx0aWYgcGFyYW1zLmdldCBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCBrZXkgXHJcblx0aWYgcGFyYW1zLmdldCAnICcgKyBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCAnICcgKyBrZXlcclxuXHRzdGFuZGFyZFxyXG5cclxucGFyc2VRdWVyeSA9IC0+XHJcblx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblxyXG5cdFRJVExFID0gc2FmZUdldCBwYXJhbXMsIFwiVElUTEVcIlxyXG5cdEdBTUVTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiR0FNRVNcIiwgXCIxXCJcclxuXHRSRVNVTFRTID0gJzAxMjM0NTY3OCcuc2xpY2UgMCwgMiAqIEdBTUVTICsgMVxyXG5cdFRZUEUgPSBzYWZlR2V0IHBhcmFtcywgXCJUWVBFXCIsICdCZXJnZXInXHJcblx0XHJcblx0cGxheWVycyA9IFtdXHJcblx0cGVyc29ucyA9IHBhcmFtcy5nZXRBbGwgXCJwXCJcclxuXHRwZXJzb25zLnNvcnQoKS5yZXZlcnNlKClcclxuXHRmb3IgcGVyc29uIGluIHBlcnNvbnNcclxuXHRcdGVsbyA9IHBhcnNlSW50IHBlcnNvbi5zbGljZSAwLDRcclxuXHRcdG5hbWUgPSBwZXJzb24uc2xpY2UoNCkudHJpbSgpXHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBwbGF5ZXJzLmxlbmd0aCwgbmFtZSwgZWxvXHJcblxyXG5cdFIgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJSXCIsIHBsYXllcnMubGVuZ3RoLTFcclxuXHJcblx0cmVzdWx0cyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgUlxyXG5cdFx0cmVzdWx0cy5wdXNoIHNhZmVHZXQgcGFyYW1zLCBcInIje2krMX1cIiwgXCJ4XCIucmVwZWF0IHBsYXllcnMubGVuZ3RoIC8gMlxyXG5cclxuc2F2ZVBhaXJpbmcgPSAociwgQSwgaGFsZiwgbikgLT5cclxuXHRsc3QgPSBpZiByICUgMiA9PSAxIHRoZW4gW1tBW24gLSAxXSwgQVswXV1dIGVsc2UgW1tBWzBdLCBBW24gLSAxXV1dXHJcblx0Zm9yIGkgaW4gWzEuLi5oYWxmXVxyXG5cdFx0bHN0LnB1c2ggW0FbaV0sIEFbbiAtIDEgLSBpXV1cclxuXHRsc3RcclxuXHJcbm1ha2VCZXJnZXIgPSAtPlxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cdGlmIG4gJSAyID09IDEgdGhlbiBuICs9IDFcclxuXHRoYWxmID0gbiAvLyAyIFxyXG5cdEEgPSBbMC4uLm5dXHJcblx0cm91bmRzID0gW11cclxuXHRmb3IgaSBpbiBbMC4uLm4tMV1cclxuXHRcdHJvdW5kcy5wdXNoKHNhdmVQYWlyaW5nKGksIEEsIGhhbGYsIG4pKVxyXG5cdFx0QS5wb3AoKVxyXG5cdFx0QSA9IEEuc2xpY2UoaGFsZikuY29uY2F0IEEuc2xpY2UoMCxoYWxmKVxyXG5cdFx0QS5wdXNoKG4tMSlcclxuXHRyb3VuZHNcclxuXHJcbm1ha2VGYWlyUGFpciA9IC0+XHJcblx0ZmFpcnBhaXIgPSBuZXcgRmFpclBhaXIgcGxheWVycywgUiwgR0FNRVNcclxuXHJcblx0ZWNobyBcIlwiIFxyXG5cclxuXHRmb3IgaSBpbiByYW5nZSBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0bGluZSA9IGZhaXJwYWlyLm1hdHJpeFtpXVxyXG5cdFx0ZWNobyBpJTEwICsgJyAgICcgKyBsaW5lLmpvaW4oJyAgICcpICsgJyAgJyArIHBsYXllcnNbaV0uZWxvXHJcblxyXG5cdGVjaG8gJ3N1bW1hJywgZmFpcnBhaXIuc3VtbWFcclxuXHRmYWlycGFpci5yb3VuZHNcdFxyXG5cclxuXHJcbnNob3dIZWxwID0gLT5cclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0ZGl2IHtjbGFzczpcImhlbHBcIn0sIHByZSB7fSwgaGVscFRleHRcclxuXHRcdHAge30sIGEge2hyZWY6IERPTUFJTl9HTE9CQUwgKyBiZXJnZXJUZXh0fSwnQmVyZ2VyJ1xyXG5cdFx0cCB7fSwgYSB7aHJlZjogRE9NQUlOX0xPQ0FMICsgYmVyZ2VyVGV4dH0sJ0JlcmdlciBkZXYnXHJcblx0XHRkaXYge2NsYXNzOlwiaGVscFwifSwgcHJlIHt9LCBET01BSU5fR0xPQkFMICsgYmVyZ2VyVGV4dFxyXG5cdFx0cCB7fSwgYSB7aHJlZjogRE9NQUlOX0dMT0JBTCArIGZhaXJwYWlyVGV4dH0sJ0ZhaXJQYWlyJ1xyXG5cdFx0cCB7fSwgYSB7aHJlZjogRE9NQUlOX0xPQ0FMICsgZmFpcnBhaXJUZXh0fSwnRmFpclBhaXIgZGV2J1xyXG5cdFx0ZGl2IHtjbGFzczpcImhlbHBcIn0sIHByZSB7fSwgRE9NQUlOX0dMT0JBTCArIGZhaXJwYWlyVGV4dFxyXG5cclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmVyZ2VyJykuaW5uZXJIVE1MID0gcmVzdWx0XHJcblxyXG5yb3VuZHNDb250ZW50ID0gKHBvaW50cywgaSkgLT4gIyByb25kZXJuYXMgZGF0YSArIHBvw6RuZyArIFBSXHJcblxyXG5cdHJvbmRlciA9IFtdXHJcblxyXG5cdG9wcEVsb3MgPSBbXVxyXG5cdHBvaW50c1BSID0gMFxyXG5cclxuXHRmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblxyXG5cdFx0dGFibGVJbmRleCA9IHJvdW5kc1tyXS5maW5kSW5kZXgoKFt3LCBiXSkgLT4gdyA9PSBpIG9yIGIgPT0gaSlcclxuXHRcdGlmIHRhYmxlSW5kZXggPT0gLTEgdGhlbiBjb250aW51ZVxyXG5cdFx0cmVzdWx0ID0gcmVzdWx0c1tyXT9bdGFibGVJbmRleF1cclxuXHJcblx0XHRbdywgYl0gPSByb3VuZHNbcl1bdGFibGVJbmRleF1cclxuXHRcdG9wcG9uZW50ID0gaWYgdyA9PSBpIHRoZW4gYiBlbHNlIHdcclxuXHJcblx0XHRpZiByZXN1bHQgaW4gUkVTVUxUU1xyXG5cdFx0XHRpZiB3ID09IGlcclxuXHRcdFx0XHRyZXN1bHQgPSBwYXJzZUludCByZXN1bHQgXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXN1bHQgPSAyICogR0FNRVMgLSBwYXJzZUludCByZXN1bHQgXHJcblxyXG5cdFx0XHRpZiByZXN1bHQudG9TdHJpbmcoKSBpbiBSRVNVTFRTIGFuZCBwbGF5ZXJzW29wcG9uZW50XS5lbG8gIT0gMFxyXG5cdFx0XHRcdG9wcEVsb3MucHVzaCBwbGF5ZXJzW29wcG9uZW50XS5lbG9cclxuXHRcdFx0XHRwb2ludHNQUiArPSBwYXJzZUludCByZXN1bHRcclxuXHRcdGVsc2VcclxuXHRcdFx0cmVzdWx0ID0gXCJcIlxyXG5cclxuXHRcdGlmIGkgPT0gdyB0aGVuIGF0dHIgPSBcInJpZ2h0OjBweDtcIiBlbHNlIGF0dHIgPSBcImxlZnQ6MHB4O1wiXHJcblx0XHRjZWxsID0gdGQge3N0eWxlOiBcInBvc2l0aW9uOnJlbGF0aXZlO1wifSxcclxuXHRcdFx0ZGl2IHtzdHlsZTogXCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjBweDtcIiArIGF0dHIgKyBcImZvbnQtc2l6ZTowLjdlbTtcIn0sIG9wcG9uZW50ICsgMVxyXG5cdFx0XHRkaXYge3N0eWxlOiBcInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MTJweDsgICAgICAgICAgIGZvbnQtc2l6ZToxLjFlbTtcIn0sIHJlc3VsdFxyXG5cclxuXHRcdHJvbmRlci5wdXNoIGNlbGxcclxuXHJcblx0cm9uZGVyLnB1c2hcdHRkIGFsaWduUmlnaHQsIHBvaW50c1tpXVxyXG5cdHJvbmRlci5wdXNoIHRkIHt9LCBwZXJmb3JtYW5jZSBwb2ludHNQUi8oMipHQU1FUyksIG9wcEVsb3NcclxuXHRyb25kZXIuam9pbiBcIlwiXHJcblxyXG5zaG93UGxheWVycyA9IChwb2ludHMpIC0+XHJcblxyXG5cdHJvd3MgPSBbXVxyXG5cclxuXHRmb3IgcGxheWVyLCBpIGluIHBsYXllcnNcclxuXHJcblx0XHRyb3dzLnB1c2ggdHIge30sXHJcblx0XHRcdHRkIHt9LCBpICsgMVxyXG5cdFx0XHR0ZCBhbGlnbkxlZnQsIHBsYXllci5uYW1lXHJcblx0XHRcdHRkIHt9LCBwbGF5ZXIuZWxvXHJcblx0XHRcdHJvdW5kc0NvbnRlbnQgcG9pbnRzLCBpXHJcblxyXG5cdHJlc3VsdCA9IGRpdiB7fSxcclxuXHRcdGgyIHt9LCBUSVRMRVxyXG5cdFx0dGFibGUge30sXHJcblx0XHRcdHRoZWFkIHt9LFxyXG5cdFx0XHRcdHRoIHt9LCBcIiNcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIk5hbW5cIlxyXG5cdFx0XHRcdHRoIHt9LCBcIkVsb1wiXHJcblx0XHRcdFx0KHRoIHt9LCBcIiN7aSsxfVwiIGZvciBpIGluIHJhbmdlIHJvdW5kcy5sZW5ndGgpLmpvaW4gXCJcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIlBcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIlBSXCJcclxuXHRcdFx0cm93cy5qb2luIFwiXCJcclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JlcmdlcnRhYmVsbCcpLmlubmVySFRNTCA9IHJlc3VsdFxyXG5cclxuXHQjIFPDpHR0IGFudGFsIGRlY2ltYWxlciBmw7ZyIFBSXHJcblx0dGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICcjYmVyZ2VydGFiZWxsIHRib2R5J1xyXG5cdHJhZGVyID0gQXJyYXkuZnJvbSB0Ym9keS5xdWVyeVNlbGVjdG9yQWxsICd0cidcclxuXHRsc3QgPSAocGFyc2VGbG9hdCByYWQuY2hpbGRyZW5bcmFkLmNoaWxkcmVuLmxlbmd0aC0xXS50ZXh0Q29udGVudCBmb3IgcmFkIGluIHJhZGVyKVxyXG5cdGRlY2ltYWxzID0gZmluZE51bWJlck9mRGVjaW1hbHMgbHN0XHJcblx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0dmFsdWUgPSBwYXJzZUZsb2F0IF8ubGFzdChyYWQuY2hpbGRyZW4pLnRleHRDb250ZW50XHJcblx0XHR2YWx1ZSA9IGlmIHZhbHVlID4gMzk5OSB0aGVuIFwiXCIgZWxzZSB2YWx1ZS50b0ZpeGVkIGRlY2ltYWxzIFxyXG5cdFx0Xy5sYXN0KHJhZC5jaGlsZHJlbikudGV4dENvbnRlbnQgPSB2YWx1ZVxyXG5cclxucHJldHRpZnkgPSAoY2gpIC0+XHJcblx0aWYgY2ggaW4gUkVTVUxUUyB0aGVuIHJldHVybiBcIiN7Y2h9IC0gI3syKkdBTUVTIC0gY2h9XCJcclxuXHRcIi1cIlxyXG5cclxuc2hvd1RhYmxlcyA9IChyb3VuZHMsIHNlbGVjdGVkUm91bmQpIC0+XHJcblx0aWYgcm91bmRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblxyXG5cdHJvd3MgPSBcIlwiXHJcblxyXG5cdGZvciBpIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdFt3LCBiXSA9IHJvdW5kc1tpXVxyXG5cdFx0dml0ID0gcGxheWVyc1t3XT8ubmFtZSBvciBcIlwiXHJcblx0XHRzdmFydCA9IHBsYXllcnNbYl0/Lm5hbWUgb3IgXCJcIlxyXG5cclxuXHRcdHJvd3MgKz0gdHIge30sXHJcblx0XHRcdHRkIHt9LCBpKzFcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCB2aXRcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCBzdmFydFxyXG5cdFx0XHR0ZCBhbGlnbkNlbnRlciwgcHJldHRpZnkgcmVzdWx0c1tzZWxlY3RlZFJvdW5kXVtpXVxyXG5cclxuXHRyZXN1bHQgPSBkaXYge30sXHJcblx0XHRoMiB7fSwgXCJCb3Jkc2xpc3RhIGbDtnIgcm9uZCAje3NlbGVjdGVkUm91bmQrMX1cIlxyXG5cdFx0dGFibGUge30sXHJcblx0XHRcdHRoZWFkIHt9LFxyXG5cdFx0XHRcdHRoIHt9LCBcIkJvcmRcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIlZpdFwiXHJcblx0XHRcdFx0dGgge30sIFwiU3ZhcnRcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIiN7UkVTVUxUU31cIiBcclxuXHRcdFx0cm93c1xyXG5cclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGVzJykuaW5uZXJIVE1MID0gcmVzdWx0XHJcblxyXG5tYWluID0gLT5cclxuXHRwYXJzZVF1ZXJ5KClcclxuXHRkb2N1bWVudC50aXRsZSA9IFRJVExFXHJcblxyXG5cdGlmIHBsYXllcnMubGVuZ3RoIDwgNFxyXG5cdFx0c2hvd0hlbHAoKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlmIFRZUEUgPT0gJ0JlcmdlcidcclxuXHRcdFIgPSBwbGF5ZXJzLmxlbmd0aC0xXHJcblx0XHRyb3VuZHMgPSBtYWtlQmVyZ2VyKClcclxuXHRlbHNlIFxyXG5cdFx0cm91bmRzID0gbWFrZUZhaXJQYWlyKClcclxuXHJcblx0cG9pbnRzID0gQXJyYXkocGxheWVycy5sZW5ndGgpLmZpbGwoMClcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcmVzdWx0cy5sZW5ndGhcclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJvdW5kID0gcm91bmRzW2ldXHJcblx0XHRmb3IgaiwgW3csIGJdIG9mIHJvdW5kXHJcblx0XHRcdGlmIHJlc1tqXSBpbiBSRVNVTFRTXHJcblx0XHRcdFx0cG9pbnRzW3ddICs9IHBhcnNlSW50IHJlc1tqXVxyXG5cdFx0XHRcdHBvaW50c1tiXSArPSAyKkdBTUVTIC0gcGFyc2VJbnQgcmVzW2pdXHJcblxyXG5cdHNob3dQbGF5ZXJzIHBvaW50c1xyXG5cdHNob3dUYWJsZXMgcm91bmRzWzBdIG9yIFtdLCAwXHJcblxyXG5cdHNrYXBhU29ydGVyaW5nc2tsaWNrKClcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ2tleXVwJywgKGV2ZW50KSAtPlxyXG5cclxuXHRpZiBldmVudC5rZXkgPT0gJzEnIHRoZW4gZGlzcGxheSA9IDFcclxuXHRpZiBldmVudC5rZXkgPT0gJzInIHRoZW4gZGlzcGxheSA9IDJcclxuXHRpZiBldmVudC5rZXkgPT0gJzMnIHRoZW4gZGlzcGxheSA9IDNcclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiZXJnZXJ0YWJlbGxcIikuc3R5bGUuZGlzcGxheSA9IGlmIGRpc3BsYXkgaW4gWzEsM10gdGhlbiBcInRhYmxlXCIgZWxzZSBcIm5vbmVcIlxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFibGVzXCIpLnN0eWxlLmRpc3BsYXkgPSBpZiBkaXNwbGF5IGluIFsyLDNdIHRoZW4gXCJ0YWJsZVwiIGVsc2UgXCJub25lXCJcclxuXHJcbm1haW4oKVxyXG4iXX0=
//# sourceURL=c:\github\2025\013-Berger\berger.coffee