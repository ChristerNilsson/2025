// Generated by CoffeeScript 2.7.0
var DOMAIN, MAX, R, RESULTS, echo, expected_score, extrapolate, findNumberOfDecimals, main, makeBerger, makeFairPair, parseQuery, performance, performance_rating, players, prettify, range, results, rounds, safeGet, savePairing, showHelp, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning, summa, title,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

echo = console.log;

range = _.range;

// DOMAIN = "http://127.0.0.1:5500"
DOMAIN = "https://christernilsson.github.io/2025/013-Berger";

title = 'Bergerturnering';

MAX = 2;

RESULTS = '012';

R = 0;

players = [];

rounds = []; // vem möter vem? [w,b]

results = []; // ['012xx', '22210'] Vitspelarnas resultat i varje rond

sorteringsOrdning = {}; // Spara per kolumn

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, unik;
  best = 0;
  for (i = k = 0; k <= 6; i = ++k) {
    unik = _.uniq((function() {
      var l, len, results1;
      results1 = [];
      for (l = 0, len = lst.length; l < len; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var index, k, len, results1, th, ths;
  ths = document.querySelectorAll('#bergertabell th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    th = ths[k];
    index += 1;
    results1.push((function(th, index) {
      return th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#bergertabell tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(th, index));
  }
  return results1;
};

summa = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

expected_score = function(ratings, own_rating) {
  var rating;
  return summa((function() {
    var k, len, results1;
    results1 = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results1.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results1;
  })());
};

performance_rating = function(pp, ratings) {
  var hi, lo, rating;
  lo = 0;
  hi = 4000;
  while (Math.abs(hi - lo) > 0.001) {
    rating = (lo + hi) / 2;
    if (pp > expected_score(ratings, rating)) {
      lo = rating;
    } else {
      hi = rating;
    }
  }
  return rating;
};


// Use two extreme values when calculating 0% or 100%
extrapolate = function(a0, b0, elos) {
  var a, b;
  a = performance_rating(a0, elos);
  b = performance_rating(b0, elos);
  return b + b - a;
};

performance = function(pp, elos) {
  var n;
  n = elos.length;
  if (n === 1) {
    if (pp === 0) {
      return extrapolate(0.50, 0.25, elos);
    }
    if (pp === n) {
      return extrapolate(0.50, 0.75, elos);
    }
  } else {
    if (pp === 0) {
      return extrapolate(1, 0.5, elos);
    }
    if (pp === n) {
      return extrapolate(n - 1, n - 0.5, elos);
    }
  }
  return performance_rating(pp, elos);
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var elo, i, k, l, len, len1, name, p, params, persons, ref;
  params = new URLSearchParams(window.location.search);
  title = safeGet(params, "title");
  MAX = parseInt(safeGet(params, "MAX", "2"));
  RESULTS = '012345678'.slice(0, MAX + 1);
  R = parseInt(safeGet(params, "R", '0'));
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    p = persons[k];
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  echo(players);
  results = [];
  // if R == 0 then n = players.length - 1 else n = R
  echo('R', R);
  ref = range(R);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    results.push(safeGet(params, `r${i + 1}`, "x".repeat(players.length / 2)));
  }
  return echo(results);
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function(n) {
  var A, half, i, k, ref;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFairPair = function(n) {
  var fairpair, i, k, l, len, len1, line, p, ref, ref1;
  fairpair = new FairPair(players, R);
  ref = fairpair.players;
  for (k = 0, len = ref.length; k < len; k++) {
    p = ref[k];
    echo(p.opp, p.col, p.balans());
  }
  echo("");
  ref1 = range(players.length);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  return fairpair.rounds;
};

showHelp = function() {
  var help, link, url;
  url = [];
  url.push(`${DOMAIN}/?title=Joukos Sommar 2025`);
  url.push("&MAX=2");
  url.push("&R=9");
  url.push("&p=1698 Onni Aikio");
  url.push("&p=1558 Helge Bergström");
  url.push("&p=1549 Jonas Hök");
  url.push("&p=1679 Lars Johansson");
  url.push("&p=0000 Per Eriksson");
  url.push("&p=1653 Christer Nilsson");
  url.push("&p=1673 Per Hamnström");
  url.push("&p=1504 Thomas Paulin");
  url.push("&p=1706 Abbas Razavi");
  url.push("&p=1579 Jouko Liistamo");
  url.push("&r1=0xxx2");
  url.push("&r2=x0x0x");
  url.push("&r3=002x0");
  url.push("&r4=x0010");
  url.push("&r5=xx222");
  url.push("&r6=xxx1x");
  url.push("&r7=1x002");
  url.push("&r8=220x0");
  url.push("&r9=0200x");
  // url.push "&p=1698 Onni Aikio"
  // url.push "&p=1558 Helge Bergström"
  // url.push "&p=1549 Jonas Hök"
  // url.push "&p=1679 Lars Johansson"
  // url.push "&p=0000 Per Eriksson"
  // url.push "&p=1653 Christer Nilsson"
  // url.push "&p=1673 Per Hamnström"
  // url.push "&p=1504 Thomas Paulin"
  // url.push "&p=1706 Abbas Razavi"
  // url.push "&p=1579 Jouko Liistamo"
  // url.push "&p=1798 Aikio"
  // url.push "&p=1658 Bergström"
  // url.push "&p=1649 Hök"
  // url.push "&p=1779 Johansson"
  // url.push "&p=0000 Eriksson"
  // url.push "&p=1753 Nilsson"
  // url.push "&p=1773 Hamnström"
  // url.push "&p=1604 Paulin"
  // url.push "&p=1806 Razavi"
  // url.push "&p=1679 Liistamo"

  // url.push "&r1=0120120120"
  // url.push "&r2=0120120120"
  // url.push "&r3=0120120120"
  // url.push "&r4=0120120120"
  // url.push "&r5=0120120120"
  // url.push "&r6=0120120120"
  // url.push "&r7=0120120120"
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<p>Exempel:</p><pre>${url.join("\n")}</pre>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = url.join('');
  link.text = "Exempel";
  return document.getElementById('berger').appendChild(link);
};

showPlayers = function(title, points) {
  var a, b, cell, decimals, h2, html, i, k, l, len, len1, len2, lst, m, o, oppElos, opponent, p, pointsPR, r, rad, rader, ref, ref1, ref2, ref3, result, results1, row, tableIndex, tbl, tbody, th, thead, w;
  h2 = document.createElement('h2');
  h2.textContent = title;
  document.getElementById('berger').appendChild(h2);
  tbl = document.getElementById('bergertabell');
  thead = document.createElement('thead');
  tbl.appendChild(thead);
  echo(tbl);
  th = document.createElement('th');
  th.textContent = "#";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Namn";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Elo";
  thead.appendChild(th);
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    th = document.createElement('th');
    th.textContent = `${i + 1}`;
    thead.appendChild(th);
  }
  th = document.createElement('th');
  th.textContent = "Poäng";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "PR";
  thead.appendChild(th);
  for (i = l = 0, len = players.length; l < len; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    oppElos = [];
    pointsPR = 0;
    row.insertCell().textContent = p.elo;
    ref1 = range(rounds.length);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      r = ref1[m];
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      result = (ref2 = results[r]) != null ? ref2[tableIndex] : void 0;
      //result = result.replace "x", ""
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      if (indexOf.call(RESULTS, result) >= 0) {
        if (w === i) {
          result = parseInt(result);
        } else {
          result = MAX - parseInt(result);
        }
        if ((ref3 = result.toString(), indexOf.call(RESULTS, ref3) >= 0) && players[opponent].elo !== 0) {
          oppElos.push(players[opponent].elo);
          pointsPR += parseInt(result);
        }
      } else {
        result = "";
      }
      // if i == b and result != "" then result = MAX - parseInt result
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px; ${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;        font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    echo(i, oppElos, pointsPR, p.name);
    cell = row.insertCell();
    cell.textContent = points[i];
    cell.style.textAlign = 'right';
    row.insertCell().textContent = performance(pointsPR / MAX, oppElos);
  }
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#bergertabell tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var len2, o, results1;
    results1 = [];
    for (o = 0, len2 = rader.length; o < len2; o++) {
      rad = rader[o];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (o = 0, len2 = rader.length; o < len2; o++) {
    rad = rader[o];
    results1.push(_.last(rad.children).textContent = parseFloat(_.last(rad.children).textContent).toFixed(decimals));
  }
  return results1;
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${MAX - ch}`;
  }
  return "-";
};

showTables = function(rounds, selectedRound) {
  var b, header, i, k, len, ref, ref1, ref2, svart, table, td, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  table.id = 'bordtabell';
  header = table.insertRow();
  header.innerHTML = `<th>Bord</th><th>Vit</th><th>Svart</th><th>${RESULTS}</th>`;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = prettify(results[selectedRound][i]);
    td.style.align = 'center';
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, len, points, ref, ref1, res, round, w;
  parseQuery();
  document.title = title;
  if (players.length < 4) {
    showHelp();
    return;
  }
  if (players.length === R + 1) {
    rounds = makeBerger(players.length);
  } else {
    rounds = makeFairPair(R);
  }
  echo(rounds);
  points = Array(players.length).fill(0);
  echo('results', results);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += MAX - parseInt(res[j]);
      }
    }
  }
  echo('points', points);
  showPlayers(title, points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVyZ2VyLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJiZXJnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLFdBQUEsRUFBQSxvQkFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsa0JBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsb0JBQUEsRUFBQSxpQkFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBO0VBQUE7O0FBQUEsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFFQSxJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUNmLEtBQUEsR0FBUSxDQUFDLENBQUMsTUFKVjs7O0FBT0EsTUFBQSxHQUFTOztBQUVULEtBQUEsR0FBUTs7QUFDUixHQUFBLEdBQU07O0FBQ04sT0FBQSxHQUFVOztBQUNWLENBQUEsR0FBSTs7QUFFSixPQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTLEdBZlQ7O0FBZ0JBLE9BQUEsR0FBVSxHQWhCVjs7QUFrQkEsaUJBQUEsR0FBb0IsQ0FBQSxFQWxCcEI7O0FBb0JBLG9CQUFBLEdBQXVCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFDdkIsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUMsSUFBQSxHQUFPO0VBQ1AsS0FBUywwQkFBVDtJQUNDLElBQUEsR0FBTyxDQUFDLENBQUMsSUFBRjs7QUFBUTtNQUFBLEtBQUEscUNBQUE7O3NCQUFBLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FB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R0FBQSxHQUFNLE9BQU8sQ0FBQyxDQUFEO0lBQ2IsS0FBQSxHQUFRLE1BQU0sQ0FBQyxDQUFEO0lBQ2QsS0FBQSxVQUFBO01BQU8sQ0FBQyxDQUFELEVBQUksQ0FBSjtNQUNOLFdBQUcsR0FBRyxDQUFDLENBQUQsZ0JBQU8sU0FBVixVQUFIO1FBQ0MsTUFBTSxDQUFDLENBQUQsQ0FBTixJQUFhLFFBQUEsQ0FBUyxHQUFHLENBQUMsQ0FBRCxDQUFaO1FBQ2IsTUFBTSxDQUFDLENBQUQsQ0FBTixJQUFhLEdBQUEsR0FBTSxRQUFBLENBQVMsR0FBRyxDQUFDLENBQUQsQ0FBWixFQUZwQjs7SUFERDtFQUhEO0VBUUEsSUFBQSxDQUFLLFFBQUwsRUFBYyxNQUFkO0VBRUEsV0FBQSxDQUFZLEtBQVosRUFBbUIsTUFBbkI7RUFDQSxVQUFBLENBQVcsTUFBTSxDQUFDLENBQUQsQ0FBTixJQUFhLEVBQXhCLEVBQTRCLENBQTVCO1NBRUEsb0JBQUEsQ0FBQTtBQTlCTTs7QUFnQ1AsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbGF5ZXJ9IGZyb20gJy4vcGxheWVyLmpzJ1xyXG5pbXBvcnQge0ZhaXJQYWlyfSBmcm9tICcuL2ZhaXJwYWlyLmpzJ1xyXG5cclxuZWNobyA9IGNvbnNvbGUubG9nXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5cclxuIyBET01BSU4gPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTUwMFwiXHJcbkRPTUFJTiA9IFwiaHR0cHM6Ly9jaHJpc3Rlcm5pbHNzb24uZ2l0aHViLmlvLzIwMjUvMDEzLUJlcmdlclwiXHJcblxyXG50aXRsZSA9ICdCZXJnZXJ0dXJuZXJpbmcnXHJcbk1BWCA9IDJcclxuUkVTVUxUUyA9ICcwMTInXHJcblIgPSAwXHJcblxyXG5wbGF5ZXJzID0gW11cclxucm91bmRzID0gW10gIyB2ZW0gbcO2dGVyIHZlbT8gW3csYl1cclxucmVzdWx0cyA9IFtdICMgWycwMTJ4eCcsICcyMjIxMCddIFZpdHNwZWxhcm5hcyByZXN1bHRhdCBpIHZhcmplIHJvbmRcclxuXHJcbnNvcnRlcmluZ3NPcmRuaW5nID0ge31cdCMgU3BhcmEgcGVyIGtvbHVtblxyXG5cclxuZmluZE51bWJlck9mRGVjaW1hbHMgPSAobHN0KSAtPlxyXG5cdGJlc3QgPSAwXHJcblx0Zm9yIGkgaW4gWzAuLjZdXHJcblx0XHR1bmlrID0gXy51bmlxIChpdGVtLnRvRml4ZWQoaSkgZm9yIGl0ZW0gaW4gbHN0KVxyXG5cdFx0aWYgdW5pay5sZW5ndGggPiBiZXN0IHRoZW4gW2Jlc3QsaWJlc3RdID0gW3VuaWsubGVuZ3RoLGldXHJcblx0aWJlc3RcclxuXHJcbnNrYXBhU29ydGVyaW5nc2tsaWNrID0gLT5cclxuXHJcblx0dGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI2JlcmdlcnRhYmVsbCB0aCdcclxuXHJcblx0I2VjaG8gdGhzXHJcblx0aW5kZXggPSAtMVxyXG5cdGZvciB0aCBpbiB0aHNcclxuXHRcdGluZGV4ICs9IDFcclxuXHRcdGRvICh0aCxpbmRleCkgLT5cclxuXHRcdFx0dGguYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAoZXZlbnQpIC0+XHJcblx0XHRcdFx0a2V5ID0gdGgudGV4dENvbnRlbnRcclxuXHRcdFx0XHRpZiAhaXNOYU4gcGFyc2VJbnQga2V5XHJcblx0XHRcdFx0XHRrZXkgPSBwYXJzZUludChrZXkpIC0gMSBcclxuXHRcdFx0XHRcdHNob3dUYWJsZXMgcm91bmRzW2tleV0gb3IgW10sIGtleVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciAnI2JlcmdlcnRhYmVsbCB0Ym9keSdcclxuXHRcdFx0XHRyYWRlciA9IEFycmF5LmZyb20gdGJvZHkucXVlcnlTZWxlY3RvckFsbCAndHInXHJcblx0XHRcdFx0c3RpZ2FuZGUgPSBrZXkgaW4gXCIjIE5hbW5cIi5zcGxpdCAnICdcclxuXHJcblx0XHRcdFx0cmFkZXIuc29ydCAoYSwgYikgLT5cclxuXHRcdFx0XHRcdGNlbGxBID0gYS5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblx0XHRcdFx0XHRjZWxsQiA9IGIuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cclxuXHRcdFx0XHRcdCMgRsO2cnPDtmsgasOkbWbDtnJhIHNvbSB0YWwsIGFubmFycyBzb20gdGV4dFxyXG5cdFx0XHRcdFx0bnVtQSA9IHBhcnNlSW50IGNlbGxBXHJcblx0XHRcdFx0XHRudW1CID0gcGFyc2VJbnQgY2VsbEJcclxuXHRcdFx0XHRcdGlmICFpc05hTihudW1BKSBhbmQgIWlzTmFOKG51bUIpXHJcblx0XHRcdFx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIG51bUEgLSBudW1CIGVsc2UgbnVtQiAtIG51bUFcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGlmIHN0aWdhbmRlIHRoZW4gY2VsbEEubG9jYWxlQ29tcGFyZSBjZWxsQiBlbHNlIGNlbGxCLmxvY2FsZUNvbXBhcmUgY2VsbEFcclxuXHJcblx0XHRcdFx0IyBMw6RnZyB0aWxsYmFrYSByYWRlcm5hIGkgc29ydGVyYWQgb3JkbmluZ1xyXG5cdFx0XHRcdGZvciByYWQgaW4gcmFkZXJcclxuXHRcdFx0XHRcdHRib2R5LmFwcGVuZENoaWxkIHJhZFxyXG5cclxuc3VtbWEgPSAoYXJyKSAtPlxyXG5cdHJlcyA9IDBcclxuXHRmb3IgaXRlbSBpbiBhcnJcclxuXHRcdHJlcyArPSBpdGVtXHJcblx0cmVzXHJcblxyXG5leHBlY3RlZF9zY29yZSA9IChyYXRpbmdzLCBvd25fcmF0aW5nKSAtPiBzdW1tYSAoMSAvICgxICsgMTAqKigocmF0aW5nIC0gb3duX3JhdGluZykgLyA0MDApKSBmb3IgcmF0aW5nIGluIHJhdGluZ3MpXHJcblxyXG5wZXJmb3JtYW5jZV9yYXRpbmcgPSAocHAsIHJhdGluZ3MpIC0+XHJcblx0bG8gPSAwXHJcblx0aGkgPSA0MDAwXHJcblx0d2hpbGUgTWF0aC5hYnMoaGkgLSBsbykgPiAwLjAwMVxyXG5cdFx0cmF0aW5nID0gKGxvICsgaGkpIC8gMlxyXG5cdFx0aWYgcHAgPiBleHBlY3RlZF9zY29yZSByYXRpbmdzLCByYXRpbmdcclxuXHRcdFx0bG8gPSByYXRpbmdcclxuXHRcdGVsc2VcclxuXHRcdFx0aGkgPSByYXRpbmdcclxuXHRyYXRpbmdcclxuIFxyXG4jIFVzZSB0d28gZXh0cmVtZSB2YWx1ZXMgd2hlbiBjYWxjdWxhdGluZyAwJSBvciAxMDAlXHJcbmV4dHJhcG9sYXRlID0gKGEwLCBiMCwgZWxvcykgLT5cclxuXHRhID0gcGVyZm9ybWFuY2VfcmF0aW5nIGEwLGVsb3NcclxuXHRiID0gcGVyZm9ybWFuY2VfcmF0aW5nIGIwLGVsb3NcclxuXHRiICsgYiAtIGFcclxuXHJcbnBlcmZvcm1hbmNlID0gKHBwLGVsb3MpIC0+IFxyXG5cdG4gPSBlbG9zLmxlbmd0aFxyXG5cdGlmIG4gPT0gMVxyXG5cdFx0aWYgcHAgPT0gMCB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSAwLjUwLDAuMjUsZWxvc1xyXG5cdFx0aWYgcHAgPT0gbiB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSAwLjUwLDAuNzUsZWxvc1xyXG5cdGVsc2VcclxuXHRcdGlmIHBwID09IDAgdGhlbiByZXR1cm4gZXh0cmFwb2xhdGUgICAxLCAgMC41LGVsb3NcclxuXHRcdGlmIHBwID09IG4gdGhlbiByZXR1cm4gZXh0cmFwb2xhdGUgbi0xLG4tMC41LGVsb3NcclxuXHRwZXJmb3JtYW5jZV9yYXRpbmcgcHAsZWxvc1xyXG5cclxuc2FmZUdldCA9IChwYXJhbXMsa2V5LHN0YW5kYXJkPVwiXCIpIC0+IFxyXG5cdGlmIHBhcmFtcy5nZXQga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQga2V5IFxyXG5cdGlmIHBhcmFtcy5nZXQgJyAnICsga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQgJyAnICsga2V5XHJcblx0c3RhbmRhcmRcclxuXHJcbnBhcnNlUXVlcnkgPSAtPlxyXG5cdHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxyXG5cclxuXHR0aXRsZSA9IHNhZmVHZXQgcGFyYW1zLCBcInRpdGxlXCJcclxuXHRNQVggPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJNQVhcIiwgXCIyXCJcclxuXHRSRVNVTFRTID0gJzAxMjM0NTY3OCcuc2xpY2UgMCwgTUFYICsgMVxyXG5cdFIgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJSXCIsICcwJ1xyXG5cdFxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHBlcnNvbnMgPSBwYXJhbXMuZ2V0QWxsIFwicFwiXHJcblx0cGVyc29ucy5zb3J0KCkucmV2ZXJzZSgpXHJcblx0Zm9yIHAgaW4gcGVyc29uc1xyXG5cdFx0ZWxvID0gcGFyc2VJbnQgcC5zbGljZSAwLDRcclxuXHRcdG5hbWUgPSBwLnNsaWNlKDQpLnRyaW0oKVxyXG5cdFx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgcGxheWVycy5sZW5ndGgsIG5hbWUsIGVsb1xyXG5cdGVjaG8gcGxheWVyc1xyXG5cclxuXHRyZXN1bHRzID0gW11cclxuXHQjIGlmIFIgPT0gMCB0aGVuIG4gPSBwbGF5ZXJzLmxlbmd0aCAtIDEgZWxzZSBuID0gUlxyXG5cdGVjaG8gJ1InLFJcclxuXHRmb3IgaSBpbiByYW5nZSBSXHJcblx0XHRyZXN1bHRzLnB1c2ggc2FmZUdldCBwYXJhbXMsIFwiciN7aSsxfVwiLCBcInhcIi5yZXBlYXQgcGxheWVycy5sZW5ndGggLyAyXHJcblx0ZWNobyByZXN1bHRzXHJcblxyXG5zYXZlUGFpcmluZyA9IChyLCBBLCBoYWxmLCBuKSAtPlxyXG5cdGxzdCA9IGlmIHIgJSAyID09IDEgdGhlbiBbW0FbbiAtIDFdLCBBWzBdXV0gZWxzZSBbW0FbMF0sIEFbbiAtIDFdXV1cclxuXHRmb3IgaSBpbiBbMS4uLmhhbGZdXHJcblx0XHRsc3QucHVzaCBbQVtpXSwgQVtuIC0gMSAtIGldXVxyXG5cdGxzdFxyXG5cclxubWFrZUJlcmdlciA9IChuKSAtPlxyXG5cdGlmIG4gJSAyID09IDEgdGhlbiBuICs9IDFcclxuXHRoYWxmID0gbiAvLyAyIFxyXG5cdEEgPSBbMC4uLm5dXHJcblx0cm91bmRzID0gW11cclxuXHRmb3IgaSBpbiBbMC4uLm4tMV1cclxuXHRcdHJvdW5kcy5wdXNoKHNhdmVQYWlyaW5nKGksIEEsIGhhbGYsIG4pKVxyXG5cdFx0QS5wb3AoKVxyXG5cdFx0QSA9IEEuc2xpY2UoaGFsZikuY29uY2F0IEEuc2xpY2UoMCxoYWxmKVxyXG5cdFx0QS5wdXNoKG4tMSlcclxuXHRyb3VuZHNcclxuXHJcbm1ha2VGYWlyUGFpciA9IChuKSAtPlxyXG5cdGZhaXJwYWlyID0gbmV3IEZhaXJQYWlyIHBsYXllcnMsIFJcclxuXHJcblx0Zm9yIHAgaW4gZmFpcnBhaXIucGxheWVyc1xyXG5cdFx0ZWNobyBwLm9wcCxwLmNvbCxwLmJhbGFucygpXHJcblxyXG5cdGVjaG8gXCJcIiBcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcGxheWVycy5sZW5ndGhcclxuXHRcdGxpbmUgPSBmYWlycGFpci5tYXRyaXhbaV1cclxuXHRcdGVjaG8gaSUxMCArICcgICAnICsgbGluZS5qb2luKCcgICAnKSArICcgICcgKyBwbGF5ZXJzW2ldLmVsb1xyXG5cclxuXHRlY2hvICdzdW1tYScsIGZhaXJwYWlyLnN1bW1hXHJcblx0ZmFpcnBhaXIucm91bmRzXHRcclxuXHJcbnNob3dIZWxwID0gLT5cclxuXHR1cmwgPSBbXVxyXG5cdHVybC5wdXNoIFwiI3tET01BSU59Lz90aXRsZT1Kb3Vrb3MgU29tbWFyIDIwMjVcIlxyXG5cdHVybC5wdXNoIFwiJk1BWD0yXCJcclxuXHR1cmwucHVzaCBcIiZSPTlcIlxyXG5cclxuXHR1cmwucHVzaCBcIiZwPTE2OTggT25uaSBBaWtpb1wiXHJcblx0dXJsLnB1c2ggXCImcD0xNTU4IEhlbGdlIEJlcmdzdHLDtm1cIlxyXG5cdHVybC5wdXNoIFwiJnA9MTU0OSBKb25hcyBIw7ZrXCJcclxuXHR1cmwucHVzaCBcIiZwPTE2NzkgTGFycyBKb2hhbnNzb25cIlxyXG5cdHVybC5wdXNoIFwiJnA9MDAwMCBQZXIgRXJpa3Nzb25cIlxyXG5cdHVybC5wdXNoIFwiJnA9MTY1MyBDaHJpc3RlciBOaWxzc29uXCJcclxuXHR1cmwucHVzaCBcIiZwPTE2NzMgUGVyIEhhbW5zdHLDtm1cIlxyXG5cdHVybC5wdXNoIFwiJnA9MTUwNCBUaG9tYXMgUGF1bGluXCJcclxuXHR1cmwucHVzaCBcIiZwPTE3MDYgQWJiYXMgUmF6YXZpXCJcclxuXHR1cmwucHVzaCBcIiZwPTE1NzkgSm91a28gTGlpc3RhbW9cIlxyXG5cclxuXHR1cmwucHVzaCBcIiZyMT0weHh4MlwiXHJcblx0dXJsLnB1c2ggXCImcjI9eDB4MHhcIlxyXG5cdHVybC5wdXNoIFwiJnIzPTAwMngwXCJcclxuXHR1cmwucHVzaCBcIiZyND14MDAxMFwiXHJcblx0dXJsLnB1c2ggXCImcjU9eHgyMjJcIlxyXG5cdHVybC5wdXNoIFwiJnI2PXh4eDF4XCJcclxuXHR1cmwucHVzaCBcIiZyNz0xeDAwMlwiXHJcblx0dXJsLnB1c2ggXCImcjg9MjIweDBcIlxyXG5cdHVybC5wdXNoIFwiJnI5PTAyMDB4XCJcclxuXHJcblx0IyB1cmwucHVzaCBcIiZwPTE2OTggT25uaSBBaWtpb1wiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE1NTggSGVsZ2UgQmVyZ3N0csO2bVwiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE1NDkgSm9uYXMgSMO2a1wiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE2NzkgTGFycyBKb2hhbnNzb25cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0wMDAwIFBlciBFcmlrc3NvblwiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE2NTMgQ2hyaXN0ZXIgTmlsc3NvblwiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE2NzMgUGVyIEhhbW5zdHLDtm1cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0xNTA0IFRob21hcyBQYXVsaW5cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0xNzA2IEFiYmFzIFJhemF2aVwiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE1NzkgSm91a28gTGlpc3RhbW9cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0xNzk4IEFpa2lvXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTY1OCBCZXJnc3Ryw7ZtXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTY0OSBIw7ZrXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTc3OSBKb2hhbnNzb25cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0wMDAwIEVyaWtzc29uXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTc1MyBOaWxzc29uXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTc3MyBIYW1uc3Ryw7ZtXCJcclxuXHQjIHVybC5wdXNoIFwiJnA9MTYwNCBQYXVsaW5cIlxyXG5cdCMgdXJsLnB1c2ggXCImcD0xODA2IFJhemF2aVwiXHJcblx0IyB1cmwucHVzaCBcIiZwPTE2NzkgTGlpc3RhbW9cIlxyXG5cclxuXHQjIHVybC5wdXNoIFwiJnIxPTAxMjAxMjAxMjBcIlxyXG5cdCMgdXJsLnB1c2ggXCImcjI9MDEyMDEyMDEyMFwiXHJcblx0IyB1cmwucHVzaCBcIiZyMz0wMTIwMTIwMTIwXCJcclxuXHQjIHVybC5wdXNoIFwiJnI0PTAxMjAxMjAxMjBcIlxyXG5cdCMgdXJsLnB1c2ggXCImcjU9MDEyMDEyMDEyMFwiXHJcblx0IyB1cmwucHVzaCBcIiZyNj0wMTIwMTIwMTIwXCJcclxuXHQjIHVybC5wdXNoIFwiJnI3PTAxMjAxMjAxMjBcIlxyXG5cclxuXHRoZWxwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnZGl2J1xyXG5cdGhlbHAuY2xhc3NOYW1lID0gJ2hlbHAnXHJcblx0aGVscC5pbm5lckhUTUwgPSBcIjxwPkV4ZW1wZWw6PC9wPjxwcmU+I3t1cmwuam9pbiBcIlxcblwifTwvcHJlPlwiXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JlcmdlcicpLmFwcGVuZENoaWxkIGhlbHBcclxuXHJcblx0bGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2EnXHJcblx0bGluay5ocmVmID0gdXJsLmpvaW4gJydcclxuXHRsaW5rLnRleHQgPSBcIkV4ZW1wZWxcIlxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXJnZXInKS5hcHBlbmRDaGlsZCBsaW5rXHJcblxyXG5zaG93UGxheWVycyA9ICh0aXRsZSwgcG9pbnRzKSAtPlxyXG5cclxuXHRoMiA9ICBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdoMidcclxuXHRoMi50ZXh0Q29udGVudCA9IHRpdGxlXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JlcmdlcicpLmFwcGVuZENoaWxkIGgyXHJcblxyXG5cdHRibCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXJnZXJ0YWJlbGwnKVxyXG5cclxuXHR0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RoZWFkJ1xyXG5cdHRibC5hcHBlbmRDaGlsZCB0aGVhZFxyXG5cdGVjaG8gdGJsXHJcblxyXG5cdHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGgnXHJcblx0dGgudGV4dENvbnRlbnQgPSBcIiNcIlxyXG5cdHRoZWFkLmFwcGVuZENoaWxkIHRoXHJcblxyXG5cdHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGgnXHJcblx0dGgudGV4dENvbnRlbnQgPSBcIk5hbW5cIlxyXG5cdHRoZWFkLmFwcGVuZENoaWxkIHRoXHJcblxyXG5cdHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGgnXHJcblx0dGgudGV4dENvbnRlbnQgPSBcIkVsb1wiXHJcblx0dGhlYWQuYXBwZW5kQ2hpbGQgdGhcclxuXHJcblx0Zm9yIGkgaW4gWzAuLi5yb3VuZHMubGVuZ3RoXVxyXG5cdFx0dGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0aCdcclxuXHRcdHRoLnRleHRDb250ZW50ID0gXCIje2krMX1cIlxyXG5cdFx0dGhlYWQuYXBwZW5kQ2hpbGQgdGhcclxuXHJcblx0dGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0aCdcclxuXHR0aC50ZXh0Q29udGVudCA9IFwiUG/DpG5nXCJcclxuXHR0aGVhZC5hcHBlbmRDaGlsZCB0aFxyXG5cclxuXHR0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RoJ1xyXG5cdHRoLnRleHRDb250ZW50ID0gXCJQUlwiXHJcblx0dGhlYWQuYXBwZW5kQ2hpbGQgdGhcclxuXHJcblx0Zm9yIHAsIGkgaW4gcGxheWVyc1xyXG5cdFx0cm93ID0gdGJsLmluc2VydFJvdygpXHJcblx0XHRyb3cuaW5zZXJ0Q2VsbCgpLnRleHRDb250ZW50ID0gaSArIDFcclxuXHJcblx0XHRjZWxsID0gcm93Lmluc2VydENlbGwoKVxyXG5cdFx0Y2VsbC50ZXh0Q29udGVudCA9IHAubmFtZVxyXG5cdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCdcclxuXHJcblx0XHRvcHBFbG9zID0gW11cclxuXHRcdHBvaW50c1BSID0gMFxyXG5cdFx0cm93Lmluc2VydENlbGwoKS50ZXh0Q29udGVudCA9IHAuZWxvXHJcblxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0XHRjZWxsID0gcm93Lmluc2VydENlbGwoKVxyXG5cdFx0XHR0YWJsZUluZGV4ID0gcm91bmRzW3JdLmZpbmRJbmRleCgoW3csIGJdKSAtPiB3ID09IGkgb3IgYiA9PSBpKVxyXG5cdFx0XHRpZiB0YWJsZUluZGV4ID09IC0xIHRoZW4gY29udGludWVcclxuXHRcdFx0cmVzdWx0ID0gcmVzdWx0c1tyXT9bdGFibGVJbmRleF0gIyBvciBcIlwiXHJcblx0XHRcdCNyZXN1bHQgPSByZXN1bHQucmVwbGFjZSBcInhcIiwgXCJcIlxyXG5cclxuXHRcdFx0W3csIGJdID0gcm91bmRzW3JdW3RhYmxlSW5kZXhdXHJcblx0XHRcdG9wcG9uZW50ID0gaWYgdyA9PSBpIHRoZW4gYiBlbHNlIHdcclxuXHJcblx0XHRcdGlmIHJlc3VsdCBpbiBSRVNVTFRTXHJcblx0XHRcdFx0aWYgdyA9PSBpXHJcblx0XHRcdFx0XHRyZXN1bHQgPSBwYXJzZUludCByZXN1bHQgXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmVzdWx0ID0gTUFYIC0gcGFyc2VJbnQgcmVzdWx0IFxyXG5cclxuXHRcdFx0XHRpZiByZXN1bHQudG9TdHJpbmcoKSBpbiBSRVNVTFRTIGFuZCBwbGF5ZXJzW29wcG9uZW50XS5lbG8gIT0gMFxyXG5cdFx0XHRcdFx0b3BwRWxvcy5wdXNoIHBsYXllcnNbb3Bwb25lbnRdLmVsb1xyXG5cdFx0XHRcdFx0cG9pbnRzUFIgKz0gcGFyc2VJbnQgcmVzdWx0XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXN1bHQgPSBcIlwiXHJcblx0XHRcdFx0IyBpZiBpID09IGIgYW5kIHJlc3VsdCAhPSBcIlwiIHRoZW4gcmVzdWx0ID0gTUFYIC0gcGFyc2VJbnQgcmVzdWx0XHJcblxyXG5cdFx0XHRpZiBpID09IHcgdGhlbiBhID0gXCJyaWdodDotN3B4XCIgZWxzZSBhID0gXCJsZWZ0Oi03cHhcIlxyXG5cclxuXHRcdFx0aHRtbCA9IFwiXCJcclxuXHRcdFx0aHRtbCArPSBcIjxkaXYgc3R5bGU9J3Bvc2l0aW9uOmFic29sdXRlOyB0b3A6LTE3cHg7ICN7YX07IGZvbnQtc2l6ZTowLjdlbTsnPiN7b3Bwb25lbnQgKyAxfTwvZGl2PlwiXHJcblx0XHRcdGh0bWwgKz0gXCI8ZGl2IHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOi00cHg7ICAgICAgICBmb250LXNpemU6MS4wZW07Jz4je3Jlc3VsdH08L2Rpdj5cIlxyXG5cdFx0XHRjZWxsLmlubmVySFRNTCA9IFwiPGRpdiBzdHlsZT0ncG9zaXRpb246cmVsYXRpdmU7Jz5cIiArIGh0bWwgKyBcIjwvZGl2PlwiXHJcblxyXG5cdFx0ZWNobyBpLG9wcEVsb3MscG9pbnRzUFIscC5uYW1lXHJcblx0XHRjZWxsID0gcm93Lmluc2VydENlbGwoKVxyXG5cdFx0Y2VsbC50ZXh0Q29udGVudCA9IHBvaW50c1tpXVxyXG5cdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnXHJcblx0XHRyb3cuaW5zZXJ0Q2VsbCgpLnRleHRDb250ZW50ID0gcGVyZm9ybWFuY2UgcG9pbnRzUFIvTUFYLCBvcHBFbG9zXHJcblxyXG5cdCMgU8OkdHQgYW50YWwgZGVjaW1hbGVyIGbDtnIgUFJcclxuXHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNiZXJnZXJ0YWJlbGwgdGJvZHknXHJcblx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cdGxzdCA9IChwYXJzZUZsb2F0IHJhZC5jaGlsZHJlbltyYWQuY2hpbGRyZW4ubGVuZ3RoLTFdLnRleHRDb250ZW50IGZvciByYWQgaW4gcmFkZXIpXHJcblx0ZGVjaW1hbHMgPSBmaW5kTnVtYmVyT2ZEZWNpbWFscyBsc3RcclxuXHRmb3IgcmFkIGluIHJhZGVyXHJcblx0XHRfLmxhc3QocmFkLmNoaWxkcmVuKS50ZXh0Q29udGVudCA9IHBhcnNlRmxvYXQoXy5sYXN0KHJhZC5jaGlsZHJlbikudGV4dENvbnRlbnQpLnRvRml4ZWQgZGVjaW1hbHNcclxuXHJcbnByZXR0aWZ5ID0gKGNoKSAtPlxyXG5cdGlmIGNoIGluIFJFU1VMVFMgdGhlbiByZXR1cm4gXCIje2NofSAtICN7TUFYIC0gY2h9XCJcclxuXHRcIi1cIlxyXG5cclxuc2hvd1RhYmxlcyA9IChyb3VuZHMsIHNlbGVjdGVkUm91bmQpIC0+XHJcblx0aWYgcm91bmRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblxyXG5cdHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnaDInXHJcblx0dGl0bGUudGV4dENvbnRlbnQgPSBcIkJvcmRzbGlzdGEgZsO2ciByb25kICN7c2VsZWN0ZWRSb3VuZCsxfVwiXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlcycpLmlubmVySFRNTCA9ICcnXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlcycpLmFwcGVuZENoaWxkIHRpdGxlXHJcblxyXG5cdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGFibGUnXHJcblx0dGFibGUuaWQgPSAnYm9yZHRhYmVsbCdcclxuXHJcblx0aGVhZGVyID0gdGFibGUuaW5zZXJ0Um93KClcclxuXHRoZWFkZXIuaW5uZXJIVE1MID0gXCI8dGg+Qm9yZDwvdGg+PHRoPlZpdDwvdGg+PHRoPlN2YXJ0PC90aD48dGg+I3tSRVNVTFRTfTwvdGg+XCJcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICd0cidcclxuXHRcdFt3LCBiXSA9IHJvdW5kc1tpXVxyXG5cdFx0dml0ID0gcGxheWVyc1t3XT8ubmFtZSBvciBcIlwiXHJcblx0XHRzdmFydCA9IHBsYXllcnNbYl0/Lm5hbWUgb3IgXCJcIlxyXG5cclxuXHRcdHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGQnXHJcblx0XHR0ZC50ZXh0Q29udGVudCA9IFwiI3tpICsgMX1cIlxyXG5cdFx0dHIuYXBwZW5kQ2hpbGQgdGRcclxuXHJcblx0XHR0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RkJ1xyXG5cdFx0dGQudGV4dENvbnRlbnQgPSB2aXRcclxuXHRcdHRkLnN0eWxlLnRleHRBbGlnbiA9ICdsZWZ0J1xyXG5cdFx0dHIuYXBwZW5kQ2hpbGQgdGRcclxuXHJcblx0XHR0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RkJ1xyXG5cdFx0dGQudGV4dENvbnRlbnQgPSBzdmFydFxyXG5cdFx0dGQuc3R5bGUudGV4dEFsaWduID0gJ2xlZnQnXHJcblx0XHR0ci5hcHBlbmRDaGlsZCB0ZFxyXG5cclxuXHRcdHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGQnXHJcblx0XHR0ZC50ZXh0Q29udGVudCA9IHByZXR0aWZ5IHJlc3VsdHNbc2VsZWN0ZWRSb3VuZF1baV1cclxuXHRcdHRkLnN0eWxlLmFsaWduID0gJ2NlbnRlcidcclxuXHRcdHRyLmFwcGVuZENoaWxkIHRkXHJcblxyXG5cdFx0dGFibGUuYXBwZW5kQ2hpbGQgdHJcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGVzJykuYXBwZW5kQ2hpbGQgdGFibGVcclxuXHJcbm1haW4gPSAtPlxyXG5cdHBhcnNlUXVlcnkoKVxyXG5cdGRvY3VtZW50LnRpdGxlID0gdGl0bGVcclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPCA0XHJcblx0XHRzaG93SGVscCgpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPT0gUiArIDFcclxuXHRcdHJvdW5kcyA9IG1ha2VCZXJnZXIocGxheWVycy5sZW5ndGgpXHJcblx0ZWxzZVxyXG5cdFx0cm91bmRzID0gbWFrZUZhaXJQYWlyIFJcclxuXHJcblx0ZWNobyByb3VuZHNcclxuXHRwb2ludHMgPSBBcnJheShwbGF5ZXJzLmxlbmd0aCkuZmlsbCgwKVxyXG5cclxuXHRlY2hvICdyZXN1bHRzJyxyZXN1bHRzXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcmVzdWx0cy5sZW5ndGhcclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJvdW5kID0gcm91bmRzW2ldXHJcblx0XHRmb3IgaiwgW3csIGJdIG9mIHJvdW5kXHJcblx0XHRcdGlmIHJlc1tqXSBpbiBSRVNVTFRTXHJcblx0XHRcdFx0cG9pbnRzW3ddICs9IHBhcnNlSW50IHJlc1tqXVxyXG5cdFx0XHRcdHBvaW50c1tiXSArPSBNQVggLSBwYXJzZUludCByZXNbal1cclxuXHJcblx0ZWNobyAncG9pbnRzJyxwb2ludHNcclxuXHJcblx0c2hvd1BsYXllcnMgdGl0bGUsIHBvaW50c1xyXG5cdHNob3dUYWJsZXMgcm91bmRzWzBdIG9yIFtdLCAwXHJcblxyXG5cdHNrYXBhU29ydGVyaW5nc2tsaWNrKClcclxuXHJcbm1haW4oKVxyXG4iXX0=
//# sourceURL=c:\github\2025\013-Berger\berger.coffee