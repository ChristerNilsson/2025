// Generated by CoffeeScript 2.7.0
var DOMAIN_GLOBAL, DOMAIN_LOCAL, GAMES, R, RESULTS, TITLE, TYPE, a, div, echo, findNumberOfDecimals, h2, main, makeBerger, makeFairPair, p, parseQuery, players, pre, prettify, range, results, rounds, roundsContent, safeGet, savePairing, showHelp, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning, table, td, th, thead, tr, wrap,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  bergerText,
  fairpairText,
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

echo = console.log;

range = _.range;

DOMAIN_LOCAL = "http://127.0.0.1:5500";

DOMAIN_GLOBAL = "https://christernilsson.github.io/2025/013-Berger";

TITLE = 'Bergerturnering';

GAMES = 2;

RESULTS = '012';

TYPE = 'Berger';

R = 0;

players = [];

rounds = []; // vem möter vem? [w,b]

results = []; // ['012xx', '22210'] Vitspelarnas resultat i varje rond

sorteringsOrdning = {}; // Spara per kolumn

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var index, k, len, results1, th, ths;
  ths = document.querySelectorAll('#bergertabell th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    th = ths[k];
    index += 1;
    results1.push((function(th, index) {
      return th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#bergertabell tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var elo, i, k, l, len, len1, name, p, params, persons, ref, results1;
  params = new URLSearchParams(window.location.search);
  TITLE = safeGet(params, "TITLE");
  GAMES = parseInt(safeGet(params, "GAMES", "1"));
  RESULTS = '012345678'.slice(0, 2 * GAMES + 1);
  TYPE = safeGet(params, "TYPE", 'Berger');
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    p = persons[k];
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  R = parseInt(safeGet(params, "R", players.length - 1));
  results = [];
  ref = range(R);
  results1 = [];
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    results1.push(results.push(safeGet(params, `r${i + 1}`, "x".repeat(players.length / 2))));
  }
  return results1;
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function() {
  var A, half, i, k, n, ref;
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, k, len, line, ref;
  fairpair = new FairPair(players, R, GAMES);
  echo("");
  ref = range(players.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  return fairpair.rounds;
};

wrap = function(type, attr, ...b) {
  b = b.join("");
  if (attr === '') {
    return `<${type}>${b}</${type}>`;
  } else {
    return `<${type} ${attr}>${b}</${type}>`;
  }
};

table = function(attr, ...b) {
  return wrap('table', attr, ...b);
};

thead = function(attr, ...b) {
  return wrap('thead', attr, ...b);
};

th = function(attr, ...b) {
  return wrap('th', attr, ...b);
};

tr = function(attr, ...b) {
  return wrap('tr', attr, ...b);
};

td = function(attr, ...b) {
  return wrap('td', attr, ...b);
};

a = function(attr, b) {
  return wrap('a', attr, b);
};

div = function(attr, ...b) {
  return wrap('div', attr, ...b);
};

pre = function(attr, ...b) {
  return wrap('pre', attr, ...b);
};

p = function(attr, ...b) {
  return wrap('p', attr, ...b);
};

h2 = function(attr, ...b) {
  return wrap('h2', attr, ...b);
};

showHelp = function() {
  var result;
  result = div("", div('class="help"', pre("", helpText)), p("", a(`href=\"${DOMAIN_GLOBAL + bergerText}\"`, 'Berger')), p("", a(`href=\"${DOMAIN_LOCAL + bergerText}\"`, 'Berger dev')), div('class="help"', pre("", bergerText)), p("", a(`href=\"${DOMAIN_GLOBAL + fairpairText}\"`, 'FairPair')), p("", a(`href=\"${DOMAIN_LOCAL + fairpairText}\"`, 'FairPair dev')), div('class="help"', pre("", fairpairText)));
  return document.getElementById('berger').innerHTML = result;
};

roundsContent = function(points, i) { // rondernas data + poäng + PR
  var b, cell, k, len, oppElos, opponent, pointsPR, r, ref, ref1, ref2, result, ronder, tableIndex, w;
  ronder = [];
  oppElos = [];
  pointsPR = 0;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    tableIndex = rounds[r].findIndex(function([w, b]) {
      return w === i || b === i;
    });
    if (tableIndex === -1) {
      continue;
    }
    result = (ref1 = results[r]) != null ? ref1[tableIndex] : void 0;
    [w, b] = rounds[r][tableIndex];
    opponent = w === i ? b : w;
    if (indexOf.call(RESULTS, result) >= 0) {
      if (w === i) {
        result = parseInt(result);
      } else {
        result = 2 * GAMES - parseInt(result);
      }
      if ((ref2 = result.toString(), indexOf.call(RESULTS, ref2) >= 0) && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
        pointsPR += parseInt(result);
      }
    } else {
      result = "";
    }
    if (i === w) {
      a = "right:0px;";
    } else {
      a = "left:0px;";
    }
    cell = td('style="position:relative;"', div('style="position:absolute; top:0px;' + a + 'font-size:0.7em;"', opponent + 1), div('style="position:absolute; top:12px;          font-size:1.1em;"', result));
    ronder.push(cell);
  }
  ronder.push(td('style="text-align:right"', points[i]));
  ronder.push(td('', performance(pointsPR / (2 * GAMES), oppElos)));
  return ronder.join("");
};

showPlayers = function(points) {
  var decimals, i, k, l, len, len1, lst, rad, rader, result, results1, rows, tbody, value;
  rows = [];
  for (i = k = 0, len = players.length; k < len; i = ++k) {
    p = players[i];
    rows.push(tr("", td("", i + 1), td('style="text-align:left;"', p.name), td("", p.elo), roundsContent(points, i)));
  }
  result = div("", h2("", TITLE), table("", thead("", th("", "#"), th('', "Namn"), th("", "Elo"), ((function() {
    var l, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results1.push(th("", `${i + 1}`));
    }
    return results1;
  })()).join(""), th("", "P"), th("", "PR")), rows.join("")));
  document.getElementById('bergertabell').innerHTML = result;
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#bergertabell tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var l, len1, results1;
    results1 = [];
    for (l = 0, len1 = rader.length; l < len1; l++) {
      rad = rader[l];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  echo(lst, decimals);
  results1 = [];
  for (l = 0, len1 = rader.length; l < len1; l++) {
    rad = rader[l];
    value = parseFloat(_.last(rad.children).textContent);
    echo(value);
    value = value > 3999 ? "" : value.toFixed(decimals);
    results1.push(_.last(rad.children).textContent = value);
  }
  return results1;
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${2 * GAMES - ch}`;
  }
  return "-";
};

showTables = function(rounds, selectedRound) {
  var b, i, k, len, ref, ref1, ref2, result, rows, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    rows += tr("", td("", i + 1), td('style="text-align:left"', vit), td('style="text-align:left"', svart), td('style="text-align:center"', prettify(results[selectedRound][i]))); //= document.createElement 'td' // = document.createElement 'td'
  }
  result = div("", h2("", `Bordslista för rond ${selectedRound + 1}`), table("", thead("", th("", "Bord"), th("", "Vit"), th("", "Svart"), th("", `${RESULTS}`)), rows));
  return document.getElementById('tables').innerHTML = result;
};

main = function() {
  var b, i, j, k, len, points, ref, ref1, res, round, w;
  parseQuery();
  document.title = TITLE;
  if (players.length < 4) {
    showHelp();
    return;
  }
  if (TYPE === 'Berger') {
    R = players.length - 1;
    rounds = makeBerger();
  } else {
    rounds = makeFairPair();
  }
  points = Array(players.length).fill(0);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += 2 * GAMES - parseInt(res[j]);
      }
    }
  }
  showPlayers(points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\berger.coffee