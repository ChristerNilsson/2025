// Generated by CoffeeScript 2.7.0
var DOMAIN_GLOBAL, DOMAIN_LOCAL, GAMES, R, RESULTS, TITLE, TYPE, echo, findNumberOfDecimals, main, makeBerger, makeFairPair, parseQuery, players, prettify, range, results, rounds, safeGet, savePairing, showHelp, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  bergerText,
  fairpairText,
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

echo = console.log;

range = _.range;

DOMAIN_LOCAL = "http://127.0.0.1:5500";

DOMAIN_GLOBAL = "https://christernilsson.github.io/2025/013-Berger";

TITLE = 'Bergerturnering';

GAMES = 2;

RESULTS = '012';

TYPE = 'Berger';

R = 0;

players = [];

rounds = []; // vem möter vem? [w,b]

results = []; // ['012xx', '22210'] Vitspelarnas resultat i varje rond

sorteringsOrdning = {}; // Spara per kolumn

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, unik;
  best = 0;
  for (i = k = 0; k <= 6; i = ++k) {
    unik = _.uniq((function() {
      var l, len, results1;
      results1 = [];
      for (l = 0, len = lst.length; l < len; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var index, k, len, results1, th, ths;
  ths = document.querySelectorAll('#bergertabell th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    th = ths[k];
    index += 1;
    results1.push((function(th, index) {
      return th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#bergertabell tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var elo, i, k, l, len, len1, name, p, params, persons, ref, results1;
  params = new URLSearchParams(window.location.search);
  TITLE = safeGet(params, "TITLE");
  GAMES = parseInt(safeGet(params, "GAMES", "1"));
  RESULTS = '012345678'.slice(0, 2 * GAMES + 1);
  TYPE = safeGet(params, "TYPE", 'Berger');
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    p = persons[k];
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  R = parseInt(safeGet(params, "R", players.length - 1));
  //echo 'R',R
  results = [];
  ref = range(R);
  //echo 'R',R
  results1 = [];
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    results1.push(results.push(safeGet(params, `r${i + 1}`, "x".repeat(players.length / 2))));
  }
  return results1;
};

//echo results
savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function() {
  var A, half, i, k, n, ref;
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, k, l, len, len1, line, p, ref, ref1;
  //echo 'R',R
  fairpair = new FairPair(players, R, GAMES);
  ref = fairpair.players;
  for (k = 0, len = ref.length; k < len; k++) {
    p = ref[k];
    echo(p.opp, p.col, p.balans());
  }
  echo("");
  ref1 = range(players.length);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  echo(fairpair.rounds);
  return fairpair.rounds;
};

showHelp = function() {
  var divnode, exempel, help, link;
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<pre>${helpText}</pre>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = DOMAIN_GLOBAL + bergerText;
  link.text = "Berger";
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  divnode.appendChild(link);
  link = document.createElement('a');
  link.href = DOMAIN_LOCAL + bergerText;
  link.text = "Berger dev";
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  divnode.appendChild(link);
  exempel = document.createElement('div');
  exempel.className = 'help';
  exempel.innerHTML = `<pre>${bergerText}</pre>`;
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  divnode.appendChild(exempel);
  link = document.createElement('a');
  link.href = DOMAIN_GLOBAL + fairpairText;
  link.text = "FairPair";
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  divnode.appendChild(link);
  link = document.createElement('a');
  link.href = DOMAIN_LOCAL + fairpairText;
  link.text = "FairPair dev";
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  divnode.appendChild(link);
  exempel = document.createElement('div');
  exempel.className = 'help';
  exempel.innerHTML = `<pre>${fairpairText}</pre>`;
  divnode = document.getElementById('berger').appendChild(document.createElement('p'));
  return divnode.appendChild(exempel);
};

showPlayers = function(points) {
  var a, b, cell, decimals, h2, html, i, k, l, len, len1, len2, lst, m, o, oppElos, opponent, p, pointsPR, r, rad, rader, ref, ref1, ref2, ref3, result, results1, row, tableIndex, tbl, tbody, th, thead, w;
  //echo rounds
  h2 = document.createElement('h2');
  h2.textContent = TITLE;
  document.getElementById('berger').appendChild(h2);
  tbl = document.getElementById('bergertabell');
  thead = document.createElement('thead');
  tbl.appendChild(thead);
  //echo tbl
  th = document.createElement('th');
  th.textContent = "#";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Namn";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Elo";
  thead.appendChild(th);
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    th = document.createElement('th');
    th.textContent = `${i + 1}`;
    thead.appendChild(th);
  }
  th = document.createElement('th');
  th.textContent = "Poäng";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "PR";
  thead.appendChild(th);
  for (i = l = 0, len = players.length; l < len; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    oppElos = [];
    pointsPR = 0;
    row.insertCell().textContent = p.elo;
    ref1 = range(rounds.length);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      r = ref1[m];
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      result = (ref2 = results[r]) != null ? ref2[tableIndex] : void 0;
      //result = result.replace "x", ""
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      if (indexOf.call(RESULTS, result) >= 0) {
        if (w === i) {
          result = parseInt(result);
        } else {
          result = 2 * GAMES - parseInt(result);
        }
        if ((ref3 = result.toString(), indexOf.call(RESULTS, ref3) >= 0) && players[opponent].elo !== 0) {
          oppElos.push(players[opponent].elo);
          pointsPR += parseInt(result);
        }
      } else {
        result = "";
      }
      // if i == b and result != "" then result = 2 * GAMES - parseInt result
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px; ${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;        font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    //echo i,oppElos,pointsPR,p.name
    cell = row.insertCell();
    cell.textContent = points[i];
    cell.style.textAlign = 'right';
    row.insertCell().textContent = performance(pointsPR / (2 * GAMES), oppElos);
  }
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#bergertabell tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var len2, o, results1;
    results1 = [];
    for (o = 0, len2 = rader.length; o < len2; o++) {
      rad = rader[o];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (o = 0, len2 = rader.length; o < len2; o++) {
    rad = rader[o];
    results1.push(_.last(rad.children).textContent = parseFloat(_.last(rad.children).textContent).toFixed(decimals));
  }
  return results1;
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${2 * GAMES - ch}`;
  }
  return "-";
};

showTables = function(rounds, selectedRound) {
  var b, header, i, k, len, ref, ref1, ref2, svart, table, td, title, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  table.id = 'bordtabell';
  header = table.insertRow();
  header.innerHTML = `<th>Bord</th><th>Vit</th><th>Svart</th><th>${RESULTS}</th>`;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = prettify(results[selectedRound][i]);
    td.style.align = 'center';
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, len, points, ref, ref1, res, round, w;
  parseQuery();
  document.title = TITLE;
  if (players.length < 4) {
    showHelp();
    return;
  }
  if (TYPE === 'Berger') {
    R = players.length - 1;
    rounds = makeBerger();
  } else {
    rounds = makeFairPair();
  }
  //	echo rounds
  points = Array(players.length).fill(0);
  ref = range(results.length);
  //	echo 'results',results
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += 2 * GAMES - parseInt(res[j]);
      }
    }
  }
  //	echo 'points',points
  showPlayers(points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\berger.coffee