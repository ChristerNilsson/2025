// Generated by CoffeeScript 2.7.0
var echo, main, makeBerger, parseQuery, rotate, showBerger, showHelp, showTables;

echo = console.log;

// Bergerturnering - CoffeeScript
rotate = function(arr, n = 1) {
  var len;
  len = arr.length;
  n = ((n % len) + len) % len;
  return arr.slice(n).concat(arr.slice(0, n));
};

parseQuery = function() {
  var elo, i, k, l, match, name, p, params, players, r, ref, results, selectedRound;
  params = new URLSearchParams(window.location.search);
  players = [];
  for (i = k = 1; k <= 20; i = ++k) {
    p = params.get(`p${i}`);
    if (p == null) {
      break;
    }
    match = p.match(/(\d+)\s*(.*)/);
    if (match) {
      elo = parseInt(match[1]);
      name = match[2].trim();
      players.push({
        elo,
        name,
        index: i - 1
      });
    }
  }
  results = [];
  for (i = l = 1, ref = players.length - 1; (1 <= ref ? l <= ref : l >= ref); i = 1 <= ref ? ++l : --l) {
    r = params.get(`r${i}`);
    if (r == null) {
      break;
    }
    results.push(r);
  }
  selectedRound = parseInt(params.get("r")) - 1 || 0;
  return {players, results, selectedRound};
};

makeBerger = function(n) {
  var a, b, current, fixed, half, i, k, l, list, r, ref, ref1, rotating, round, rounds;
  rounds = [];
  list = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  if (n % 2 === 1) {
    list.push(null);
    n += 1;
  }
  fixed = list[0];
  rotating = list.slice(1);
  for (r = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); r = 0 <= ref ? ++k : --k) {
    current = [fixed].concat(rotate(rotating, r));
    round = [];
    half = n / 2;
    for (i = l = 0, ref1 = half; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
      a = current[i];
      b = current[n - 1 - i];
      if ((a != null) && (b != null)) {
        if (i === 0) {
          if (r % 2 === 0) {
            round.push([a, b]);
          } else {
            round.push([b, a]);
          }
        } else {
          if (i % 2 === 0) {
            round.push([a, b]);
          } else {
            round.push([b, a]);
          }
        }
      }
    }
    rounds.push(round);
  }
  echo('makeBerger', rounds);
  return rounds;
};

showHelp = function() {
  var help, link, url;
  url = "?p1=1698 Onni Aikio";
  url += "&p2=1558 Helge Bergström";
  url += "&p3=1549 Jonas Hök";
  url += "&p4=1679 Lars Johansson";
  url += "&p5=0000 Per Eriksson";
  url += "&p6=1653 Christer Nilsson";
  url += "&p7=1673 Per Hamnström";
  url += "&p8=1504 Thomas Paulin";
  url += "&p9=1706 Abbas Razavi";
  url += "&p10=1579 Jouko Liistamo";
  url += "&r1=11111";
  url += "&r2=00000";
  url += "&r3=rrrrr";
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<p>Exempel:</p><code>${url}</code>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = url;
  link.text = "Exempel";
  return document.getElementById('berger').appendChild(link);
};

showBerger = function(players, rounds, results, points) {
  var a, b, cell, header, html, i, k, l, len1, m, opponent, p, r, ref, ref1, ref2, result, row, tableIndex, tbl, w;
  tbl = document.createElement('table');
  header = tbl.insertRow();
  header.innerHTML = '<th>#</th><th>Namn</th><th>Elo</th>';
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    cell = document.createElement('th');
    cell.textContent = `${i + 1}`;
    (function(i) {
      return cell.addEventListener('click', function() {
        echo(`Du klickade på rond ${i + 1}`);
        return showTables(rounds[i] || [], players, i);
      });
    })(i);
    header.appendChild(cell);
  }
  cell = document.createElement('th');
  cell.textContent = "Poäng";
  header.appendChild(cell);
  for (i = l = 0, len1 = players.length; l < len1; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    row.insertCell().textContent = p.elo;
    for (r = m = 0, ref1 = rounds.length; (0 <= ref1 ? m < ref1 : m > ref1); r = 0 <= ref1 ? ++m : --m) {
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      //color = if w == i then '' else '*'
      result = ((ref2 = results[r]) != null ? ref2[tableIndex] : void 0) || "";
      result = result.replace("r", "½");
      result = result.replace("x", "");
      if (i === b && result !== "" && result !== "½") {
        result = result === '0' ? '1' : '0';
      }
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px;      ${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;  left:-2px; font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    row.insertCell().textContent = points[i];
  }
  return document.getElementById('berger').appendChild(tbl);
};

showTables = function(rounds, players, selectedRound) {
  var b, i, k, ref, ref1, ref2, svart, table, td, title, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = "-";
    td.style.align = 'center';
    td.width = "50px";
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, players, points, ref, res, results, round, rounds, selectedRound, val, w;
  document.title = "Joukos sommarturnering 2025";
  ({players, results, selectedRound} = parseQuery());
  echo(players);
  echo(results);
  echo(selectedRound);
  if (players.length < 4) {
    showHelp();
    return;
  }
  rounds = makeBerger(players.length);
  points = Array(players.length).fill(0);
  for (i = k = 0, ref = results.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      val = res[j] || '';
      switch (val) {
        case '1':
          points[w] += 1;
          break;
        case '0':
          points[b] += 1;
          break;
        case 'r':
          points[w] += 0.5;
          points[b] += 0.5;
      }
    }
  }
  showBerger(players, rounds, results, points);
  return showTables(rounds[selectedRound] || [], players, selectedRound);
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\berger.coffee