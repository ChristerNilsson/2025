// Generated by CoffeeScript 2.7.0
var echo, expected_score, extrapolate, main, makeKarpidisBerger, parseQuery, performance, performance_rating, prettify, safeGet, savePairing, showBerger, showHelp, showTables, summa,
  indexOf = [].indexOf;

echo = console.log;

summa = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

expected_score = function(ratings, own_rating) {
  var rating;
  return summa((function() {
    var k, len, results1;
    results1 = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results1.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results1;
  })());
};

performance_rating = function(pp, ratings) {
  var hi, lo, rating;
  lo = 0;
  hi = 4000;
  while (Math.abs(hi - lo) > 0.001) {
    rating = (lo + hi) / 2;
    if (pp > expected_score(ratings, rating)) {
      lo = rating;
    } else {
      hi = rating;
    }
  }
  return rating;
};


// Use two extreme values when calculating 0% or 100%
extrapolate = function(a0, b0, elos) {
  var a, b;
  a = performance_rating(a0, elos);
  b = performance_rating(b0, elos);
  return b + b - a;
};

performance = function(pp, elos) {
  var n;
  n = elos.length;
  if (n === 1) {
    if (pp === 0) {
      return extrapolate(0.50, 0.25, elos);
    }
    if (pp === n) {
      return extrapolate(0.50, 0.75, elos);
    }
  } else {
    if (pp === 0) {
      return extrapolate(1, 0.5, elos);
    }
    if (pp === n) {
      return extrapolate(n - 1, n - 0.5, elos);
    }
  }
  return performance_rating(pp, elos);
};

safeGet = function(params, key) {
  if (params.get(key)) {
    return params.get(key);
  } else {
    return params.get(' ' + key);
  }
};

parseQuery = function() {
  var elo, i, k, l, name, p, params, players, r, ref, results, title;
  params = new URLSearchParams(window.location.search);
  // echo params.toString()
  // echo window.location.search
  title = safeGet(params, "title");
  players = [];
  for (i = k = 1; k <= 20; i = ++k) {
    p = safeGet(params, `p${i}`);
    if (p == null) {
      break;
    }
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push({
      elo,
      name,
      index: i - 1
    });
  }
  results = [];
  for (i = l = 1, ref = players.length - 1; (1 <= ref ? l <= ref : l >= ref); i = 1 <= ref ? ++l : --l) {
    r = safeGet(params, `r${i}`);
    results.push(r != null ? r : "x" * players.length / 2);
  }
  return {players, results, title};
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeKarpidisBerger = function(n) {
  var A, half, i, k, ref, rounds;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

showHelp = function() {
  var help, link, url;
  url = [];
  url.push("http://127.0.0.1:5500/?title=Joukos Sommar 2025");
  url.push("&p1=1698 Onni Aikio");
  url.push("&p2=1558 Helge Bergström");
  url.push("&p3=1549 Jonas Hök");
  url.push("&p4=1679 Lars Johansson");
  url.push("&p5=0000 Per Eriksson");
  url.push("&p6=1653 Christer Nilsson");
  url.push("&p7=1673 Per Hamnström");
  url.push("&p8=1504 Thomas Paulin");
  url.push("&p9=1706 Abbas Razavi");
  url.push("&p10=1579 Jouko Liistamo");
  url.push("&r1=101x1");
  url.push("&r2=0r010");
  url.push("&r3=10011");
  url.push("&r4=10001");
  url.push("&r5=01111");
  url.push("&r7=xx1xx");
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<p>Exempel:</p><pre>${url.join("\n")}</pre>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = url.join('');
  link.text = "Exempel";
  return document.getElementById('berger').appendChild(link);
};

showBerger = function(title, players, rounds, results, points) {
  var a, b, cell, h2, header, html, i, k, l, len, m, oppElos, opponent, p, r, ref, ref1, ref2, result, row, tableIndex, tbl, w;
  h2 = document.createElement('h2');
  h2.textContent = title;
  document.getElementById('berger').appendChild(h2);
  tbl = document.createElement('table');
  header = tbl.insertRow();
  header.innerHTML = '<th>#</th><th>Namn</th><th>Elo</th>';
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    cell = document.createElement('th');
    cell.textContent = `${i + 1}`;
    (function(i) {
      return cell.addEventListener('click', function() {
        echo(`Du klickade på rond ${i + 1}`);
        return showTables(rounds[i] || [], players, i, results);
      });
    })(i);
    header.appendChild(cell);
  }
  cell = document.createElement('th');
  cell.textContent = "Poäng";
  header.appendChild(cell);
  cell = document.createElement('th');
  cell.textContent = "PR";
  header.appendChild(cell);
  for (i = l = 0, len = players.length; l < len; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    oppElos = [];
    row.insertCell().textContent = p.elo;
    for (r = m = 0, ref1 = rounds.length; (0 <= ref1 ? m < ref1 : m > ref1); r = 0 <= ref1 ? ++m : --m) {
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      //color = if w == i then '' else '*'
      result = ((ref2 = results[r]) != null ? ref2[tableIndex] : void 0) || "";
      result = result.replace("r", "½");
      result = result.replace("x", "");
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      if (indexOf.call('0½1', result) >= 0 && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
      }
      if (i === b && result !== "" && result !== "½") {
        result = result === '0' ? '1' : '0';
      }
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px;			${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;	left:-2px; font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    row.insertCell().textContent = points[i].toFixed(1);
    row.insertCell().textContent = performance(points[i], oppElos).toFixed(0);
  }
  return document.getElementById('berger').appendChild(tbl);
};

prettify = function(ch) {
  if (ch === '1') {
    return "1 - 0";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === 'r') {
    return "½ - ½";
  }
  return "-";
};

showTables = function(rounds, players, selectedRound, results) {
  var b, header, i, k, ref, ref1, ref2, svart, table, td, title, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  header = table.insertRow();
  header.innerHTML = '<th>Bord</th><th>Vit</th><th>Svart</th><th>Resultat</th>';
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = prettify(results[selectedRound][i]);
    td.style.align = 'center';
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, players, points, ref, res, results, round, rounds, title, val, w;
  ({players, results, title} = parseQuery());
  document.title = title;
  if (players.length < 4) {
    showHelp();
    return;
  }
  rounds = makeKarpidisBerger(players.length);
  echo(rounds);
  points = Array(players.length).fill(0);
  for (i = k = 0, ref = results.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      val = res[j] || '';
      switch (val) {
        case '1':
          points[w] += 1;
          break;
        case '0':
          points[b] += 1;
          break;
        case 'r':
          points[w] += 0.5;
          points[b] += 0.5;
      }
    }
  }
  showBerger(title, players, rounds, results, points);
  return showTables(rounds[0] || [], players, 0, results);
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\berger.coffee