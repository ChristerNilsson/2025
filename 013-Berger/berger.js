// Generated by CoffeeScript 2.7.0
var DOMAIN, MAX, Player, RESULTS, echo, expected_score, extrapolate, findNumberOfDecimals, main, makeBerger, parseQuery, performance, performance_rating, players, prettify, range, results, rounds, safeGet, savePairing, showBerger, showHelp, showTables, skapaSorteringsklick, sorteringsOrdning, summa, title,
  indexOf = [].indexOf;

echo = console.log;

range = _.range;

DOMAIN = "http://127.0.0.1:5500";

//DOMAIN = "https://christernilsson.github.io/2025/013-Berger"
title = 'Bergerturnering';

MAX = 2;

RESULTS = '012';

players = [];

rounds = []; // vem möter vem? [w,b]

results = []; // ['012xx', '22210'] Vitspelarnas resultat i varje rond

sorteringsOrdning = {}; // Spara per kolumn

Player = class Player {
  constructor(id, name1, elo1) {
    this.id = id;
    this.name = name1;
    this.elo = elo1;
    this.opp = [];
    this.col = "";
  }

  balans() {
    var ch, k, len, ref, result;
    result = 0;
    ref = this.col;
    for (k = 0, len = ref.length; k < len; k++) {
      ch = ref[k];
      if (ch === 'w') {
        result += 1;
      }
      if (ch === 'b') {
        result -= 1;
      }
    }
    return result;
  }

};

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, unik;
  best = 0;
  for (i = k = 0; k <= 6; i = ++k) {
    unik = _.uniq((function() {
      var l, len, results1;
      results1 = [];
      for (l = 0, len = lst.length; l < len; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var index, k, len, results1, th, ths;
  ths = document.querySelectorAll('#bergertabell th');
  echo(ths);
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    th = ths[k];
    index += 1;
    results1.push((function(th, index) {
      return th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#bergertabell tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(th, index));
  }
  return results1;
};

summa = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

expected_score = function(ratings, own_rating) {
  var rating;
  return summa((function() {
    var k, len, results1;
    results1 = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results1.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results1;
  })());
};

performance_rating = function(pp, ratings) {
  var hi, lo, rating;
  lo = 0;
  hi = 4000;
  while (Math.abs(hi - lo) > 0.001) {
    rating = (lo + hi) / 2;
    if (pp > expected_score(ratings, rating)) {
      lo = rating;
    } else {
      hi = rating;
    }
  }
  return rating;
};


// Use two extreme values when calculating 0% or 100%
extrapolate = function(a0, b0, elos) {
  var a, b;
  a = performance_rating(a0, elos);
  b = performance_rating(b0, elos);
  return b + b - a;
};

performance = function(pp, elos) {
  var n;
  n = elos.length;
  if (n === 1) {
    if (pp === 0) {
      return extrapolate(0.50, 0.25, elos);
    }
    if (pp === n) {
      return extrapolate(0.50, 0.75, elos);
    }
  } else {
    if (pp === 0) {
      return extrapolate(1, 0.5, elos);
    }
    if (pp === n) {
      return extrapolate(n - 1, n - 0.5, elos);
    }
  }
  return performance_rating(pp, elos);
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key);
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key);
  }
  return standard;
};

parseQuery = function() {
  var R, elo, i, k, l, len, len1, n, name, p, params, persons, ref, results1;
  params = new URLSearchParams(window.location.search);
  title = safeGet(params, "title");
  MAX = parseInt(safeGet(params, "MAX", "2"));
  RESULTS = '012345678'.slice(0, MAX + 1);
  R = parseInt(safeGet(params, "R", '0'));
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    p = persons[k];
    elo = parseInt(p.slice(0, 4));
    name = p.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  echo(players);
  results = [];
  if (R === 0) {
    n = players.length - 1;
  } else {
    n = R;
  }
  ref = range(n);
  results1 = [];
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    results1.push(results.push(safeGet(params, `r${i + 1}`, "x" * players.length / 2)));
  }
  return results1;
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function(n) {
  var A, half, i, k, ref;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  for (i = k = 0, ref = n - 1; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

showHelp = function() {
  var help, link, url;
  url = [];
  url.push(`${DOMAIN}/?title=Joukos Sommar 2025`);
  url.push("&MAX=2");
  url.push("&p=1698 Onni Aikio");
  url.push("&p=1558 Helge Bergström");
  url.push("&p=1549 Jonas Hök");
  url.push("&p=1679 Lars Johansson");
  url.push("&p=0000 Per Eriksson");
  url.push("&p=1653 Christer Nilsson");
  url.push("&p=1673 Per Hamnström");
  url.push("&p=1504 Thomas Paulin");
  url.push("&p=1706 Abbas Razavi");
  url.push("&p=1579 Jouko Liistamo");
  url.push("&r1=0xxx2");
  url.push("&r2=x0x0x");
  url.push("&r3=002x0");
  url.push("&r4=x0010");
  url.push("&r5=xx222");
  url.push("&r6=xxx1x");
  url.push("&r7=1x002");
  url.push("&r8=220x0");
  url.push("&r9=0200x");
  help = document.createElement('div');
  help.className = 'help';
  help.innerHTML = `<p>Exempel:</p><pre>${url.join("\n")}</pre>`;
  document.getElementById('berger').appendChild(help);
  link = document.createElement('a');
  link.href = url.join('');
  link.text = "Exempel";
  return document.getElementById('berger').appendChild(link);
};

showBerger = function(title, points) {
  var a, b, cell, decimals, h2, html, i, k, l, len, len1, len2, lst, m, o, oppElos, opponent, p, r, rad, rader, ref, ref1, ref2, result, results1, row, tableIndex, tbl, tbody, th, thead, w;
  h2 = document.createElement('h2');
  h2.textContent = title;
  document.getElementById('berger').appendChild(h2);
  tbl = document.getElementById('bergertabell');
  thead = document.createElement('thead');
  tbl.appendChild(thead);
  echo(tbl);
  th = document.createElement('th');
  th.textContent = "#";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Namn";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "Elo";
  thead.appendChild(th);
  for (i = k = 0, ref = rounds.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    th = document.createElement('th');
    th.textContent = `${i + 1}`;
    thead.appendChild(th);
  }
  th = document.createElement('th');
  th.textContent = "Poäng";
  thead.appendChild(th);
  th = document.createElement('th');
  th.textContent = "PR";
  thead.appendChild(th);
  for (i = l = 0, len = players.length; l < len; i = ++l) {
    p = players[i];
    row = tbl.insertRow();
    row.insertCell().textContent = i + 1;
    cell = row.insertCell();
    cell.textContent = p.name;
    cell.style.textAlign = 'left';
    oppElos = [];
    row.insertCell().textContent = p.elo;
    ref1 = range(rounds.length);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      r = ref1[m];
      cell = row.insertCell();
      tableIndex = rounds[r].findIndex(function([w, b]) {
        return w === i || b === i;
      });
      if (tableIndex === -1) {
        continue;
      }
      result = ((ref2 = results[r]) != null ? ref2[tableIndex] : void 0) || "";
      result = result.replace("x", "");
      [w, b] = rounds[r][tableIndex];
      opponent = w === i ? b : w;
      if (indexOf.call(RESULTS, result) >= 0 && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
      }
      if (i === b && result !== "") {
        result = MAX - parseInt(result);
      }
      if (i === w) {
        a = "right:-7px";
      } else {
        a = "left:-7px";
      }
      html = "";
      html += `<div style='position:absolute; top:-17px; ${a}; font-size:0.7em;'>${opponent + 1}</div>`;
      html += `<div style='position:absolute; top:-4px;        font-size:1.0em;'>${result}</div>`;
      cell.innerHTML = "<div style='position:relative;'>" + html + "</div>";
    }
    cell = row.insertCell();
    cell.textContent = points[i];
    cell.style.textAlign = 'right';
    row.insertCell().textContent = performance(points[i] / MAX, oppElos);
  }
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#bergertabell tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var len2, o, results1;
    results1 = [];
    for (o = 0, len2 = rader.length; o < len2; o++) {
      rad = rader[o];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (o = 0, len2 = rader.length; o < len2; o++) {
    rad = rader[o];
    results1.push(_.last(rad.children).textContent = parseFloat(_.last(rad.children).textContent).toFixed(decimals));
  }
  return results1;
};

prettify = function(ch) {
  if (indexOf.call(RESULTS, ch) >= 0) {
    return `${ch} - ${MAX - ch}`;
  }
  return "-";
};

showTables = function(rounds, selectedRound) {
  var b, header, i, k, len, ref, ref1, ref2, svart, table, td, tr, vit, w;
  if (rounds.length === 0) {
    return;
  }
  title = document.createElement('h2');
  title.textContent = `Bordslista för rond ${selectedRound + 1}`;
  document.getElementById('tables').innerHTML = '';
  document.getElementById('tables').appendChild(title);
  table = document.createElement('table');
  table.id = 'bordtabell';
  header = table.insertRow();
  header.innerHTML = `<th>Bord</th><th>Vit</th><th>Svart</th><th>${RESULTS}</th>`;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    tr = document.createElement('tr');
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    td = document.createElement('td');
    td.textContent = `${i + 1}`;
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = vit;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = svart;
    td.style.textAlign = 'left';
    tr.appendChild(td);
    td = document.createElement('td');
    td.textContent = prettify(results[selectedRound][i]);
    td.style.align = 'center';
    tr.appendChild(td);
    table.appendChild(tr);
  }
  return document.getElementById('tables').appendChild(table);
};

main = function() {
  var b, i, j, k, len, points, ref, ref1, res, round, w;
  parseQuery();
  document.title = title;
  if (players.length < 4) {
    showHelp();
    return;
  }
  rounds = makeBerger(players.length);
  echo(rounds);
  points = Array(players.length).fill(0);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += parseInt(res[j]);
        points[b] += MAX - parseInt(res[j]);
      }
    }
  }
  showBerger(title, points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\berger.coffee