// Generated by CoffeeScript 2.7.0
  // ½
var GAMES, RESULTS, ROUNDS, TITLE, aaa, alignCenter, alignLeft, alignRight, bbb, display, echo, expand, findNumberOfDecimals, frirond, listify, main, makeBerger, makeFairPair, parseQuery, parseTextarea, players, prettify, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, showInfo, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

TITLE = '';

GAMES = 0;

ROUNDS = 0;

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

display = 3; // both

frirond = -1; // ingen frirond

sorteringsOrdning = {}; // Spara per kolumn

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

skapaSorteringsklick = function() {
  var _th, index, k, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    _th = ths[k];
    index += 1;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(rounds[key] || [], key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var LOG2, N, elo, k, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  TITLE = safeGet(params, "TITLE");
  GAMES = parseInt(safeGet(params, "GAMES", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  for (k = 0, len = persons.length; k < len; k++) {
    person = persons[k];
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(elo, name);
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = -1;
  }
  ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  echo({TITLE, GAMES, ROUNDS});
  N = players.length;
  LOG2 = Math.ceil(Math.log2(N));
  if (ROUNDS === N - 1) {

  } else if (ROUNDS < LOG2) {
    return alert(`Too few ROUNDS! Minimum is ${LOG2}`);
  }
};

// else if ROUNDS >= N then alert "Too many ROUNDS! Maximum is #{N-1}"
listify = function(s) {
  var ch, k, len, results1;
// omvandla "r01x1" till [1,0,2,-1,2] 
  results1 = [];
  for (k = 0, len = s.length; k < len; k++) {
    ch = s[k];
    results1.push('0r1'.indexOf(ch));
  }
  return results1;
};

console.assert(_.isEqual([0, 1, 2, -1, 2], listify('0r1x1')));

parseTextarea = function() {
  var k, key, l, len, len1, len2, line, lines, m, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo(raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        TITLE = val;
      }
      if (key === 'GAMES') {
        GAMES = val;
      }
      if (key === 'ROUNDS') {
        ROUNDS = val;
      }
      if (key[0] === 'r') {
        rounds.push(val);
      }
    } else {
      players.push(line);
    }
  }
  //url = 'http://127.0.0.1:5501'
  url = '/';
  url += `?TITLE=${TITLE}`;
  if (GAMES) {
    url += `&GAMES=${GAMES}`;
  }
  url += `&ROUNDS=${ROUNDS}`;
  for (l = 0, len1 = players.length; l < len1; l++) {
    player = players[l];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (m = 0, len2 = ref.length; m < len2; m++) {
    r = ref[m];
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  return lst;
};

makeBerger = function() {
  var A, half, i, k, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(ROUNDS);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, k, len, line, ref;
  fairpair = new FairPair(players, ROUNDS, GAMES);
  echo("");
  ref = range(players.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  // echo 'FAIRPAIR', fairpair.rounds
  return fairpair.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(points, i) { // rondernas data + poäng + PR
  var attr, b, cell, k, len, oppElos, opponent, pointsPR, r, ref, ref1, result, ronder, tableIndex, w;
  ronder = [];
  oppElos = [];
  pointsPR = 0;
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    tableIndex = rounds[r].findIndex(function([w, b]) {
      return w === i || b === i;
    });
    if (tableIndex === -1) {
      continue;
    }
    result = (ref1 = results[r]) != null ? ref1[tableIndex] : void 0;
    [w, b] = rounds[r][tableIndex];
    opponent = w === i ? b : w;
    if (indexOf.call(RESULTS, result) >= 0) {
      if (i === b) {
        result = 2 - result;
      }
      if ((result === 0 || result === 1 || result === 2) && players[opponent].elo !== 0) {
        oppElos.push(players[opponent].elo);
        pointsPR += result;
      }
    } else {
      result = "";
    }
    if (i === w) {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;" + attr + "font-size:0.7em;"
    }, opponent + 1), div({
      style: "position:absolute; top:12px; transform: translate(-10%, -10%); font-size:1.1em;"
    }, "0½1"[result]));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, points[i].toFixed(1)));
  ronder.push(td({}, performance(pointsPR / 2, oppElos)));
  return ronder.join("");
};

showPlayers = function(points) {
  var decimals, i, k, l, len, len1, lst, player, rad, rader, result, results1, rows, tbody, value;
  rows = [];
  for (i = k = 0, len = players.length; k < len; i = ++k) {
    player = players[i];
    rows.push(tr({}, td({}, i + 1), td(alignLeft, player.name), td({}, player.elo), roundsContent(points, i)));
  }
  result = div({}, h2({}, TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var l, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results1.push(th({}, `${i + 1}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  document.getElementById('stallning').innerHTML = result;
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var l, len1, results1;
    results1 = [];
    for (l = 0, len1 = rader.length; l < len1; l++) {
      rad = rader[l];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (l = 0, len1 = rader.length; l < len1; l++) {
    rad = rader[l];
    value = parseFloat(_.last(rad.children).textContent);
    value = value > 3999 ? "" : value.toFixed(decimals);
    results1.push(_.last(rad.children).textContent = value);
  }
  return results1;
};

prettify = function(ch) {
  if (ch === 'x') {
    return " - ";
  } else {
    return `${'0½1'[ch]} - ${'0½1'[2 - ch]}`;
  }
};

console.assert("0 - 1" === prettify('0'));

console.assert("½ - ½" === prettify('1'));

console.assert("1 - 0" === prettify('2'));

console.assert(" - " === prettify('x'));

showTables = function(rounds, selectedRound) {
  var b, i, k, len, ref, ref1, ref2, result, rows, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [w, b] = rounds[i];
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    // echo selectedRound,i,results
    rows += tr({}, td({}, i + 1), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(results[selectedRound][i])));
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + 1}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>(G${GAMES} R${ROUNDS} ${ROUNDS === players.length - 1 ? 'Berger' : 'FairPair'})`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var b, i, k, l, len, len1, lst, r, ref, ref1, res, results1, w;
  results = [];
  ref = range(GAMES * ROUNDS);
  results1 = [];
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    lst = listify(safeGet(params, `r${r + 1}`, "x".repeat(Math.floor(players.length / 2))));
    
    // echo rounds[r]
    res = [];
    ref1 = range(Math.floor(players.length / 2));
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (lst[i] === -1) {
        [w, b] = rounds[r][i];
        echo(w, b);
        if (ROUNDS === players.length - 1) {
          if (w === frirond) {
            res.push(2 * GAMES);
          } else if (b === frirond) {
            res.push(0);
          } else {
            res.push(lst[i]);
          }
        } else {
          if (b === frirond) {
            res.push(2 * GAMES);
          } else if (w === frirond) {
            res.push(0);
          } else {
            res.push(lst[i]);
          }
        }
      } else {
        res.push(lst[i]);
      }
    }
    results1.push(results.push(res));
  }
  return results1;
};

// echo res

// for ch in safeGet params, "r#{r+1}", "x".repeat players.length // 2 
// if frirond == -1
// 	s = 
// 	results.push listify s
// else
// 	s = safeGet params, "r#{r+1}", "x".repeat players.length // 2
// 	results.push listify s
expand = function(rounds) {
  var b, k, len, result, round, w;
  result = [];
  for (k = 0, len = rounds.length; k < len; k++) {
    round = rounds[k];
    result.push((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [w, b] = round[l];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [w, b] = round[l];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

aaa = [[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]];

bbb = expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]);

console.assert(_.isEqual(aaa, bbb));

progress = function(points) {
  var antal, k, len, point;
  antal = 0;
// echo 'progress',results
  for (k = 0, len = points.length; k < len; k++) {
    point = points[k];
    antal += point;
  }
  return ` • ${antal} av ${ROUNDS * players.length}`;
};

main = function() {
  var b, i, j, k, len, params, points, ref, ref1, res, round, w;
  params = new URLSearchParams(window.location.search);
  echo(params);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  echo({ROUNDS, GAMES});
  if (ROUNDS === players.length - 1) {
    rounds = makeBerger();
    if (GAMES === 2) {
      rounds = expand(rounds);
    }
  } else {
    rounds = makeFairPair();
    if (GAMES === 2) {
      rounds = expand(rounds);
    }
  }
  readResults(params);
  points = Array(players.length).fill(0);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call(RESULTS, ref1) >= 0) {
        points[w] += 0.5 * parseInt(res[j]);
        points[b] += 0.5 * (2 - parseInt(res[j]));
      }
    }
  }
  document.title = TITLE + progress(points);
  showPlayers(points);
  showTables(rounds[0] || [], 0);
  return skapaSorteringsklick();
};

document.addEventListener('keyup', function(event) {
  var ref, ref1, ref2;
  if (ref = event.key, indexOf.call('123', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("13", ref1) >= 0) ? "table" : "none";
    return document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("23", ref2) >= 0) ? "table" : "none";
  }
});

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\tournament.coffee