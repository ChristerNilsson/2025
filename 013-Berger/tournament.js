// Generated by CoffeeScript 2.7.0
  // ½

// TODO: Change the name Berger to something better
var GAMES, RESULTS, ROUNDS, TITLE, alignCenter, alignLeft, alignRight, ass, convert, convertLong, display, echo, expand, findNumberOfDecimals, frirond, longForm, longs, main, makeBerger, makeFairPair, other, parseQuery, parseTextarea, players, prettify, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, shortForm, shorts, showInfo, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

TITLE = '';

GAMES = 0;

ROUNDS = 0;

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

display = 3; // both

frirond = null; // ingen frirond. Annars index för frironden

sorteringsOrdning = {}; // Spara per kolumn

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  echo('Assertion failed: (open the Assertion below to find the failing assertion)');
  echo('  expect', JSON.stringify(a));
  echo('  actual', JSON.stringify(b));
  return console.assert(false); // can be used to track the assert
};

ass(7, 3 + 4);

// The short Form is used to render the table list
// rounds: produced by makeBerger and makeFairPair
// results: produced by the human
shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, k, len, ref, results1;
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "F"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "x"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10rx"));

// listify = (s) -> ('0r1'.indexOf ch) for ch in s # omvandla "r01x1" till [1,0,2,-1,2] 
// ass [0,1,2,-1,2], listify '0r1x1'
convert = function(input, a, b) {
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

other = function(input) {
  return convert(input, "01FG", "1011");
};

ass('1', other('0'));

ass('r', other('r'));

ass('0', other('1'));

ass('1', other('F'));

ass('1', other('G'));

ass('x', other('x'));

longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, k, len, ref, res, result, w;
  if (rounds.length > results.length) {
    results += 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  return result.sort(function(a, b) {
    return a[0] - b[0];
  });
};

ass([[0, 11, 'w', 'F'], [1, 10, 'w', '0'], [2, 9, 'w', 'r'], [3, 8, 'w', '1'], [4, 7, 'w', '0'], [5, 6, 'w', 'r'], [6, 5, 'b', 'r'], [7, 4, 'b', '1'], [8, 3, 'b', '0'], [9, 2, 'b', 'r'], [10, 1, 'b', '1'], [11, 0, 'b', 'G']], longForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

// ass [[1,10,"0"], [2,9,"r"], [3,8,"1"], [4,7,"0"], [5,6,"r"], [0,11,"x"]], longForm [[1,10], [2,9], [3,8], [4,7], [5,6], [0,11]], "0r10rx"
prettify = function(ch) {
  if (ch === void 0) {
    return " - ";
  } else {
    return convertLong(ch, "xF0r1", "-|-|0 - 1|½ - ½|1 - 0");
  }
};

ass("0 - 1", prettify('0'));

ass("½ - ½", prettify('r'));

ass("1 - 0", prettify('1'));

ass(" - ", prettify('x'));

expand = function(rounds) { // make a double round from a single
  var b, k, len, result, round, w;
  result = [];
  for (k = 0, len = rounds.length; k < len; k++) {
    round = rounds[k];
    result.push((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [w, b] = round[l];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [w, b] = round[l];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

ass([[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]], expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]));

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

ass(0, findNumberOfDecimals([1200, 1200]));

ass(0, findNumberOfDecimals([1200, 1201]));

ass(0, findNumberOfDecimals([1200.23, 1200.23]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(3, findNumberOfDecimals([1200.23, 1200.2345]));

ass(0, findNumberOfDecimals([1200.12345, 1200.12345]));

skapaSorteringsklick = function() {
  var _th, index, k, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    _th = ths[k];
    index += 1;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key, l, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseInt(cellA);
          numB = parseInt(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (l = 0, len1 = rader.length; l < len1; l++) {
          rad = rader[l];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var LOG2, N, elo, i, k, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  TITLE = safeGet(params, "TITLE");
  GAMES = parseInt(safeGet(params, "GAMES", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  persons.sort().reverse();
  i = 0;
  echo(persons.length);
  for (k = 0, len = persons.length; k < len; k++) {
    person = persons[k];
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(i, elo, name);
    i += 1;
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  echo({TITLE, GAMES, ROUNDS});
  N = players.length;
  LOG2 = Math.ceil(Math.log2(N));
  if (ROUNDS === N - 1) {

  } else if (ROUNDS < LOG2) {
    return alert(`Too few ROUNDS! Minimum is ${LOG2}`);
  }
};

// else if ROUNDS >= N then alert "Too many ROUNDS! Maximum is #{N-1}"
parseTextarea = function() {
  var k, key, l, len, len1, len2, line, lines, m, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo(raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        TITLE = val;
      }
      if (key === 'GAMES') {
        GAMES = val;
      }
      if (key === 'ROUNDS') {
        ROUNDS = val;
      }
      if (key[0] === 'r') {
        rounds.push(val);
      }
    } else {
      players.push(line);
    }
  }
  echo(rounds);
  //url = 'http://127.0.0.1:5501'
  url = '/';
  url += `?TITLE=${TITLE}`;
  if (GAMES) {
    url += `&GAMES=${GAMES}`;
  }
  url += `&ROUNDS=${ROUNDS}`;
  for (l = 0, len1 = players.length; l < len1; l++) {
    player = players[l];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (m = 0, len2 = ref.length; m < len2; m++) {
    r = ref[m];
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst;
};

makeBerger = function() {
  var A, half, i, k, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(ROUNDS);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, k, len, line, ref;
  fairpair = new FairPair(players, ROUNDS, GAMES);
  echo("");
  ref = range(players.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line = fairpair.matrix[i];
    echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  echo('FAIRPAIR', fairpair.rounds);
  return fairpair.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(long, points, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, k, len, oppElos, opponent, pointsPR, result, ronder, w;
  ronder = [];
  oppElos = [];
  pointsPR = 0;
  for (k = 0, len = long.length; k < len; k++) {
    [w, b, color, result] = long[k];
    opponent = 1 + (w === i ? b : w);
    if (frirond && opponent === frirond + 1) {
      opponent = 'F';
    }
    result = convert(result, 'x10rFG', ' 10½11');
    if (color === 'w') {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, (points[i] / 2).toFixed(1)));
  ronder.push(td({}, performance(pointsPR / 2, oppElos)));
  return ronder.join("");
};

showPlayers = function(longs, points) { // longs lagrad som lista av spelare
  var decimals, i, k, l, len, len1, long, lst, player, rad, rader, result, results1, rows, tbody, value;
  rows = [];
  for (i = k = 0, len = longs.length; k < len; i = ++k) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + 1), td(alignLeft, player.name), td({}, player.elo), roundsContent(long, points, i)));
  }
  result = div({}, h2({}, TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var l, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results1.push(th({}, `${i + 1}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  document.getElementById('stallning').innerHTML = result;
  // Sätt antal decimaler för PR
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  lst = (function() {
    var l, len1, results1;
    results1 = [];
    for (l = 0, len1 = rader.length; l < len1; l++) {
      rad = rader[l];
      results1.push(parseFloat(rad.children[rad.children.length - 1].textContent));
    }
    return results1;
  })();
  decimals = findNumberOfDecimals(lst);
  results1 = [];
  for (l = 0, len1 = rader.length; l < len1; l++) {
    rad = rader[l];
    value = parseFloat(_.last(rad.children).textContent);
    value = value > 3999 ? "" : value.toFixed(decimals);
    results1.push(_.last(rad.children).textContent = value);
  }
  return results1;
};

showTables = function(shorts, selectedRound) {
  var b, bord, k, len, message, ref, ref1, ref2, res, result, rows, short, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (k = 0, len = ref.length; k < len; k++) {
    short = ref[k];
    [w, b, res] = short;
    vit = ((ref1 = players[w]) != null ? ref1.name : void 0) || "";
    svart = ((ref2 = players[b]) != null ? ref2.name : void 0) || "";
    echo(w, b, res, vit, svart, prettify(res));
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
    }
    rows += tr({}, td({}, bord + 1), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(res)));
    bord += 1;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + 1}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${GAMES} • R${ROUNDS} • ${ROUNDS === players.length - 1 ? 'Berger' : 'FairPair'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var k, len, n, r, ref;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(GAMES * ROUNDS);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    results.push(safeGet(params, `r${r + 1}`, "x".repeat(n)));
  }
  return echo('readResults', results);
};

progress = function(points) {
  var antal, k, len, point;
  antal = 0;
  for (k = 0, len = points.length; k < len; k++) {
    point = points[k];
    antal += point;
  }
  return ` • ${antal} av ${ROUNDS * players.length}`;
};

main = function() {
  var b, i, j, k, l, len, len1, len2, m, params, points, r, ref, ref1, ref2, ref3, res, round, score, w;
  params = new URLSearchParams(window.location.search);
  echo(params);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  echo({ROUNDS, GAMES});
  if (ROUNDS === players.length - 1) {
    rounds = makeBerger();
    if (GAMES === 2) {
      rounds = expand(rounds);
    }
  } else {
    rounds = makeFairPair();
    if (GAMES === 2) {
      rounds = expand(rounds);
    }
  }
  readResults(params);
  points = Array(players.length).fill(0);
  ref = range(results.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res = results[i];
    round = rounds[i];
    echo(res, round);
    for (j in round) {
      [w, b] = round[j];
      if (ref1 = res[j], indexOf.call("0r1", ref1) >= 0) {
        score = 0;
        if (res[j] === 'r') {
          score = 1;
        }
        if (res[j] === '1') {
          score = 2;
        }
        points[w] += score;
        points[b] += 2 - score;
      }
    }
  }
  document.title = TITLE + progress(points);
  shorts = [];
  ref2 = range(rounds.length);
  for (l = 0, len1 = ref2.length; l < len1; l++) {
    r = ref2[l];
    shorts.push(shortForm(rounds[r], results[r]));
  }
  longs = []; // innehåller alla ronderna
  ref3 = range(rounds.length);
  for (m = 0, len2 = ref3.length; m < len2; m++) {
    r = ref3[m];
    longs.push(longForm(rounds[r], results[r]));
  }
  longs = _.zip(...longs); // transponerar matrisen
  showPlayers(longs, points);
  showTables(shorts, 0);
  return skapaSorteringsklick();
};

document.addEventListener('keyup', function(event) {
  var ref, ref1, ref2;
  if (ref = event.key, indexOf.call('123', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("13", ref1) >= 0) ? "table" : "none";
    return document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("23", ref2) >= 0) ? "table" : "none";
  }
});

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-Berger\tournament.coffee