// Generated by CoffeeScript 2.7.0
var add, addLink, bests, byt, calcLoss, echo, figurine, getParam, klass, losses, makeTables, moves, params, parseMove, showBest, showLoss, state,
  indexOf = [].indexOf;

echo = console.log;

state = {
  letter: 0,
  losses: 0,
  bests: 0 // visa bättre drag
};

params = null;

moves = [];

losses = [];

bests = [];

byt = function(san, a, b) {
  var i, j, ref;
  for (i = j = 0, ref = a.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    san = san.replace(a[i], b[i]);
  }
  return san;
};

figurine = function(san) {
  if (state.letter === 1) {
    return byt(san, 'QRBN', 'DTLS');
  } else {
    return byt(san, 'DTLS', 'QRBN');
  }
};

getParam = function(name) {
  var param;
  params = new URLSearchParams(window.location.search);
  param = params.get(name);
  if (indexOf.call("moves losses bests".split(' '), name) >= 0) {
    return (param != null ? param.split("_") : void 0) || [];
  }
  return param;
};

klass = function(loss, move, best) {
  loss = Math.abs(loss);
  if (move === best) {
    return "";
  }
  if (loss < 20) {
    return "";
  }
  if (loss < 50) {
    return "•";
  }
  if (loss < 100) {
    return "••";
  }
  if (loss < 300) {
    return "•••";
  }
  return "••••";
};

parseMove = function(moveStr, chess) {
  var allMoves, j, len, m;
  allMoves = chess.moves({
    verbose: true
  });
  for (j = 0, len = allMoves.length; j < len; j++) {
    m = allMoves[j];
    if (m.san === moveStr) {
      return {
        from: m.from,
        to: m.to
      };
    }
  }
  return null;
};

add = function(tr, text, alignment = 'right') {
  var td;
  td = document.createElement("td");
  td.style = `text-align: ${alignment};`;
  td.textContent = text;
  return tr.appendChild(td);
};

addLink = function(tr, href, text, alignment = 'right') {
  var td;
  td = document.createElement("td");
  td.style = `text-align: ${alignment};`;
  td.innerHTML = `<a href='${href}'>${text}</a>`;
  return tr.appendChild(td);
};

calcLoss = function(i) {
  return losses[i];
};

showLoss = function(i) {
  if (state.losses === 0) {
    return klass(losses[i], moves[i], bests[i]);
  }
  if (state.losses === 1) {
    return losses[i];
  }
};

showBest = function(i) {
  if (state.bests === 1) {
    return bests[i];
  }
  if (bests[i] !== moves[i] && calcLoss(i) >= 20) {
    return bests[i];
  }
  return '';
};

makeTables = function() {
  var href, i, j, k, key, keys, l, len, len1, ref, ref1, results, tbody, tbodypgn, tr, value;
  tbodypgn = document.querySelector("#pgnHeaders tbody");
  tbody = document.querySelector("#chessTable tbody");
  tbodypgn.innerHTML = "";
  tbody.innerHTML = "";
  keys = [];
  ref = [...params.entries()];
  for (j = 0, len = ref.length; j < len; j++) {
    [key, value] = ref[j];
    keys.push(key);
  }
  for (k = 0, len1 = keys.length; k < len1; k++) {
    key = keys[k];
    if (indexOf.call('moves losses bests'.split(' '), key) >= 0) {
      continue;
    }
    tr = document.createElement("tr");
    add(tr, key, 'right');
    if (key === 'Link') {
      addLink(tr, getParam(key), "Link", 'left');
    } else {
      add(tr, getParam(key).replaceAll("_", " "), 'left');
    }
    tbodypgn.appendChild(tr);
  }
  moves = getParam("moves").map(figurine);
  losses = getParam("losses").map(parseFloat);
  bests = getParam("bests").map(figurine);
  results = [];
  for (i = l = 0, ref1 = moves.length; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
    if (i % 2 === 0) { // white
      tr = document.createElement("tr");
      add(tr, showBest(i));
      add(tr, showLoss(i));
      href = getParam('Link') + `#${i + 1}`;
      addLink(tr, href, moves[i]);
      add(tr, (Math.floor(i / 2)) + 1, 'center'); // black
    } else {
      href = getParam('Link') + `#${i + 1}`;
      addLink(tr, href, moves[i], 'left');
      add(tr, showLoss(i), 'left');
      add(tr, showBest(i), 'left');
    }
    results.push(tbody.appendChild(tr));
  }
  return results;
};

window.onload = function() {
  params = new URLSearchParams(window.location.search);
  return makeTables();
};

document.addEventListener('keydown', function(event) {
  echo("Tangent nedtryckt:", event.key);
  if (event.key === 'l') {
    state.letter = 1 - state.letter;
    makeTables();
  }
  if (event.key === 'd') {
    state.losses = 1 - state.losses;
    state.bests = 1 - state.bests;
    return makeTables();
  }
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\012-ChessViewer\coffee\analyze.coffee