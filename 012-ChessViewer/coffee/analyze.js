// Generated by CoffeeScript 2.7.0
var add, addLink, best, byt, calcDamage, echo, evals, figurine, getParam, klass, makeTables, moves, params, parseMove, showBest, showDamage, state,
  indexOf = [].indexOf;

echo = console.log;

state = {
  letter: 0,
  damage: 0,
  best: 0 // visa bättre drag
};

params = null;

moves = [];

evals = [];

best = [];

byt = function(san, a, b) {
  var i, j, ref;
  for (i = j = 0, ref = a.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    san = san.replace(a[i], b[i]);
  }
  return san;
};

figurine = function(san) {
  if (state.letter === 1) {
    return byt(san, 'QRBN', 'DTLS');
  } else {
    return byt(san, 'DTLS', 'QRBN');
  }
};

getParam = function(name) {
  var param;
  params = new URLSearchParams(window.location.search);
  param = params.get(name);
  if (indexOf.call("move eval best".split(' '), name) >= 0) {
    return (param != null ? param.split("_") : void 0) || [];
  }
  return param;
};

klass = function(value) {
  value = Math.abs(value);
  if (value < 20) {
    return "";
  }
  if (value < 50) {
    return "•";
  }
  if (value < 100) {
    return "••";
  }
  if (value < 300) {
    return "•••";
  }
  return "••••";
};

parseMove = function(moveStr, chess) {
  var allMoves, j, len, m;
  allMoves = chess.moves({
    verbose: true
  });
  for (j = 0, len = allMoves.length; j < len; j++) {
    m = allMoves[j];
    if (m.san === moveStr) {
      return {
        from: m.from,
        to: m.to
      };
    }
  }
  return null;
};

add = function(tr, text, alignment = 'right') {
  var td;
  td = document.createElement("td");
  td.style = `text-align: ${alignment};`;
  td.textContent = text;
  return tr.appendChild(td);
};

addLink = function(tr, href, text, alignment = 'right') {
  var td;
  td = document.createElement("td");
  td.style = `text-align: ${alignment};`;
  td.innerHTML = `<a href='${href}'>${text}</a>`;
  return tr.appendChild(td);
};

calcDamage = function(i) {
  return evals[i] + evals[i + 1];
};

showDamage = function(i) {
  if (state.damage === 0) {
    return klass(evals[i] + evals[i + 1]);
  }
  if (state.damage === 1) {
    return `${evals[i]} ${evals[i + 1]} = ${evals[i] + evals[i + 1]}`;
  }
  if (state.damage === 2) {
    return evals[i] + evals[i + 1];
  }
};

showBest = function(i) {
  if (state.best === 1) {
    return best[i];
  }
  if (best[i] !== moves[i] && calcDamage(i) >= 20) {
    return best[i];
  }
  return '';
};

makeTables = function() {
  var i, j, k, key, keys, l, len, len1, ref, ref1, results, tbody, tbodypgn, tr, value;
  tbodypgn = document.querySelector("#pgnHeaders tbody");
  tbody = document.querySelector("#chessTable tbody");
  tbodypgn.innerHTML = "";
  tbody.innerHTML = "";
  keys = [];
  ref = [...params.entries()];
  for (j = 0, len = ref.length; j < len; j++) {
    [key, value] = ref[j];
    keys.push(key);
  }
  for (k = 0, len1 = keys.length; k < len1; k++) {
    key = keys[k];
    if (indexOf.call('move eval best'.split(' '), key) >= 0) {
      continue;
    }
    tr = document.createElement("tr");
    add(tr, key, 'right');
    if (key === 'Link') {
      addLink(tr, getParam(key), "Link", 'left');
    } else {
      add(tr, getParam(key), 'left');
    }
    tbodypgn.appendChild(tr);
  }
  moves = getParam("move").map(figurine);
  evals = getParam("eval").map(parseFloat);
  best = getParam("best").map(figurine);
// Fyll i tabellen
  results = [];
  for (i = l = 0, ref1 = moves.length; l < ref1; i = l += 2) {
    tr = document.createElement("tr");
    add(tr, showBest(i));
    add(tr, showDamage(i));
    add(tr, moves[i]);
    add(tr, (Math.floor(i / 2)) + 1, 'center');
    add(tr, moves[i + 1], 'left');
    add(tr, showDamage(i + 1), 'left');
    add(tr, showBest(i + 1), 'left');
    results.push(tbody.appendChild(tr));
  }
  return results;
};

window.onload = function() {
  params = new URLSearchParams(window.location.search);
  return makeTables();
};

document.addEventListener('keydown', function(event) {
  echo("Tangent nedtryckt:", event.key);
  if (event.key === 'l') {
    state.letter = (state.letter + 1) % 2;
    makeTables();
  }
  if (event.key === 'd') {
    state.damage = (state.damage + 1) % 3;
    makeTables();
  }
  if (event.key === 'b') {
    state.best = (state.best + 1) % 2;
    return makeTables();
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl6ZS5qcyIsInNvdXJjZVJvb3QiOiIuLlxcIiwic291cmNlcyI6WyJjb2ZmZWVcXGFuYWx5emUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBO0VBQUE7O0FBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFFZixLQUFBLEdBQ0U7RUFBQSxNQUFBLEVBQVEsQ0FBUjtFQUNBLE1BQUEsRUFBUSxDQURSO0VBRUEsSUFBQSxFQUFNLENBRk47QUFBQTs7QUFJRixNQUFBLEdBQVM7O0FBRVQsS0FBQSxHQUFROztBQUNSLEtBQUEsR0FBUTs7QUFDUixJQUFBLEdBQU87O0FBRVAsR0FBQSxHQUFNLFFBQUEsQ0FBQyxHQUFELEVBQU0sQ0FBTixFQUFTLENBQVQsQ0FBQTtBQUNOLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFFLEtBQVMsbUZBQVQ7SUFDRSxHQUFBLEdBQU0sR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFDLENBQUMsQ0FBRCxDQUFiLEVBQWtCLENBQUMsQ0FBQyxDQUFELENBQW5CO0VBRFI7U0FFQTtBQUhJOztBQUtOLFFBQUEsR0FBVyxRQUFBLENBQUMsR0FBRCxDQUFBO0VBQVMsSUFBRyxLQUFLLENBQUMsTUFBTixLQUFnQixDQUFuQjtXQUEwQixHQUFBLENBQUksR0FBSixFQUFTLE1BQVQsRUFBZ0IsTUFBaEIsRUFBMUI7R0FBQSxNQUFBO1dBQXNELEdBQUEsQ0FBSSxHQUFKLEVBQVMsTUFBVCxFQUFnQixNQUFoQixFQUF0RDs7QUFBVDs7QUFFWCxRQUFBLEdBQVcsUUFBQSxDQUFDLElBQUQsQ0FBQTtBQUNYLE1BQUE7RUFB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QXlDYixNQUFNLENBQUMsTUFBUCxHQUFnQixRQUFBLENBQUEsQ0FBQTtFQUNkLE1BQUEsR0FBUyxJQUFJLGVBQUosQ0FBb0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFwQztTQUNULFVBQUEsQ0FBQTtBQUZjOztBQUloQixRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUMsUUFBQSxDQUFDLEtBQUQsQ0FBQTtFQUNuQyxJQUFBLENBQUssb0JBQUwsRUFBMkIsS0FBSyxDQUFDLEdBQWpDO0VBQ0EsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLEdBQWhCO0lBQ0UsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFDLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBaEIsQ0FBQSxHQUFxQjtJQUNwQyxVQUFBLENBQUEsRUFGRjs7RUFJQSxJQUFHLEtBQUssQ0FBQyxHQUFOLEtBQWEsR0FBaEI7SUFDRSxLQUFLLENBQUMsTUFBTixHQUFlLENBQUMsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFoQixDQUFBLEdBQXFCO0lBQ3BDLFVBQUEsQ0FBQSxFQUZGOztFQUlBLElBQUcsS0FBSyxDQUFDLEdBQU4sS0FBYSxHQUFoQjtJQUNFLEtBQUssQ0FBQyxJQUFOLEdBQWEsQ0FBQyxLQUFLLENBQUMsSUFBTixHQUFhLENBQWQsQ0FBQSxHQUFtQjtXQUNoQyxVQUFBLENBQUEsRUFGRjs7QUFWbUMsQ0FBckMiLCJzb3VyY2VzQ29udGVudCI6WyJlY2hvID0gY29uc29sZS5sb2dcclxuXHJcbnN0YXRlID1cclxuICBsZXR0ZXI6IDBcclxuICBkYW1hZ2U6IDBcclxuICBiZXN0OiAwICMgdmlzYSBiw6R0dHJlIGRyYWdcclxuXHJcbnBhcmFtcyA9IG51bGxcclxuXHJcbm1vdmVzID0gW11cclxuZXZhbHMgPSBbXVxyXG5iZXN0ID0gW11cclxuXHJcbmJ5dCA9IChzYW4sIGEsIGIpIC0+XHJcbiAgZm9yIGkgaW4gWzAuLi5hLmxlbmd0aF1cclxuICAgIHNhbiA9IHNhbi5yZXBsYWNlIGFbaV0sIGJbaV1cclxuICBzYW5cclxuXHJcbmZpZ3VyaW5lID0gKHNhbikgLT4gaWYgc3RhdGUubGV0dGVyID09IDEgdGhlbiBieXQgc2FuLCAnUVJCTicsJ0RUTFMnIGVsc2UgYnl0IHNhbiwgJ0RUTFMnLCdRUkJOJ1xyXG5cclxuZ2V0UGFyYW0gPSAobmFtZSkgLT5cclxuICBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuICBwYXJhbSA9IHBhcmFtcy5nZXQobmFtZSlcclxuICBpZiBuYW1lIGluIFwibW92ZSBldmFsIGJlc3RcIi5zcGxpdCAnICcgdGhlbiByZXR1cm4gcGFyYW0/LnNwbGl0KFwiX1wiKSBvciBbXVxyXG4gIHBhcmFtXHJcbiBcclxua2xhc3MgPSAodmFsdWUpIC0+IFxyXG4gIHZhbHVlID0gTWF0aC5hYnMgdmFsdWVcclxuICBpZiB2YWx1ZSA8IDIwICB0aGVuIHJldHVybiBcIlwiXHJcbiAgaWYgdmFsdWUgPCA1MCAgdGhlbiByZXR1cm4gXCLigKJcIlxyXG4gIGlmIHZhbHVlIDwgMTAwICB0aGVuIHJldHVybiBcIuKAouKAolwiXHJcbiAgaWYgdmFsdWUgPCAzMDAgIHRoZW4gcmV0dXJuIFwi4oCi4oCi4oCiXCJcclxuICBcIuKAouKAouKAouKAolwiXHJcblxyXG5wYXJzZU1vdmUgPSAobW92ZVN0ciwgY2hlc3MpIC0+XHJcbiAgYWxsTW92ZXMgPSBjaGVzcy5tb3Zlcyh7IHZlcmJvc2U6IHRydWUgfSlcclxuICBmb3IgbSBpbiBhbGxNb3ZlcyB3aGVuIG0uc2FuIGlzIG1vdmVTdHJcclxuICAgIHJldHVybiB7IGZyb206IG0uZnJvbSwgdG86IG0udG8gfVxyXG4gIG51bGxcclxuXHJcbmFkZCA9ICh0cix0ZXh0LGFsaWdubWVudD0ncmlnaHQnKSAtPlxyXG4gIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcInRkXCJcclxuICB0ZC5zdHlsZSA9IFwidGV4dC1hbGlnbjogI3thbGlnbm1lbnR9O1wiXHJcbiAgdGQudGV4dENvbnRlbnQgPSB0ZXh0XHJcbiAgdHIuYXBwZW5kQ2hpbGQgdGRcclxuXHJcbmFkZExpbmsgPSAodHIsaHJlZix0ZXh0LGFsaWdubWVudD0ncmlnaHQnKSAtPlxyXG4gIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcInRkXCJcclxuICB0ZC5zdHlsZSA9IFwidGV4dC1hbGlnbjogI3thbGlnbm1lbnR9O1wiXHJcbiAgdGQuaW5uZXJIVE1MID0gXCI8YSBocmVmPScje2hyZWZ9Jz4je3RleHR9PC9hPlwiXHJcbiAgdHIuYXBwZW5kQ2hpbGQgdGRcclxuXHJcbmNhbGNEYW1hZ2UgPSAoaSkgLT4gZXZhbHNbaV0gKyBldmFsc1tpKzFdXHJcblxyXG5zaG93RGFtYWdlID0gKGkpIC0+XHJcbiAgaWYgc3RhdGUuZGFtYWdlID09IDAgdGhlbiByZXR1cm4ga2xhc3MgZXZhbHNbaV0gKyBldmFsc1tpKzFdXHJcbiAgaWYgc3RhdGUuZGFtYWdlID09IDEgdGhlbiByZXR1cm4gXCIje2V2YWxzW2ldfSAje2V2YWxzW2krMV19ID0gI3tldmFsc1tpXSArIGV2YWxzW2krMV19XCJcclxuICBpZiBzdGF0ZS5kYW1hZ2UgPT0gMiB0aGVuIHJldHVybiBldmFsc1tpXSArIGV2YWxzW2krMV1cclxuXHJcbnNob3dCZXN0ID0gKGkpIC0+XHJcbiAgaWYgc3RhdGUuYmVzdCA9PSAxIHRoZW4gcmV0dXJuIGJlc3RbaV1cclxuICBpZiBiZXN0W2ldICE9IG1vdmVzW2ldIGFuZCBjYWxjRGFtYWdlKGkpID49IDIwIHRoZW4gcmV0dXJuIGJlc3RbaV1cclxuICByZXR1cm4gJydcclxuXHJcbm1ha2VUYWJsZXMgPSAtPlxyXG5cclxuICB0Ym9keXBnbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGduSGVhZGVycyB0Ym9keVwiKVxyXG4gIHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaGVzc1RhYmxlIHRib2R5XCIpXHJcblxyXG4gIHRib2R5cGduLmlubmVySFRNTCA9IFwiXCJcclxuICB0Ym9keS5pbm5lckhUTUwgPSBcIlwiXHJcblxyXG4gIGtleXMgPSBbXVxyXG4gIGZvciBba2V5LCB2YWx1ZV0gaW4gWy4uLnBhcmFtcy5lbnRyaWVzKCldXHJcbiAgICBrZXlzLnB1c2gga2V5IFxyXG5cclxuICBmb3Iga2V5IGluIGtleXNcclxuICAgIGlmIGtleSBpbiAnbW92ZSBldmFsIGJlc3QnLnNwbGl0ICcgJyB0aGVuIGNvbnRpbnVlXHJcbiAgICB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgXCJ0clwiXHJcbiAgICBhZGQgdHIsIGtleSwgJ3JpZ2h0J1xyXG4gICAgaWYga2V5ID09ICdMaW5rJ1xyXG4gICAgICBhZGRMaW5rIHRyLCBnZXRQYXJhbShrZXkpLCBcIkxpbmtcIiwgJ2xlZnQnXHJcbiAgICBlbHNlXHJcbiAgICAgIGFkZCB0ciwgZ2V0UGFyYW0oa2V5KSwgJ2xlZnQnXHJcbiAgICB0Ym9keXBnbi5hcHBlbmRDaGlsZCB0clxyXG5cclxuICBtb3ZlcyA9IGdldFBhcmFtKFwibW92ZVwiKS5tYXAgZmlndXJpbmVcclxuICBldmFscyA9IGdldFBhcmFtKFwiZXZhbFwiKS5tYXAgcGFyc2VGbG9hdFxyXG4gIGJlc3QgPSBnZXRQYXJhbShcImJlc3RcIikubWFwIGZpZ3VyaW5lXHJcblxyXG4gICMgRnlsbCBpIHRhYmVsbGVuXHJcbiAgZm9yIGkgaW4gWzAuLi5tb3Zlcy5sZW5ndGhdIGJ5IDJcclxuICAgIHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcInRyXCJcclxuICAgIGFkZCB0ciwgc2hvd0Jlc3QgaVxyXG4gICAgYWRkIHRyLCBzaG93RGFtYWdlIGlcclxuICAgIGFkZCB0ciwgbW92ZXNbaV1cclxuXHJcbiAgICBhZGQgdHIsIChpIC8vIDIpICsgMSwgJ2NlbnRlcidcclxuXHJcbiAgICBhZGQgdHIsIG1vdmVzW2krMV0sICdsZWZ0J1xyXG4gICAgYWRkIHRyLCBzaG93RGFtYWdlKGkrMSksICdsZWZ0J1xyXG4gICAgYWRkIHRyLCBzaG93QmVzdChpKzEpLCAnbGVmdCdcclxuXHJcbiAgICB0Ym9keS5hcHBlbmRDaGlsZCB0clxyXG5cclxud2luZG93Lm9ubG9hZCA9IC0+XHJcbiAgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxyXG4gIG1ha2VUYWJsZXMoKVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIChldmVudCkgLT5cclxuICBlY2hvIFwiVGFuZ2VudCBuZWR0cnlja3Q6XCIsIGV2ZW50LmtleVxyXG4gIGlmIGV2ZW50LmtleSA9PSAnbCdcclxuICAgIHN0YXRlLmxldHRlciA9IChzdGF0ZS5sZXR0ZXIgKyAxKSAlIDJcclxuICAgIG1ha2VUYWJsZXMoKVxyXG5cclxuICBpZiBldmVudC5rZXkgPT0gJ2QnXHJcbiAgICBzdGF0ZS5kYW1hZ2UgPSAoc3RhdGUuZGFtYWdlICsgMSkgJSAzXHJcbiAgICBtYWtlVGFibGVzKClcclxuXHJcbiAgaWYgZXZlbnQua2V5ID09ICdiJ1xyXG4gICAgc3RhdGUuYmVzdCA9IChzdGF0ZS5iZXN0ICsgMSkgJSAyXHJcbiAgICBtYWtlVGFibGVzKClcclxuIl19
//# sourceURL=c:\github\2025\012-ChessViewer\coffee\analyze.coffee