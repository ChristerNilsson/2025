// Generated by CoffeeScript 2.7.0
  // Internt används talen 1..100. Externt visas de som 0..99
  // Då ett tal plockats bort negeras det. Dessa visas gråa och förminskade.
  // Ramens celler innehåller 0.
var ALFABET, Button, COLORS, FREE, Hearts, KEY, Size, TILE, b, buttons, counter, deathTimestamp, delta, diagonal, draw, drawHint, drawHintHelp, drawHints, drawNumber, drawPath, drawRect, drawShadow, echo, found, handlePress, handleRelease, hearts, hints0, hints1, keyPressed, keys, latestPair, legal, level, loadStorage, makeGame, makeMove, makePath, margin, maxLevel, message, milliseconds0, milliseconds1, mousePressed, mouseReleased, newGame, numbers, path, pathTimestamp, released, saveStorage, selected, setup, showHint, showLittera, showMoves, showMoves1, showShadow, state, touchEnded, touchStarted, urlGame, within,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

echo = console.log;

ALFABET = "abcdefghijklmnopqrstuvwxyz";

// SIZE = 12
TILE = 60;

FREE = 0;

COLORS = '#fff #f00 #0f0 #ff0 #f0f #0ff #880 #f88 #088 #8f8'.split(' ');

KEY = '016-Twins2';

Size = null;

level = null;

maxLevel = null;

numbers = null;

b = null;

selected = [];

message = '';

buttons = [];

path = [];

pathTimestamp = null;

deathTimestamp = null;

hearts = null;

milliseconds0 = null;

milliseconds1 = null;

state = 'halted'; // 'running' 'halted'

delta = 0;

found = null;

showLittera = false;

showShadow = true;

showHint = false;

hints0 = [];

hints1 = [];

latestPair = [];

counter = {};

keys = '';

released = true;

margin = 0;

diagonal = 0;

Hearts = class Hearts {
  constructor(x1, y3, count = 12, maximum = 24) {
    this.x = x1;
    this.y = y3;
    this.count = count;
    this.maximum = maximum;
  }

  draw() {
    var i, k, l, len, len1, ref, ref1, results, results1, x, y;
    if (width < height) { // portrait
      ref = range(this.maximum);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        x = this.x + TILE * i;
        if (i < this.count) {
          results.push(this.drawHeart(x, this.y, TILE, 'red'));
        } else {
          results.push(this.drawHeart(x, this.y, TILE, 'gray')); // landscape
        }
      }
      return results;
    } else {
      ref1 = range(this.maximum);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        y = this.y + TILE * i + TILE * 0.3;
        results1.push(this.drawHeart(this.x, y, TILE, i < this.count ? 'red' : 'gray'));
      }
      return results1;
    }
  }

  drawHeart(x, y, tile, col) {
    var dx, y1, y2;
    fill(col);
    stroke(col);
    sw(tile * 0.3);
    dx = 0.2 * tile;
    y1 = y + 0.1 * tile;
    y2 = y + 0.4 * tile;
    line(x - dx, y1, x, y2);
    line(x + dx, y1, x, y2);
    line(x, y1, x, y2);
    sc();
    circle(x - 0.2 * tile, y, 0.2 * tile);
    return circle(x + 0.2 * tile, y, 0.2 * tile);
  }

};

Button = class Button {
  constructor(x1, y3, txt, click) {
    this.x = x1;
    this.y = y3;
    this.txt = txt;
    this.click = click;
    this.r = 0.025 * diagonal;
  }

  inside(x, y) {
    return this.r > dist(this.x, this.y, x, y);
  }

  draw() {
    fc(0.5);
    if (level === maxLevel) {
      sc(1);
    } else {
      sc();
    }
    sw(2);
    circle(this.x, this.y, this.r);
    fc(0);
    textSize(0.03 * diagonal);
    sc();
    return text(this.txt, this.x, this.y);
  }

};

newGame = function(n) {
  //	if n in [0,maxLevel+1] then return 
  if (n === 0 || n === (maxLevel + 2)) {
    return;
  }
  level = constrain(n, 2, maxLevel);
  makeGame();
  return showMoves();
};

saveStorage = function() {
  return localStorage[KEY] = maxLevel;
};

loadStorage = function() {
  return maxLevel = KEY in localStorage ? parseInt(localStorage[KEY]) : maxLevel = 2;
};

setup = function() {
  var canvas, dx, dy, w2, x, y;
  canvas = createCanvas(window.innerWidth, window.innerHeight);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  loadStorage();
  level = maxLevel;
  dx = width / 8;
  dy = height / 8;
  w2 = dx;
  diagonal = sqrt(width * width + height * height);
  if (width < height) { // portrait
    margin = (height - width) / 2;
    y = height - margin / 2;
    buttons.push(new Button(w2, y, level, function() {}));
    buttons.push(new Button(w2 + 1 * dx, y, '?', function() {
      return window.open('https://github.com/ChristerNilsson/2025/tree/main/016-Twins2#readme');
    }));
    buttons.push(new Button(w2 + 2 * dx, y, '-', function() {
      return newGame(level - 1);
    }));
    buttons.push(new Button(w2 + 3 * dx, y, '+', function() {
      return newGame(level + 1);
    }));
    buttons.push(new Button(w2 + 4 * dx, y, '<', function() {
      return newGame(1);
    }));
    buttons.push(new Button(w2 + 5 * dx, y, '>', function() {
      return newGame(maxLevel);
    }));
    hearts = new Hearts(0.35 * TILE, 0.4 * TILE); // landscape
  } else {
    margin = (width - height) / 2;
    x = width - margin / 2;
    buttons.push(new Button(x, 1 * dy, level, function() {}));
    buttons.push(new Button(x, 2 * dy, '?', function() {
      return window.open('https://github.com/ChristerNilsson/2025/tree/main/016-Twins2#readme');
    }));
    buttons.push(new Button(x, 3 * dy, '<', function() {
      return newGame(1);
    }));
    buttons.push(new Button(x, 4 * dy, '>', function() {
      return newGame(maxLevel);
    }));
    buttons.push(new Button(x, 5 * dy, '-', function() {
      return newGame(level - 1);
    }));
    buttons.push(new Button(x, 6 * dy, '+', function() {
      return newGame(level + 1);
    }));
    hearts = new Hearts(margin / 2, 0);
  }
  if (-1 !== window.location.href.indexOf('level')) {
    urlGame();
  } else {
    makeGame();
  }
  return showMoves();
};

urlGame = function() {
  var params;
  params = getParameters();
  level = parseInt(params.level);
  b = JSON.parse(params.b);
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  milliseconds0 = millis();
  return state = 'running';
};

makeGame = function() {
  var candidates, i, j, k, l, len, len1, len2, m, ref, ref1, ref2;
  hints0 = [];
  hints1 = [];
  latestPair = [];
  if (level === maxLevel) {
    maxLevel = constrain(maxLevel + delta, 2, 100);
  }
  level = constrain(level + delta, 2, 100);
  delta = 0;
  saveStorage();
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  candidates = [];
  ref = range(numbers / 2);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    candidates.push(1 + i % level);
    candidates.push(1 + level - 1 - i % level);
  }
  candidates = _.shuffle(candidates);
  b = new Array(Size);
  ref1 = range(Size);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    b[i] = new Array(Size);
    ref2 = range(Size);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      j = ref2[m];
      if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
        b[i][j] = FREE;
      } else {
        if (Size % 2 === 0) {
          b[i][j] = candidates.pop();
        } else {
          if (i === Math.floor(Size / 2) && j === Math.floor(Size / 2)) {
            b[i][j] = FREE;
          } else {
            b[i][j] = candidates.pop();
          }
        }
      }
    }
  }
  milliseconds0 = millis();
  return state = 'running';
};

drawRect = function(i, j) {
  fc(0);
  sc(0.25);
  sw(1);
  return rect(TILE * i, TILE * j, TILE, TILE);
};

drawNumber = function(cell, i, j) {
  var c1, c2;
  cell -= 1;
  sw(3);
  c1 = COLORS[modulo(cell, COLORS.length)];
  c2 = COLORS[Math.floor(cell / COLORS.length)];
  if (c1 === c2) {
    c1 = '#000';
  }
  fill(c1);
  stroke(c2);
  return text(cell, TILE * i, TILE * j + (showHint ? 10 : 0));
};

drawHint = function(hints, r, g, b) {
  var i0, i1, index, j0, j1, k, len, results;
  if (showHint) {
    sw(1);
    fc(r, g, b);
    sc();
    textSize(0.05 * diagonal);
    results = [];
    for (index = k = 0, len = hints.length; k < len; index = ++k) {
      [[i0, j0], [i1, j1]] = hints[index];
      drawHintHelp(ALFABET[index], i0, j0);
      results.push(drawHintHelp(ALFABET[index], i1, j1));
    }
    return results;
  }
};

drawHintHelp = function(cell, i, j) {
  var dx, dy, key;
  key = `${i}-${j}`;
  if (!(key in counter)) {
    counter[key] = 0;
  }
  dx = [-20, 0, 20][modulo(counter[key], 3)];
  dy = [-20, 0, 20][Math.floor(counter[key] / 3)];
  text(cell, TILE * i + dx, TILE * j + dy);
  return counter[key]++;
};

drawShadow = function(i, j) {
  var k, len, results, x, y;
  if (showShadow) {
    sw(3);
    fill(48);
    stroke(48);
    results = [];
    for (k = 0, len = latestPair.length; k < len; k++) {
      [x, y] = latestPair[k];
      if (i === x && j === y) {
        results.push(text(-b[i][j] - 1, TILE * i, TILE * j));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

draw = function() {
  var button, cell, h, i, j, k, l, len, len1, len2, len3, m, o, ref, ref1, w, x, y;
  bg(0.25);
  sw(1);
  buttons[0].txt = level - 1;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  hearts.draw();
  if (width < height) {
    TILE = width / Size;
  } else {
    TILE = height / Size;
  }
  textAlign(CENTER, CENTER);
  textSize(0.8 * TILE);
  push();
  translate((width - TILE * Size) / 2 + TILE / 2, (height - TILE * Size) / 2 + TILE / 2);
  fc(1);
  sc(0);
  ref = range(Size);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(Size);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      drawRect(i, j);
      cell = b[i][j];
      if (state === 'halted') {
        if (cell !== FREE) {
          drawNumber(abs(cell), i, j);
        }
      } else {
        if (cell > 0) {
          drawNumber(cell, i, j);
        } else if (cell !== FREE) {
          drawShadow(i, j);
        }
      }
    }
  }
// if i in [0,Size-1] or j in [0,Size-1] then drawLittera i,j
  for (o = 0, len3 = selected.length; o < len3; o++) {
    [i, j] = selected[o];
    fc(1, 1, 0, 0.5);
    sc();
    circle(TILE * i, TILE * j, TILE / 2 - 3);
  }
  drawPath();
  counter = {};
  drawHint(hints0, 0, 1, 0);
  drawHint(hints1, 1, 0, 0);
  pop();
  if (state === 'halted') {
    fc(1, 1, 0, 0.5);
    x = width / 2;
    y = height / 2;
    w = Size * TILE;
    h = Size * TILE;
    rect(x, y, w, h);
  }
  // ms = round((milliseconds1-milliseconds0)/100)/10
  // if ms > 0
  // 	y = Size*TILE-10
  // 	fc 1
  // 	sc()
  // 	textSize 30
  // text ms,width-2.5*TILE,height-30
  if (millis() < deathTimestamp) {
    x = width / 2;
    y = height / 2;
    hearts.drawHeart(x, y, Size * TILE / 5, 1, 0, 0);
  }
  return drawHints();
};

drawHints = function() {
  var dx, dy, x, y;
  if (width < height) { // portrait
    dx = width / 8;
    margin = (height - width) / 2;
    x = width - margin / 2;
    y = height - margin / 2;
    if (hints0.length > 0) {
      fill('green');
      circle(x, y, 0.025 * diagonal);
    }
    if (hints1.length > 0) {
      fill('red');
      return circle(x, y, 0.025 * diagonal);
    }
  } else {
    margin = (width - height) / 2;
    x = width - margin / 2;
    dy = height / 8;
    if (hints0.length > 0) {
      fill('green');
      circle(x, 7 * dy, 0.025 * diagonal);
    }
    if (hints1.length > 0) {
      fill('red');
      return circle(x, 7 * dy, 0.025 * diagonal);
    }
  }
};

within = function(i, j) {
  return (0 <= i && i < Size) && (0 <= j && j < Size);
};

keyPressed = function() {
  keys += key;
  if (keys.endsWith('QPZM')) {
    keys = '';
    return showHint = !showHint;
  }
};

// === För iPad och mobiler ===
touchStarted = function() {
  handlePress();
  return false;
};

touchEnded = function() {
  handleRelease();
  return false;
};

// === För PC med mus ===
mousePressed = function() {
  return handlePress();
};

mouseReleased = function() {
  return handleRelease();
};

handleRelease = function() {
  return released = true;
};

handlePress = function() {
  var button, i, i1, j, j1, k, len, x, y;
  if (!released) {
    return;
  }
  released = false;
  if (state === 'halted') {
    newGame(level);
    return;
  }
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  x = mouseX - (width - TILE * Size) / 2;
  y = mouseY - (height - TILE * Size) / 2;
  [i, j] = [Math.floor(x / TILE), Math.floor(y / TILE)];
  if (!within(i, j)) {
    return;
  }
  if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
    showLittera = false; // not showLittera
    return;
  }
  if (b[i][j] < 0) {
    showShadow = !showShadow;
    return;
  }
  if (selected.length === 0) {
    if (b[i][j] > 0) {
      selected.push([i, j]);
    }
  } else {
    [i1, j1] = selected[0];
    if (i === i1 && j === j1) {
      return selected.pop();
    }
    if (b[i][j] - 1 + b[i1][j1] - 1 !== level - 1) {
      hearts.count -= 1; // Punish one, wrong sum
      deathTimestamp = 200 + millis();
      selected.pop();
    } else {
      path = legal(false, i1, j1, i, j);
      if (path.length === 0) {
        path = legal(true, i1, j1, i, j);
        if (path.length === 0) {
          hearts.count -= 2; // Punish two, anything goes
        } else {
          hearts.count -= 1; // Punish one, wrap
        }
        deathTimestamp = 200 + millis();
      }
      latestPair = [[i, j], [i1, j1]];
      b[i][j] = -b[i][j];
      b[i1][j1] = -b[i1][j1];
      numbers -= 2;
      selected.pop();
      if (numbers === 0) {
        milliseconds1 = millis();
        state = 'halted';
        if (hearts.count >= 0) {
          delta = 1;
        } else {
          delta = -1;
        }
      } else {
        if (level === maxLevel) {
          if (hearts.count < 0) {
            state = 'halted';
            delta = -1;
          }
        }
      }
    }
  }
  return showMoves();
};

makeMove = function(wrap, x, y) {
  if (wrap) {
    return [modulo(x, Size), modulo(y, Size)];
  } else {
    return [x, y];
  }
};

makePath = function(wrap, reached, i, j) {
  var di, dj, i0, index, indexes0, j0, k, key, len, res, turns0;
  res = [];
  key = `${i},${j}`;
  [turns0, i0, j0, indexes0] = reached[key];
  [i, j] = [i0, j0];
  res.push([i, j]);
  pathTimestamp = millis();
  indexes0.reverse();
  for (k = 0, len = indexes0.length; k < len; k++) {
    index = indexes0[k];
    [di, dj] = [[1, 0], [-1, 0], [0, 1], [0, -1]][index];
    [i, j] = makeMove(wrap, i + di, j + dj);
    res.push([i, j]);
  }
  return res;
};

drawPath = function() {
  var i1, i2, j1, j2, k, len;
  if (path.length === 0) {
    return;
  }
  sw(3);
  sc(1, 1, 0);
  [i1, j1] = path[0];
  for (k = 0, len = path.length; k < len; k++) {
    [i2, j2] = path[k];
    if (1 === dist(i1, j1, i2, j2)) {
      line(TILE * i1, TILE * j1, TILE * i2, TILE * j2);
    }
    [i1, j1] = [i2, j2];
  }
  if (millis() > 500 + pathTimestamp) {
    return path = [];
  }
};

// A*
legal = function(wrap, i0, j0, i1, j1) {
  var cands, dx, dy, front, index, indexes0, k, key, l, len, len1, next, reached, ref, start, turns, turns0, x, x0, y, y0;
  start = [
    0,
    i0,
    j0, // turns,x,y,move
    []
  ];
  cands = [];
  cands.push(start);
  reached = {};
  reached[[i0, j0]] = start;
  while (cands.length > 0) {
    front = cands;
    front.sort(function(a, b) {
      return a[0] - b[0];
    });
    cands = [];
    for (k = 0, len = front.length; k < len; k++) {
      [turns0, x0, y0, indexes0] = front[k];
      ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      for (index = l = 0, len1 = ref.length; l < len1; index = ++l) {
        [dx, dy] = ref[index];
        [x, y] = makeMove(wrap, x0 + dx, y0 + dy);
        key = `${x},${y}`;
        turns = turns0;
        if (indexes0.length > 0 && index !== _.last(indexes0)) {
          turns++;
        }
        next = [turns, x, y, indexes0.concat([index])];
        if (x === i1 && y === j1 && turns <= 2) {
          reached[key] = next;
          return makePath(wrap, reached, i1, j1);
        }
        if (within(x, y)) {
          if (b[x][y] <= 0) {
            if (!(key in reached) || reached[key][0] >= next[0]) {
              if (next[0] < 3) {
                reached[key] = next;
                cands.push(next);
              }
            }
          }
        }
      }
    }
  }
  return [];
};

showMoves = function() {
  hints0 = showMoves1(false);
  return hints1 = hints0.length > 0 ? [] : showMoves1(true);
};

showMoves1 = function(wrap) {
  var i0, i1, j0, j1, k, l, len, len1, len2, len3, len4, m, o, ok, p, p0, p1, q, q0, q1, ref, ref1, ref2, ref3, res;
  res = [];
  ref = range(1, Size - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i0 = ref[k];
    ref1 = range(1, Size - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j0 = ref1[l];
      if (b[i0][j0] > 0) {
        ref2 = range(1, Size - 1);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          i1 = ref2[m];
          ref3 = range(1, Size - 1);
          for (o = 0, len3 = ref3.length; o < len3; o++) {
            j1 = ref3[o];
            if (b[i1][j1] > 0) {
              if (b[i0][j0] - 1 + b[i1][j1] - 1 === level - 1) {
                if (b[i0][j0] <= b[i1][j1] && (i0 !== i1 || j0 !== j1)) {
                  p = legal(wrap, i0, j0, i1, j1);
                  if (p.length > 0) {
                    ok = true;
                    p0 = [i0, j0];
                    p1 = [i1, j1];
                    for (q = 0, len4 = res.length; q < len4; q++) {
                      [q0, q1] = res[q];
                      if (_.isEqual(p0, q0) && _.isEqual(p1, q1)) {
                        ok = false;
                      }
                      if (_.isEqual(p0, q1) && _.isEqual(p1, q0)) {
                        ok = false;
                      }
                    }
                    if (ok) {
                      res.push([[i0, j0], [i1, j1]]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return res; // innehåller koordinaterna för paren.
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRTZCOzs7QUFBQSxJQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsY0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxhQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQTtFQUFBOztBQUU3QixJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUVmLE9BQUEsR0FBVSw2QkFKbUI7OztBQU03QixJQUFBLEdBQU87O0FBQ1AsSUFBQSxHQUFPOztBQUNQLE1BQUEsR0FBUyxtREFBbUQsQ0FBQyxLQUFwRCxDQUEwRCxHQUExRDs7QUFDVCxHQUFB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QixDQUFDLENBQUMsT0FBRixDQUFVLEVBQVYsRUFBYSxFQUFiLENBQXhCO3dCQUE4QyxFQUFBLEdBQUssTUFBbkQ7O3NCQUNBLElBQUcsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxFQUFWLEVBQWEsRUFBYixDQUFBLElBQXFCLENBQUMsQ0FBQyxPQUFGLENBQVUsRUFBVixFQUFhLEVBQWIsQ0FBeEI7d0JBQThDLEVBQUEsR0FBSyxNQUFuRDs7b0JBRkQ7b0JBR0EsSUFBRyxFQUFIO3NCQUFXLEdBQUcsQ0FBQyxJQUFKLENBQVMsQ0FBQyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUQsRUFBUyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQVQsQ0FBVCxFQUFYO3FCQVBEO21CQUZEO2lCQUREO2VBREQ7O1VBREQ7UUFERCxDQUREOztJQUREO0VBREQ7U0FpQkEsSUFuQlk7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIiMgSW50ZXJudCBhbnbDpG5kcyB0YWxlbiAxLi4xMDAuIEV4dGVybnQgdmlzYXMgZGUgc29tIDAuLjk5XHJcbiMgRMOlIGV0dCB0YWwgcGxvY2thdHMgYm9ydCBuZWdlcmFzIGRldC4gRGVzc2EgdmlzYXMgZ3LDpWEgb2NoIGbDtnJtaW5za2FkZS5cclxuIyBSYW1lbnMgY2VsbGVyIGlubmVow6VsbGVyIDAuXHJcblxyXG5lY2hvID0gY29uc29sZS5sb2dcclxuXHJcbkFMRkFCRVQgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJcclxuIyBTSVpFID0gMTJcclxuVElMRSA9IDYwXHJcbkZSRUUgPSAwXHJcbkNPTE9SUyA9ICcjZmZmICNmMDAgIzBmMCAjZmYwICNmMGYgIzBmZiAjODgwICNmODggIzA4OCAjOGY4Jy5zcGxpdCAnICdcclxuS0VZID0gJzAxNi1Ud2luczInXHJcblxyXG5TaXplID0gbnVsbFxyXG5sZXZlbCA9IG51bGxcclxubWF4TGV2ZWw9bnVsbFxyXG5udW1iZXJzID0gbnVsbFxyXG5cclxuYiA9IG51bGxcclxuc2VsZWN0ZWQgPSBbXVxyXG5tZXNzYWdlID0gJydcclxuYnV0dG9ucyA9IFtdXHJcbnBhdGggPSBbXVxyXG5wYXRoVGltZXN0YW1wID0gbnVsbFxyXG5kZWF0aFRpbWVzdGFtcCA9IG51bGxcclxuaGVhcnRzID0gbnVsbFxyXG5taWxsaXNlY29uZHMwID0gbnVsbFxyXG5taWxsaXNlY29uZHMxID0gbnVsbFxyXG5zdGF0ZSA9ICdoYWx0ZWQnICMgJ3J1bm5pbmcnICdoYWx0ZWQnXHJcbmRlbHRhID0gMFxyXG5mb3VuZCA9IG51bGxcclxuc2hvd0xpdHRlcmEgPSBmYWxzZVxyXG5zaG93U2hhZG93ID0gdHJ1ZVxyXG5zaG93SGludCA9IGZhbHNlXHJcbmhpbnRzMCA9IFtdXHJcbmhpbnRzMSA9IFtdXHJcbmxhdGVzdFBhaXIgPSBbXVxyXG5jb3VudGVyID0ge31cclxua2V5cyA9ICcnXHJcbnJlbGVhc2VkID0gdHJ1ZVxyXG5tYXJnaW4gPSAwXHJcbmRpYWdvbmFsID0gMFxyXG5cclxuY2xhc3MgSGVhcnRzXHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHksQGNvdW50PTEyLEBtYXhpbXVtPTI0KSAtPiBcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRpZiB3aWR0aCA8IGhlaWdodCAjIHBvcnRyYWl0XHJcblx0XHRcdGZvciBpIGluIHJhbmdlIEBtYXhpbXVtXHJcblx0XHRcdFx0eCA9IEB4ICsgVElMRSppXHJcblx0XHRcdFx0aWYgaSA8IEBjb3VudFxyXG5cdFx0XHRcdFx0QGRyYXdIZWFydCB4LEB5LFRJTEUsJ3JlZCdcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRAZHJhd0hlYXJ0IHgsQHksVElMRSwnZ3JheSdcclxuXHRcdGVsc2UgIyBsYW5kc2NhcGVcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQG1heGltdW1cclxuXHRcdFx0XHR5ID0gQHkgKyBUSUxFKmkgKyBUSUxFKjAuM1xyXG5cdFx0XHRcdEBkcmF3SGVhcnQgQHgseSxUSUxFLGlmIGkgPCBAY291bnQgdGhlbiAncmVkJyBlbHNlICdncmF5J1xyXG5cclxuXHRkcmF3SGVhcnQgOiAoeCx5LHRpbGUsY29sKSAtPlxyXG5cdFx0XHRmaWxsIGNvbFxyXG5cdFx0XHRzdHJva2UgY29sXHJcblx0XHRcdHN3IHRpbGUqMC4zXHJcblx0XHRcdGR4ID0gMC4yKnRpbGVcclxuXHRcdFx0eTEgPSB5ICsgMC4xKnRpbGVcclxuXHRcdFx0eTIgPSB5ICsgMC40KnRpbGVcclxuXHRcdFx0bGluZSB4LWR4LCB5MSwgeCwgeTJcclxuXHRcdFx0bGluZSB4K2R4LCB5MSwgeCwgeTJcclxuXHRcdFx0bGluZSB4LCAgICB5MSwgeCwgeTJcclxuXHRcdFx0c2MoKVxyXG5cdFx0XHRjaXJjbGUgeC0wLjIqdGlsZSwgeSwgMC4yKnRpbGVcclxuXHRcdFx0Y2lyY2xlIHgrMC4yKnRpbGUsIHksIDAuMip0aWxlXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAdHh0LEBjbGljaykgLT4gQHI9MC4wMjUgKiBkaWFnb25hbFxyXG5cdGluc2lkZSA6ICh4LHkpIC0+IEByID4gZGlzdCBAeCxAeSx4LHlcclxuXHRkcmF3IDogLT5cclxuXHRcdGZjIDAuNVxyXG5cdFx0aWYgbGV2ZWwgPT0gbWF4TGV2ZWwgdGhlbiBzYyAxIGVsc2Ugc2MoKVxyXG5cdFx0c3cgMlxyXG5cdFx0Y2lyY2xlIEB4LEB5LEByXHJcblx0XHRmYyAwXHJcblx0XHR0ZXh0U2l6ZSAwLjAzICogZGlhZ29uYWxcclxuXHRcdHNjKClcclxuXHRcdHRleHQgQHR4dCxAeCxAeVxyXG5cclxubmV3R2FtZSA9IChuKSAtPlxyXG4jXHRpZiBuIGluIFswLG1heExldmVsKzFdIHRoZW4gcmV0dXJuIFxyXG5cdGlmIG4gaW4gWzAsbWF4TGV2ZWwrMl0gdGhlbiByZXR1cm4gXHJcblx0bGV2ZWwgPSBjb25zdHJhaW4gbiwyLG1heExldmVsXHJcblx0bWFrZUdhbWUoKVxyXG5cdHNob3dNb3ZlcygpXHJcblxyXG5zYXZlU3RvcmFnZSA9IC0+IGxvY2FsU3RvcmFnZVtLRVldID0gbWF4TGV2ZWxcclxubG9hZFN0b3JhZ2UgPSAtPiBtYXhMZXZlbCA9IGlmIEtFWSBvZiBsb2NhbFN0b3JhZ2UgdGhlbiBwYXJzZUludCBsb2NhbFN0b3JhZ2VbS0VZXSBlbHNlIG1heExldmVsID0gMlxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNhbnZhcyA9IGNyZWF0ZUNhbnZhcyB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XHJcblxyXG5cdHJlY3RNb2RlIENFTlRFUlxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0bG9hZFN0b3JhZ2UoKVxyXG5cdGxldmVsID0gbWF4TGV2ZWxcclxuXHRkeCA9IHdpZHRoLzhcclxuXHRkeSA9IGhlaWdodC84XHJcblx0dzIgPSBkeFxyXG5cdGRpYWdvbmFsID0gc3FydCB3aWR0aCAqIHdpZHRoICsgaGVpZ2h0ICogaGVpZ2h0XHJcblxyXG5cdGlmIHdpZHRoIDwgaGVpZ2h0ICMgcG9ydHJhaXRcclxuXHRcdG1hcmdpbiA9IChoZWlnaHQtd2lkdGgpLzJcclxuXHRcdHkgPSBoZWlnaHQgLSBtYXJnaW4vMlxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gdzIsICAgICAgICB5LGxldmVsLCAtPlxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gdzIrMSpkeCwgICB5LCc/JywgLT4gd2luZG93Lm9wZW4gJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vMjAyNS90cmVlL21haW4vMDE2LVR3aW5zMiNyZWFkbWUnXHJcblxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gdzIrMipkeCwgICB5LCctJywgLT4gbmV3R2FtZSBsZXZlbCAtIDFcclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHcyKzMqZHgsICAgeSwnKycsIC0+IG5ld0dhbWUgbGV2ZWwgKyAxXHJcblxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gdzIrNCpkeCwgICB5LCc8JywgLT4gbmV3R2FtZSAxXHJcblx0XHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiB3Mis1KmR4LCAgIHksJz4nLCAtPiBuZXdHYW1lIG1heExldmVsXHJcblxyXG5cdFx0aGVhcnRzID0gbmV3IEhlYXJ0cyAwLjM1KlRJTEUsIDAuNCpUSUxFXHJcblx0ZWxzZSAjIGxhbmRzY2FwZVxyXG5cdFx0bWFyZ2luID0gKHdpZHRoLWhlaWdodCkvMlxyXG5cdFx0eCA9IHdpZHRoIC0gbWFyZ2luLzJcclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHgsIDEqZHksIGxldmVsLCAtPlxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24geCwgMipkeSwgICc/JywgLT4gd2luZG93Lm9wZW4gJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vMjAyNS90cmVlL21haW4vMDE2LVR3aW5zMiNyZWFkbWUnXHJcblxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24geCwgMypkeSwgJzwnLCAtPiBuZXdHYW1lIDFcclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHgsIDQqZHksICc+JywgLT4gbmV3R2FtZSBtYXhMZXZlbFxyXG5cclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHgsIDUqZHksICctJywgLT4gbmV3R2FtZSBsZXZlbCAtIDFcclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHgsIDYqZHksICcrJywgLT4gbmV3R2FtZSBsZXZlbCArIDFcclxuXHRcdGhlYXJ0cyA9IG5ldyBIZWFydHMgbWFyZ2luLzIsIDBcclxuXHJcblx0aWYgLTEgIT0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZiAnbGV2ZWwnXHJcblx0XHR1cmxHYW1lKClcclxuXHRlbHNlXHJcblx0XHRtYWtlR2FtZSgpXHJcblx0c2hvd01vdmVzKClcclxuXHJcbnVybEdhbWUgPSAtPlxyXG5cdHBhcmFtcyA9IGdldFBhcmFtZXRlcnMoKVxyXG5cdGxldmVsID0gcGFyc2VJbnQgcGFyYW1zLmxldmVsXHJcblx0YiA9IEpTT04ucGFyc2UgcGFyYW1zLmJcclxuXHRTaXplID0gNCArIGxldmVsIC8vIDQgXHJcblx0aWYgU2l6ZSA+IDEyIHRoZW4gU2l6ZT0xMlxyXG5cdGhlYXJ0cy5jb3VudCAgID0gY29uc3RyYWluIDErbGV2ZWwvLzgsMCwxMlxyXG5cdGhlYXJ0cy5tYXhpbXVtID0gY29uc3RyYWluIDErbGV2ZWwvLzgsMCwxMiBcclxuXHRudW1iZXJzID0gKFNpemUtMikqKFNpemUtMilcclxuXHRpZiBudW1iZXJzJTI9PTEgdGhlbiBudW1iZXJzIC09IDFcclxuXHRtaWxsaXNlY29uZHMwID0gbWlsbGlzKClcclxuXHRzdGF0ZSA9ICdydW5uaW5nJ1x0XHJcblxyXG5tYWtlR2FtZSA9IC0+XHJcblx0aGludHMwID0gW11cclxuXHRoaW50czEgPSBbXVxyXG5cclxuXHRsYXRlc3RQYWlyID0gW11cclxuXHJcblx0aWYgbGV2ZWwgPT0gbWF4TGV2ZWxcclxuXHRcdG1heExldmVsID0gY29uc3RyYWluIG1heExldmVsK2RlbHRhLDIsMTAwXHJcblx0bGV2ZWwgPSBjb25zdHJhaW4gbGV2ZWwrZGVsdGEsMiwxMDBcclxuXHRkZWx0YSA9IDBcclxuXHRzYXZlU3RvcmFnZSgpXHJcblxyXG5cdFNpemUgPSA0K2xldmVsLy80IFxyXG5cdGlmIFNpemU+MTIgdGhlbiBTaXplPTEyXHJcblx0aGVhcnRzLmNvdW50ICAgPSBjb25zdHJhaW4gMStsZXZlbC8vOCwwLDEyIFxyXG5cdGhlYXJ0cy5tYXhpbXVtID0gY29uc3RyYWluIDErbGV2ZWwvLzgsMCwxMiBcclxuXHJcblx0bnVtYmVycyA9IChTaXplLTIpKihTaXplLTIpXHJcblx0aWYgbnVtYmVycyUyPT0xIHRoZW4gbnVtYmVycyAtPSAxXHJcblxyXG5cdGNhbmRpZGF0ZXMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIG51bWJlcnMvMlxyXG5cdFx0Y2FuZGlkYXRlcy5wdXNoIDEgKyBpICUgbGV2ZWxcclxuXHRcdGNhbmRpZGF0ZXMucHVzaCAxICsgbGV2ZWwtMSAtIGkgJSBsZXZlbFxyXG5cdGNhbmRpZGF0ZXMgPSBfLnNodWZmbGUgY2FuZGlkYXRlc1xyXG5cclxuXHRiID0gbmV3IEFycmF5IFNpemVcclxuXHRmb3IgaSBpbiByYW5nZSBTaXplXHJcblx0XHRiW2ldID0gbmV3IEFycmF5IFNpemVcclxuXHRcdGZvciBqIGluIHJhbmdlIFNpemVcclxuXHRcdFx0aWYgaSBpbiBbMCxTaXplLTFdIG9yIGogaW4gWzAsU2l6ZS0xXSB0aGVuIGJbaV1bal0gPSBGUkVFXHJcblx0XHRcdGVsc2UgXHJcblx0XHRcdFx0aWYgU2l6ZSAlIDIgPT0gMFxyXG5cdFx0XHRcdFx0YltpXVtqXSA9IGNhbmRpZGF0ZXMucG9wKClcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRpZiBpID09IFNpemUvLzIgYW5kIGogPT0gU2l6ZS8vMlxyXG5cdFx0XHRcdFx0XHRiW2ldW2pdID0gRlJFRVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRiW2ldW2pdID0gY2FuZGlkYXRlcy5wb3AoKVxyXG5cdG1pbGxpc2Vjb25kczAgPSBtaWxsaXMoKVxyXG5cdHN0YXRlID0gJ3J1bm5pbmcnXHJcblxyXG5kcmF3UmVjdCA9IChpLGopIC0+XHJcblx0ZmMgMFxyXG5cdHNjIDAuMjVcclxuXHRzdyAxXHJcblx0cmVjdCBUSUxFKmksVElMRSpqLFRJTEUsVElMRVxyXG5cclxuZHJhd051bWJlciA9IChjZWxsLGksaikgLT5cclxuXHRjZWxsIC09IDEgXHJcblx0c3cgM1xyXG5cdGMxID0gQ09MT1JTW2NlbGwlJUNPTE9SUy5sZW5ndGhdXHJcblx0YzIgPSBDT0xPUlNbY2VsbC8vQ09MT1JTLmxlbmd0aF1cclxuXHRpZiBjMT09YzIgdGhlbiBjMT0nIzAwMCdcclxuXHRmaWxsICAgYzFcclxuXHRzdHJva2UgYzJcclxuXHR0ZXh0IGNlbGwsVElMRSppLFRJTEUqaiArIGlmIHNob3dIaW50IHRoZW4gMTAgZWxzZSAwXHJcblxyXG5kcmF3SGludCAgPSAoaGludHMscixnLGIpIC0+IFxyXG5cdGlmIHNob3dIaW50IFxyXG5cdFx0c3cgMVxyXG5cdFx0ZmMgcixnLGJcclxuXHRcdHNjKClcclxuXHRcdHRleHRTaXplIDAuMDUgKiBkaWFnb25hbFxyXG5cdFx0Zm9yIFtbaTAsajBdLFtpMSxqMV1dLGluZGV4IGluIGhpbnRzXHJcblx0XHRcdGRyYXdIaW50SGVscCBBTEZBQkVUW2luZGV4XSxpMCxqMFxyXG5cdFx0XHRkcmF3SGludEhlbHAgQUxGQUJFVFtpbmRleF0saTEsajFcclxuXHJcbmRyYXdIaW50SGVscCA9IChjZWxsLGksaikgLT5cclxuXHRcdGtleSA9IFwiI3tpfS0je2p9XCJcclxuXHRcdGlmIGtleSBub3Qgb2YgY291bnRlciB0aGVuIGNvdW50ZXJba2V5XSA9IDBcclxuXHRcdGR4ID0gWy0yMCwwLDIwXVtjb3VudGVyW2tleV0gJSUgM11cclxuXHRcdGR5ID0gWy0yMCwwLDIwXVtjb3VudGVyW2tleV0gLy8gM11cclxuXHRcdHRleHQgY2VsbCxUSUxFKmkrZHgsVElMRSpqK2R5XHJcblx0XHRjb3VudGVyW2tleV0rK1xyXG5cclxuZHJhd1NoYWRvdyA9IChpLGopIC0+XHJcblx0aWYgc2hvd1NoYWRvd1xyXG5cdFx0c3cgM1xyXG5cdFx0ZmlsbCA0OFxyXG5cdFx0c3Ryb2tlIDQ4IFxyXG5cdFx0Zm9yIFt4LHldIGluIGxhdGVzdFBhaXJcclxuXHRcdFx0aWYgaT09eCBhbmQgaj09eSBcclxuXHRcdFx0XHR0ZXh0IC1iW2ldW2pdLTEsIFRJTEUqaSxUSUxFKmpcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJnIDAuMjVcclxuXHRzdyAxXHJcblx0YnV0dG9uc1swXS50eHQgPSBsZXZlbC0xXHJcblxyXG5cdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0YnV0dG9uLmRyYXcoKVxyXG5cdGhlYXJ0cy5kcmF3KClcclxuXHJcblx0aWYgd2lkdGggPCBoZWlnaHQgXHJcblx0XHRUSUxFID0gd2lkdGgvU2l6ZVxyXG5cdGVsc2VcclxuXHRcdFRJTEUgPSBoZWlnaHQvU2l6ZVxyXG5cclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHRleHRTaXplIDAuOCAqIFRJTEVcclxuXHJcblx0cHVzaCgpXHJcblx0dHJhbnNsYXRlICh3aWR0aC1USUxFKlNpemUpLzIrVElMRS8yLCAoaGVpZ2h0LVRJTEUqU2l6ZSkvMitUSUxFLzIgXHJcblx0ZmMgMVxyXG5cdHNjIDBcclxuXHRmb3IgaSBpbiByYW5nZSBTaXplXHJcblx0XHRmb3IgaiBpbiByYW5nZSBTaXplXHJcblx0XHRcdGRyYXdSZWN0IGksalxyXG5cdFx0XHRjZWxsID0gYltpXVtqXVxyXG5cdFx0XHRpZiBzdGF0ZSA9PSAnaGFsdGVkJ1xyXG5cdFx0XHRcdGlmIGNlbGwgIT0gRlJFRSB0aGVuIGRyYXdOdW1iZXIgYWJzKGNlbGwpLGksalxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgY2VsbCA+IDAgdGhlbiBkcmF3TnVtYmVyIGNlbGwsaSxqXHJcblx0XHRcdFx0ZWxzZSBpZiBjZWxsICE9IEZSRUUgdGhlbiBkcmF3U2hhZG93IGksalxyXG5cdFx0XHQjIGlmIGkgaW4gWzAsU2l6ZS0xXSBvciBqIGluIFswLFNpemUtMV0gdGhlbiBkcmF3TGl0dGVyYSBpLGpcclxuXHRmb3IgW2ksal0gaW4gc2VsZWN0ZWRcclxuXHRcdGZjIDEsMSwwLDAuNVxyXG5cdFx0c2MoKVxyXG5cdFx0Y2lyY2xlIFRJTEUqaSxUSUxFKmosVElMRS8yLTNcclxuXHRkcmF3UGF0aCgpXHJcblxyXG5cdGNvdW50ZXIgPSB7fVxyXG5cclxuXHRkcmF3SGludCBoaW50czAsMCwxLDBcclxuXHRkcmF3SGludCBoaW50czEsMSwwLDBcclxuXHJcblx0cG9wKClcclxuXHJcblx0aWYgc3RhdGU9PSdoYWx0ZWQnXHJcblx0XHRmYyAxLDEsMCwwLjVcclxuXHRcdHggPSB3aWR0aC8yIFxyXG5cdFx0eSA9IGhlaWdodC8yIFxyXG5cdFx0dyA9IFNpemUqVElMRVxyXG5cdFx0aCA9IFNpemUqVElMRVxyXG5cdFx0cmVjdCB4LHksdyxoXHJcblx0XHQjIG1zID0gcm91bmQoKG1pbGxpc2Vjb25kczEtbWlsbGlzZWNvbmRzMCkvMTAwKS8xMFxyXG5cdFx0IyBpZiBtcyA+IDBcclxuXHRcdCMgXHR5ID0gU2l6ZSpUSUxFLTEwXHJcblx0XHQjIFx0ZmMgMVxyXG5cdFx0IyBcdHNjKClcclxuXHRcdCMgXHR0ZXh0U2l6ZSAzMFxyXG5cdFx0XHQjIHRleHQgbXMsd2lkdGgtMi41KlRJTEUsaGVpZ2h0LTMwXHJcblxyXG5cdGlmIG1pbGxpcygpIDwgZGVhdGhUaW1lc3RhbXBcclxuXHRcdHggPSB3aWR0aC8yIFxyXG5cdFx0eSA9IGhlaWdodC8yIFxyXG5cdFx0aGVhcnRzLmRyYXdIZWFydCB4LHksU2l6ZSpUSUxFLzUsMSwwLDBcclxuXHJcblx0ZHJhd0hpbnRzKClcclxuXHJcbmRyYXdIaW50cyA9IC0+XHJcblx0aWYgd2lkdGggPCBoZWlnaHQgIyBwb3J0cmFpdFxyXG5cdFx0ZHggPSB3aWR0aC84XHJcblx0XHRtYXJnaW4gPSAoaGVpZ2h0LXdpZHRoKS8yXHJcblx0XHR4ID0gd2lkdGggLSBtYXJnaW4vMlx0XHJcblx0XHR5ID0gaGVpZ2h0IC0gbWFyZ2luLzJcclxuXHRcdGlmIGhpbnRzMC5sZW5ndGggPiAwIFxyXG5cdFx0XHRmaWxsICdncmVlbicgXHJcblx0XHRcdGNpcmNsZSB4LCB5LCAwLjAyNSAqIGRpYWdvbmFsXHJcblx0XHRpZiBoaW50czEubGVuZ3RoID4gMCBcclxuXHRcdFx0ZmlsbCAncmVkJ1xyXG5cdFx0XHRjaXJjbGUgeCwgeSwgMC4wMjUgKiBkaWFnb25hbFxyXG5cdGVsc2VcclxuXHRcdG1hcmdpbiA9ICh3aWR0aC1oZWlnaHQpLzJcclxuXHRcdHggPSB3aWR0aCAtIG1hcmdpbi8yXHRcclxuXHRcdGR5ID0gaGVpZ2h0LzhcclxuXHRcdGlmIGhpbnRzMC5sZW5ndGggPiAwIFxyXG5cdFx0XHRmaWxsICdncmVlbidcclxuXHRcdFx0Y2lyY2xlIHgsIDcqZHksIDAuMDI1ICogZGlhZ29uYWxcclxuXHRcdGlmIGhpbnRzMS5sZW5ndGggPiAwIFxyXG5cdFx0XHRmaWxsICdyZWQnXHJcblx0XHRcdGNpcmNsZSB4LCA3KmR5LCAwLjAyNSAqIGRpYWdvbmFsXHJcblxyXG53aXRoaW4gPSAoaSxqKSAtPiAwIDw9IGkgPCBTaXplIGFuZCAwIDw9IGogPCBTaXplXHJcblxyXG5rZXlQcmVzc2VkID0gLT5cclxuXHRrZXlzICs9IGtleSBcclxuXHRpZiBrZXlzLmVuZHNXaXRoICdRUFpNJ1xyXG5cdFx0a2V5cyA9ICcnIFxyXG5cdFx0c2hvd0hpbnQgPSBub3Qgc2hvd0hpbnRcclxuXHJcbiMgPT09IEbDtnIgaVBhZCBvY2ggbW9iaWxlciA9PT1cclxudG91Y2hTdGFydGVkID0gLT5cclxuXHRoYW5kbGVQcmVzcygpXHJcblx0ZmFsc2VcclxuXHRcclxudG91Y2hFbmRlZCA9IC0+XHJcblx0aGFuZGxlUmVsZWFzZSgpXHJcblx0ZmFsc2VcclxuXHJcbiMgPT09IEbDtnIgUEMgbWVkIG11cyA9PT1cclxubW91c2VQcmVzc2VkID0gLT4gaGFuZGxlUHJlc3MoKVxyXG5tb3VzZVJlbGVhc2VkID0gLT4gaGFuZGxlUmVsZWFzZSgpXHJcblxyXG5oYW5kbGVSZWxlYXNlID0gLT4gcmVsZWFzZWQgPSB0cnVlXHJcblxyXG5oYW5kbGVQcmVzcyA9IC0+XHJcblxyXG5cdGlmIG5vdCByZWxlYXNlZCB0aGVuIHJldHVybiBcclxuXHRyZWxlYXNlZCA9IGZhbHNlXHJcblxyXG5cdGlmIHN0YXRlPT0naGFsdGVkJyBcclxuXHRcdG5ld0dhbWUgbGV2ZWxcclxuXHRcdHJldHVyblxyXG5cdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0aWYgYnV0dG9uLmluc2lkZSBtb3VzZVgsbW91c2VZIHRoZW4gYnV0dG9uLmNsaWNrKClcclxuXHJcblx0eCA9IG1vdXNlWCAtICh3aWR0aC1USUxFKlNpemUpLzIgXHJcblx0eSA9IG1vdXNlWSAtIChoZWlnaHQtVElMRSpTaXplKS8yIFxyXG5cdFtpLGpdID0gW3gvL1RJTEUseS8vVElMRV1cclxuXHRpZiBub3Qgd2l0aGluIGksaiB0aGVuIHJldHVyblxyXG5cclxuXHRpZiBpIGluIFswLFNpemUtMV0gb3IgaiBpbiBbMCxTaXplLTFdIFxyXG5cdFx0c2hvd0xpdHRlcmEgPSBmYWxzZSAjIG5vdCBzaG93TGl0dGVyYVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlmIGJbaV1bal0gPCAwXHJcblx0XHRzaG93U2hhZG93ID0gbm90IHNob3dTaGFkb3cgXHJcblx0XHRyZXR1cm5cclxuXHJcblx0aWYgc2VsZWN0ZWQubGVuZ3RoID09IDBcclxuXHRcdGlmIGJbaV1bal0gPiAwIHRoZW4gc2VsZWN0ZWQucHVzaCBbaSxqXVxyXG5cdGVsc2VcclxuXHRcdFtpMSxqMV0gPSBzZWxlY3RlZFswXVxyXG5cdFx0aWYgaT09aTEgYW5kIGo9PWoxIHRoZW4gcmV0dXJuIHNlbGVjdGVkLnBvcCgpXHJcblx0XHRpZiBiW2ldW2pdLTEgKyBiW2kxXVtqMV0tMSAhPSBsZXZlbC0xXHJcblx0XHRcdGhlYXJ0cy5jb3VudCAtPSAxICMgUHVuaXNoIG9uZSwgd3Jvbmcgc3VtXHJcblx0XHRcdGRlYXRoVGltZXN0YW1wID0gMjAwICsgbWlsbGlzKClcclxuXHRcdFx0c2VsZWN0ZWQucG9wKClcclxuXHRcdGVsc2VcclxuXHRcdFx0cGF0aCA9IGxlZ2FsIGZhbHNlLGkxLGoxLGksalxyXG5cdFx0XHRpZiBwYXRoLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0cGF0aCA9IGxlZ2FsIHRydWUsaTEsajEsaSxqXHJcblx0XHRcdFx0aWYgcGF0aC5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0aGVhcnRzLmNvdW50IC09IDIgIyBQdW5pc2ggdHdvLCBhbnl0aGluZyBnb2VzXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0aGVhcnRzLmNvdW50IC09IDEgIyBQdW5pc2ggb25lLCB3cmFwXHJcblx0XHRcdFx0ZGVhdGhUaW1lc3RhbXAgPSAyMDAgKyBtaWxsaXMoKVxyXG5cdFx0XHRsYXRlc3RQYWlyID0gW1tpLGpdLFtpMSxqMV1dXHJcblx0XHRcdGJbaV1bal0gPSAtYltpXVtqXSBcclxuXHRcdFx0YltpMV1bajFdID0gLWJbaTFdW2oxXSBcclxuXHRcdFx0bnVtYmVycyAtPSAyXHJcblx0XHRcdHNlbGVjdGVkLnBvcCgpXHJcblx0XHRcdGlmIG51bWJlcnM9PTBcclxuXHRcdFx0XHRtaWxsaXNlY29uZHMxID0gbWlsbGlzKClcclxuXHRcdFx0XHRzdGF0ZSA9ICdoYWx0ZWQnXHJcblx0XHRcdFx0aWYgaGVhcnRzLmNvdW50ID49IDAgdGhlbiBkZWx0YSA9IDEgZWxzZSBkZWx0YSA9IC0xXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBsZXZlbCA9PSBtYXhMZXZlbCBcclxuXHRcdFx0XHRcdGlmIGhlYXJ0cy5jb3VudCA8IDAgXHJcblx0XHRcdFx0XHRcdHN0YXRlID0gJ2hhbHRlZCdcclxuXHRcdFx0XHRcdFx0ZGVsdGEgPSAtMVxyXG5cdHNob3dNb3ZlcygpXHJcblxyXG5tYWtlTW92ZSA9ICh3cmFwLHgseSkgLT4gaWYgd3JhcCB0aGVuIFt4ICUlIFNpemUsIHkgJSUgU2l6ZV0gZWxzZSBbeCx5XVxyXG5cclxubWFrZVBhdGggPSAod3JhcCxyZWFjaGVkLGksaikgLT5cclxuXHRyZXMgPSBbXVxyXG5cdGtleSA9IFwiI3tpfSwje2p9XCJcclxuXHRbdHVybnMwLGkwLGowLGluZGV4ZXMwXSA9IHJlYWNoZWRba2V5XVxyXG5cdFtpLGpdID0gW2kwLGowXVxyXG5cdHJlcy5wdXNoIFtpLGpdXHJcblx0cGF0aFRpbWVzdGFtcCA9IG1pbGxpcygpXHJcblx0aW5kZXhlczAucmV2ZXJzZSgpXHJcblx0Zm9yIGluZGV4IGluIGluZGV4ZXMwXHJcblx0XHRbZGksZGpdID0gW1sxLDBdLFstMSwwXSxbMCwxXSxbMCwtMV1dW2luZGV4XVxyXG5cdFx0W2ksal0gPSBtYWtlTW92ZSB3cmFwLGkrZGksaitkalxyXG5cdFx0cmVzLnB1c2ggW2ksal1cclxuXHRyZXNcclxuXHJcbmRyYXdQYXRoID0gLT5cclxuXHRpZiBwYXRoLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuIFxyXG5cdHN3IDNcclxuXHRzYyAxLDEsMFxyXG5cdFtpMSxqMV0gPSBwYXRoWzBdXHJcblx0Zm9yIFtpMixqMl0gaW4gcGF0aFxyXG5cdFx0aWYgMSA9PSBkaXN0IGkxLGoxLGkyLGoyXHJcblx0XHRcdGxpbmUgVElMRSppMSxUSUxFKmoxLFRJTEUqaTIsVElMRSpqMlxyXG5cdFx0W2kxLGoxXSA9IFtpMixqMl1cclxuXHRpZiBtaWxsaXMoKSA+IDUwMCArIHBhdGhUaW1lc3RhbXAgdGhlbiBwYXRoID0gW11cclxuXHJcbiMgQSpcclxubGVnYWwgPSAod3JhcCxpMCxqMCxpMSxqMSkgLT5cclxuXHRzdGFydCA9IFswLGkwLGowLFtdXSAjIHR1cm5zLHgseSxtb3ZlXHJcblx0Y2FuZHMgPSBbXVxyXG5cdGNhbmRzLnB1c2ggc3RhcnRcclxuXHRyZWFjaGVkID0ge31cclxuXHRyZWFjaGVkW1tpMCxqMF1dID0gc3RhcnRcclxuXHR3aGlsZSBjYW5kcy5sZW5ndGggPiAwXHJcblx0XHRmcm9udCA9IGNhbmRzXHJcblx0XHRmcm9udC5zb3J0IChhLGIpIC0+IGFbMF0tYlswXVxyXG5cdFx0Y2FuZHMgPSBbXVxyXG5cdFx0Zm9yIFt0dXJuczAseDAseTAsaW5kZXhlczBdIGluIGZyb250XHJcblx0XHRcdGZvciBbZHgsZHldLGluZGV4IGluIFtbLTEsMF0sWzEsMF0sWzAsLTFdLFswLDFdXVxyXG5cdFx0XHRcdFt4LHldID0gbWFrZU1vdmUgd3JhcCx4MCtkeCx5MCtkeVxyXG5cdFx0XHRcdGtleSA9IFwiI3t4fSwje3l9XCJcclxuXHRcdFx0XHR0dXJucyA9IHR1cm5zMFxyXG5cdFx0XHRcdGlmIGluZGV4ZXMwLmxlbmd0aCA+IDAgYW5kIGluZGV4ICE9IF8ubGFzdChpbmRleGVzMCkgdGhlbiB0dXJucysrXHJcblx0XHRcdFx0bmV4dCA9IFt0dXJucyx4LHksaW5kZXhlczAuY29uY2F0IFtpbmRleF1dXHJcblx0XHRcdFx0aWYgeD09aTEgYW5kIHk9PWoxIGFuZCB0dXJuczw9MlxyXG5cdFx0XHRcdFx0cmVhY2hlZFtrZXldID0gbmV4dFxyXG5cdFx0XHRcdFx0cmV0dXJuIG1ha2VQYXRoIHdyYXAscmVhY2hlZCxpMSxqMVxyXG5cdFx0XHRcdGlmIHdpdGhpbiB4LHlcclxuXHRcdFx0XHRcdGlmIGJbeF1beV0gPD0gMFxyXG5cdFx0XHRcdFx0XHRpZiBrZXkgbm90IG9mIHJlYWNoZWQgb3IgcmVhY2hlZFtrZXldWzBdID49IG5leHRbMF1cclxuXHRcdFx0XHRcdFx0XHRpZiBuZXh0WzBdIDwgM1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVhY2hlZFtrZXldID0gbmV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FuZHMucHVzaCBuZXh0XHJcblx0W11cclxuXHJcbnNob3dNb3ZlcyA9IC0+IFxyXG5cdGhpbnRzMCA9IHNob3dNb3ZlczEgZmFsc2VcclxuXHRoaW50czEgPSBpZiBoaW50czAubGVuZ3RoID4gMCB0aGVuIFtdIGVsc2Ugc2hvd01vdmVzMSB0cnVlXHJcblxyXG5zaG93TW92ZXMxID0gKHdyYXApIC0+XHJcblx0cmVzID0gW11cclxuXHRmb3IgaTAgaW4gcmFuZ2UgMSxTaXplLTFcclxuXHRcdGZvciBqMCBpbiByYW5nZSAxLFNpemUtMVxyXG5cdFx0XHRpZiBiW2kwXVtqMF0gPiAwIFxyXG5cdFx0XHRcdGZvciBpMSBpbiByYW5nZSAxLFNpemUtMVxyXG5cdFx0XHRcdFx0Zm9yIGoxIGluIHJhbmdlIDEsU2l6ZS0xXHJcblx0XHRcdFx0XHRcdGlmIGJbaTFdW2oxXSA+IDAgXHJcblx0XHRcdFx0XHRcdFx0aWYgYltpMF1bajBdLTEgKyBiW2kxXVtqMV0tMSA9PSBsZXZlbC0xXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBiW2kwXVtqMF0gPD0gYltpMV1bajFdIGFuZCAoaTAhPWkxIG9yIGowIT1qMSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0cCA9IGxlZ2FsIHdyYXAsaTAsajAsaTEsajEgXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIHAubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9rID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHAwID0gW2kwLGowXVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHAxID0gW2kxLGoxXVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciBbcTAscTFdIGluIHJlc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgXy5pc0VxdWFsKHAwLHEwKSBhbmQgXy5pc0VxdWFsKHAxLHExKSB0aGVuIG9rID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIF8uaXNFcXVhbChwMCxxMSkgYW5kIF8uaXNFcXVhbChwMSxxMCkgdGhlbiBvayA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgb2sgdGhlbiByZXMucHVzaCBbW2kwLGowXSxbaTEsajFdXVxyXG5cdHJlcyAjIGlubmVow6VsbGVyIGtvb3JkaW5hdGVybmEgZsO2ciBwYXJlbi5cclxuIl19
//# sourceURL=c:\github\2025\016-Twins2\coffee\sketch.coffee