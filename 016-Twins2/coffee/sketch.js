// Generated by CoffeeScript 2.7.0
  // Internt används talen 1..100. Externt visas de som 0..99
  // Då ett tal plockats bort negeras det. Dessa visas gråa och förminskade.
  // Ramens celler innehåller 0.
var ALFABET, Button, COLORS, FREE, Hearts, KEY, SIZE, Size, TILE, b, buttons, copyToClipboard, counter, deathTimestamp, delta, draw, drawHint, drawHintHelp, drawHints, drawLittera, drawNumber, drawPath, drawProgress, drawRect, drawShadow, found, hearts, hints0, hints1, keyPressed, keys, latestPair, legal, level, loadStorage, makeGame, makeLink, makeMove, makePath, maxLevel, message, milliseconds0, milliseconds1, mousePressed, mouseReleased, newGame, numbers, path, pathTimestamp, released, saveStorage, selected, setup, showHint, showLittera, showMoves, showMoves1, showShadow, state, urlGame, within,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

ALFABET = "abcdefghijklmnopqrstuvwxyz";

SIZE = 12;

TILE = 60;

FREE = 0;

COLORS = '#fff #f00 #0f0 #ff0 #f0f #0ff #880 #f88 #088 #8f8'.split(' ');

KEY = '016-Twins2';

Size = null;

level = null;

maxLevel = null;

numbers = null;

b = null;

selected = [];

message = '';

buttons = [];

path = [];

pathTimestamp = null;

deathTimestamp = null;

hearts = null;

milliseconds0 = null;

milliseconds1 = null;

state = 'halted'; // 'running' 'halted'

delta = 0;

found = null;

showLittera = false;

showShadow = true;

showHint = false;

hints0 = [];

hints1 = [];

latestPair = [];

counter = {};

keys = '';

released = true;

Hearts = class Hearts {
  constructor(x1, y3, count = 12, maximum = 12) {
    this.x = x1;
    this.y = y3;
    this.count = count;
    this.maximum = maximum;
  }

  draw() {
    var i, k, len, ref, results, x;
    ref = range(this.maximum);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      x = this.x + 60 * i;
      if (i < this.count) {
        results.push(this.drawHeart(x, this.y, 10, 1, 0, 0));
      } else {
        results.push(this.drawHeart(x, this.y, 10, 0.5, 0.5, 0.5));
      }
    }
    return results;
  }

  drawHeart(x, y, n, r, g, b) {
    var dx, y1, y2;
    fc(r, g, b);
    sc(r, g, b);
    sw(n);
    dx = 1.2 * n;
    y -= 0.8 * n;
    y1 = y + 0.6 * n;
    y2 = y + 2.2 * n;
    line(x - dx, y1, x, y2);
    line(x + dx, y1, x, y2);
    line(x, y + 0.5 * n, x, y + 2 * n);
    sc();
    circle(x - n, y, n);
    return circle(x + n, y, n);
  }

};

Button = class Button {
  constructor(x1, y3, txt1, click) {
    this.x = x1;
    this.y = y3;
    this.txt = txt1;
    this.click = click;
    this.r = 24;
  }

  inside(x, y) {
    return this.r > dist(this.x, this.y, x, y);
  }

  draw() {
    fc(0.5);
    if (level === maxLevel) {
      sc(1);
    } else {
      sc();
    }
    sw(2);
    circle(this.x, this.y, this.r);
    fc(0);
    textSize(30);
    sc();
    return text(this.txt, this.x, this.y);
  }

};

newGame = function(n) {
  //	if n in [0,maxLevel+1] then return 
  if (n === 0 || n === (maxLevel + 2)) {
    return;
  }
  level = constrain(n, 2, maxLevel);
  makeGame();
  return showMoves();
};

saveStorage = function() {
  return localStorage[KEY] = maxLevel;
};

loadStorage = function() {
  return maxLevel = KEY in localStorage ? parseInt(localStorage[KEY]) : maxLevel = 2;
};

setup = function() {
  var canvas;
  canvas = createCanvas(TILE * (SIZE + 1), TILE * (SIZE + 2));
  canvas.position(0, 0); // hides text field used for clipboard copy.
  rectMode(CENTER);
  loadStorage();
  level = maxLevel;
  buttons.push(new Button(180 + 90, height - TILE / 2, '<', function() {
    return newGame(1);
  }));
  buttons.push(new Button(180 + 150, height - TILE / 2, '-', function() {
    return newGame(level - 1);
  }));
  buttons.push(new Button(180 + 210, height - TILE / 2, level, function() {}));
  buttons.push(new Button(180 + 270, height - TILE / 2, '+', function() {
    return newGame(level + 1);
  }));
  buttons.push(new Button(180 + 330, height - TILE / 2, '>', function() {
    return newGame(maxLevel);
  }));
  buttons.push(new Button(720, height - TILE / 2, '?', function() {
    return window.open('https://github.com/ChristerNilsson/Lab/blob/master/2025/016-Twins2/README.md#twins');
  }));
  hearts = new Hearts(60, 35);
  if (-1 !== window.location.href.indexOf('level')) {
    urlGame();
  } else {
    makeGame();
  }
  return showMoves();
};

urlGame = function() {
  var params;
  params = getParameters();
  level = parseInt(params.level);
  b = JSON.parse(params.b);
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  milliseconds0 = millis();
  return state = 'running';
};

makeGame = function() {
  var candidates, i, j, k, l, len, len1, len2, link, m, ref, ref1, ref2;
  hints0 = [];
  hints1 = [];
  latestPair = [];
  if (level === maxLevel) {
    maxLevel = constrain(maxLevel + delta, 2, 100);
  }
  level = constrain(level + delta, 2, 100);
  delta = 0;
  saveStorage();
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  candidates = [];
  ref = range(numbers / 2);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    candidates.push(1 + i % level);
    candidates.push(1 + level - 1 - i % level);
  }
  candidates = _.shuffle(candidates);
  b = new Array(Size);
  ref1 = range(Size);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    b[i] = new Array(Size);
    ref2 = range(Size);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      j = ref2[m];
      if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
        b[i][j] = FREE;
      } else {
        if (Size % 2 === 0) {
          b[i][j] = candidates.pop();
        } else {
          if (i === Math.floor(Size / 2) && j === Math.floor(Size / 2)) {
            b[i][j] = FREE;
          } else {
            b[i][j] = candidates.pop();
          }
        }
      }
    }
  }
  milliseconds0 = millis();
  state = 'running';
  link = makeLink();
  copyToClipboard(link);
  return print(link);
};

makeLink = function() {
  var index, url;
  url = window.location.href + '?';
  index = url.indexOf('?');
  url = url.substring(0, index);
  url += '?b=' + JSON.stringify(b);
  url += '&level=' + level;
  return url;
};

drawRect = function(i, j) {
  fc(0);
  sc(0.25);
  sw(1);
  return rect(TILE * i, TILE * j, TILE, TILE);
};

drawNumber = function(cell, i, j) {
  var c1, c2;
  cell -= 1;
  sw(3);
  c1 = COLORS[modulo(cell, COLORS.length)];
  c2 = COLORS[Math.floor(cell / COLORS.length)];
  if (c1 === c2) {
    c1 = '#000';
  }
  fill(c1);
  stroke(c2);
  return text(cell, TILE * i, TILE * j + (showHint ? 10 : 0));
};

drawHint = function(hints, r, g, b) {
  var i0, i1, index, j0, j1, k, len, results;
  if (showHint) {
    sw(1);
    fc(r, g, b);
    sc();
    textSize(20);
    results = [];
    for (index = k = 0, len = hints.length; k < len; index = ++k) {
      [[i0, j0], [i1, j1]] = hints[index];
      drawHintHelp(ALFABET[index], i0, j0);
      results.push(drawHintHelp(ALFABET[index], i1, j1));
    }
    return results;
  }
};

drawHintHelp = function(cell, i, j) {
  var dx, dy, key;
  key = `${i}-${j}`;
  if (!(key in counter)) {
    counter[key] = 0;
  }
  dx = [-20, 0, 20][modulo(counter[key], 3)];
  dy = [-20, 0, 20][Math.floor(counter[key] / 3)];
  text(cell, TILE * i + dx, TILE * j + dy);
  return counter[key]++;
};

drawShadow = function(i, j) {
  var k, len, results, x, y;
  if (showShadow) {
    sw(3);
    fill(48);
    stroke(48);
    results = [];
    for (k = 0, len = latestPair.length; k < len; k++) {
      [x, y] = latestPair[k];
      if (i === x && j === y) {
        results.push(text(-b[i][j] - 1, TILE * i, TILE * j));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

draw = function() {
  var button, cell, h, i, j, k, l, len, len1, len2, len3, m, ms, o, ref, ref1, w, x, y;
  bg(0.25);
  sw(1);
  buttons[2].txt = level - 1;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  hearts.draw();
  textAlign(CENTER, CENTER);
  textSize(0.8 * TILE);
  push();
  translate((width - TILE * Size) / 2 + TILE / 2, (height - TILE * Size) / 2 + TILE / 2);
  fc(1);
  sc(0);
  ref = range(Size);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(Size);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      drawRect(i, j);
      cell = b[i][j];
      if (state === 'halted') {
        if (cell !== FREE) {
          drawNumber(abs(cell), i, j);
        }
      } else {
        if (cell > 0) {
          drawNumber(cell, i, j);
        } else if (cell !== FREE) {
          drawShadow(i, j);
        }
      }
      if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
        drawLittera(i, j);
      }
    }
  }
  for (o = 0, len3 = selected.length; o < len3; o++) {
    [i, j] = selected[o];
    fc(1, 1, 0, 0.5);
    sc();
    circle(TILE * i, TILE * j, TILE / 2 - 3);
  }
  drawPath();
  counter = {};
  drawHint(hints0, 0, 1, 0);
  drawHint(hints1, 1, 0, 0);
  pop();
  if (state === 'halted') {
    fc(1, 1, 0, 0.5);
    x = width / 2;
    y = height / 2;
    w = Size * TILE;
    h = Size * TILE;
    rect(x, y, w, h);
    ms = round((milliseconds1 - milliseconds0) / 100) / 10;
    if (ms > 0) {
      y = Size * TILE - 10;
      fc(1);
      sc();
      textSize(30);
      text(ms, width - 2.5 * TILE, height - 30);
    }
  }
  if (millis() < deathTimestamp) {
    x = width / 2;
    y = height / 2;
    hearts.drawHeart(x, y, Size * TILE / 5, 1, 0, 0);
  }
  drawHints();
  return drawProgress();
};

drawHints = function() {
  if (hints0.length > 0) {
    fc(0, 1, 0);
    text('*', TILE, height - 0.3 * TILE);
  }
  if (hints1.length > 0) {
    fc(1, 0, 0);
    return text('*', TILE, height - 0.3 * TILE);
  }
};

drawProgress = function() {
  fc(1);
  sc();
  textSize(30);
  return text(numbers, 2.5 * TILE, height - 0.5 * TILE);
};

drawLittera = function(i, j) {
  if (showLittera) {
    push();
    textSize(32);
    fc(0.25);
    sc(0.25);
    if ((j === 0 || j === (Size - 1)) && i < Size - 1) {
      text(' abcdefghik '[i], TILE * i, TILE * j);
    } else if ((i === 0 || i === (Size - 1)) && (0 < j && j < Size - 1)) {
      text(Size - 1 - j, TILE * i, TILE * j);
    }
    return pop();
  }
};

within = function(i, j) {
  return (0 <= i && i < Size) && (0 <= j && j < Size);
};

keyPressed = function() {
  keys += key;
  if (keys.endsWith('QPZM')) {
    keys = '';
    return showHint = !showHint;
  }
};

mouseReleased = function() {
  return released = true;
};

mousePressed = function() {
  var button, i, i1, j, j1, k, len, x, y;
  if (!released) {
    return;
  } else {
    released = true;
  }
  if (state === 'halted') {
    newGame(level);
    return;
  }
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  x = mouseX - (width - TILE * Size) / 2;
  y = mouseY - (height - TILE * Size) / 2;
  [i, j] = [Math.floor(x / TILE), Math.floor(y / TILE)];
  if (!within(i, j)) {
    return;
  }
  if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
    showLittera = false; // not showLittera
    return;
  }
  if (b[i][j] < 0) {
    showShadow = !showShadow;
    return;
  }
  if (selected.length === 0) {
    if (b[i][j] > 0) {
      selected.push([i, j]);
    }
  } else {
    [i1, j1] = selected[0];
    if (i === i1 && j === j1) {
      return selected.pop();
    }
    if (b[i][j] - 1 + b[i1][j1] - 1 !== level - 1) {
      hearts.count -= 1; // Punish one, wrong sum
      deathTimestamp = 200 + millis();
      selected.pop();
    } else {
      path = legal(false, i1, j1, i, j);
      if (path.length === 0) {
        path = legal(true, i1, j1, i, j);
        if (path.length === 0) {
          hearts.count -= 2; // Punish two, anything goes
        } else {
          hearts.count -= 1; // Punish one, wrap
        }
        deathTimestamp = 200 + millis();
      }
      latestPair = [[i, j], [i1, j1]];
      b[i][j] = -b[i][j];
      b[i1][j1] = -b[i1][j1];
      numbers -= 2;
      selected.pop();
      if (numbers === 0) {
        milliseconds1 = millis();
        state = 'halted';
        if (hearts.count >= 0) {
          delta = 1;
        } else {
          delta = -1;
        }
      } else {
        if (level === maxLevel) {
          if (hearts.count < 0) {
            state = 'halted';
            delta = -1;
          }
        }
      }
    }
  }
  return showMoves();
};

makeMove = function(wrap, x, y) {
  if (wrap) {
    return [modulo(x, Size), modulo(y, Size)];
  } else {
    return [x, y];
  }
};

makePath = function(wrap, reached, i, j) {
  var di, dj, i0, index, indexes0, j0, k, key, len, res, turns0;
  res = [];
  key = `${i},${j}`;
  [turns0, i0, j0, indexes0] = reached[key];
  [i, j] = [i0, j0];
  res.push([i, j]);
  pathTimestamp = millis();
  indexes0.reverse();
  for (k = 0, len = indexes0.length; k < len; k++) {
    index = indexes0[k];
    [di, dj] = [[1, 0], [-1, 0], [0, 1], [0, -1]][index];
    [i, j] = makeMove(wrap, i + di, j + dj);
    res.push([i, j]);
  }
  return res;
};

drawPath = function() {
  var i1, i2, j1, j2, k, len;
  if (path.length === 0) {
    return;
  }
  sw(3);
  sc(1, 1, 0);
  [i1, j1] = path[0];
  for (k = 0, len = path.length; k < len; k++) {
    [i2, j2] = path[k];
    if (1 === dist(i1, j1, i2, j2)) {
      line(TILE * i1, TILE * j1, TILE * i2, TILE * j2);
    }
    [i1, j1] = [i2, j2];
  }
  if (millis() > 500 + pathTimestamp) {
    return path = [];
  }
};

// A*
legal = function(wrap, i0, j0, i1, j1) {
  var cands, dx, dy, front, index, indexes0, k, key, l, len, len1, next, reached, ref, start, turns, turns0, x, x0, y, y0;
  start = [
    0,
    i0,
    j0, // turns,x,y,move
    []
  ];
  cands = [];
  cands.push(start);
  reached = {};
  reached[[i0, j0]] = start;
  while (cands.length > 0) {
    front = cands;
    front.sort(function(a, b) {
      return a[0] - b[0];
    });
    cands = [];
    for (k = 0, len = front.length; k < len; k++) {
      [turns0, x0, y0, indexes0] = front[k];
      ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      for (index = l = 0, len1 = ref.length; l < len1; index = ++l) {
        [dx, dy] = ref[index];
        [x, y] = makeMove(wrap, x0 + dx, y0 + dy);
        key = `${x},${y}`;
        turns = turns0;
        if (indexes0.length > 0 && index !== _.last(indexes0)) {
          turns++;
        }
        next = [turns, x, y, indexes0.concat([index])];
        if (x === i1 && y === j1 && turns <= 2) {
          reached[key] = next;
          return makePath(wrap, reached, i1, j1);
        }
        if (within(x, y)) {
          if (b[x][y] <= 0) {
            if (!(key in reached) || reached[key][0] >= next[0]) {
              if (next[0] < 3) {
                reached[key] = next;
                cands.push(next);
              }
            }
          }
        }
      }
    }
  }
  return [];
};

copyToClipboard = function(txt) {
  var copyText;
  copyText = document.getElementById("myClipboard");
  copyText.value = txt;
  copyText.select();
  return document.execCommand("copy");
};

showMoves = function() {
  hints0 = showMoves1(false);
  return hints1 = hints0.length > 0 ? [] : showMoves1(true);
};

showMoves1 = function(wrap) {
  var i0, i1, j0, j1, k, l, len, len1, len2, len3, len4, m, o, ok, p, p0, p1, q, q0, q1, ref, ref1, ref2, ref3, res;
  res = [];
  ref = range(1, Size - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i0 = ref[k];
    ref1 = range(1, Size - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j0 = ref1[l];
      if (b[i0][j0] > 0) {
        ref2 = range(1, Size - 1);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          i1 = ref2[m];
          ref3 = range(1, Size - 1);
          for (o = 0, len3 = ref3.length; o < len3; o++) {
            j1 = ref3[o];
            if (b[i1][j1] > 0) {
              if (b[i0][j0] - 1 + b[i1][j1] - 1 === level - 1) {
                if (b[i0][j0] <= b[i1][j1] && (i0 !== i1 || j0 !== j1)) {
                  p = legal(wrap, i0, j0, i1, j1);
                  if (p.length > 0) {
                    ok = true;
                    p0 = [i0, j0];
                    p1 = [i1, j1];
                    for (q = 0, len4 = res.length; q < len4; q++) {
                      [q0, q1] = res[q];
                      if (_.isEqual(p0, q0) && _.isEqual(p1, q1)) {
                        ok = false;
                      }
                      if (_.isEqual(p0, q1) && _.isEqual(p1, q0)) {
                        ok = false;
                      }
                    }
                    if (ok) {
                      res.push([[i0, j0], [i1, j1]]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return res; // innehåller koordinaterna för paren.
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRTZCOzs7QUFBQSxJQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsZUFBQSxFQUFBLE9BQUEsRUFBQSxjQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUE7RUFBQTs7QUFFN0IsT0FBQSxHQUFVOztBQUNWLElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsSUFBQSxHQUFPOztBQUNQLE1BQUEsR0FBUyxtREFBbUQsQ0FBQyxLQUFwRCxDQUEwRCxHQUExRDs7QUFDVCxHQUFBLEdBQU07O0FBRU4sSUFBQSxHQUFPOztBQUNQLEtBQUEsR0FBUTs7QUFDUixRQUFBLEdBQVM7O0FBQ1QsT0FBQSxHQUFVOztBQUVWLENBQUEsR0FBSTs7QUFDSixRQUFBLEdBQVc7O0FBQ1gsT0FBQSxHQUFVOztBQUNWLE9BQUEsR0FBVTs7QUFDVixJQUFBLEdBQU87O0FBQ1AsYUFBQSxHQUFnQjs7QUFDaEIsY0FBQSxHQUFpQjs7QUFDakIsTUFBQSxHQUFTOztBQUNULGFBQUEsR0FBZ0I7O0FBQ2hCLGFBQUEsR0FBZ0I7O0FBQ2hCLEtBQUEsR0FBUSxTQXhCcUI7O0FBeUI3QixLQUFBLEdBQVE7O0FBQ1IsS0FBQSxHQUFROztBQUNSLFdBQUEsR0FBYzs7QUFDZCxVQUFBLEdBQWE7O0FBQ2IsUUFBQSxHQUFXOztBQUNYLE1BQUEsR0FBUzs7QUFDVCxNQUFBLEdBQVM7O0FBQ1QsVUFBQSxHQUFhOztBQUNiLE9BQUEsR0FBVSxDQUFBOztBQUNWLElBQUEsR0FBTzs7QUFDUCxRQUFBLEdBQVc7O0FBRUwsU0FBTixNQUFBLE9BQUE7RUFDQyxXQUFjLEdBQUEsSUFBQSxVQUFjLEVBQWQsWUFBMEIsRUFBMUIsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFTLElBQUMsQ0FBQTtFQUFsQjs7RUFFZCxJQUFPLENBQUEsQ0FBQTtBQUNSLFFBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtBQUFFO0FBQUE7SUFBQSxLQUFBLHFDQUFBOztNQUNDLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBRCxHQUFLLEVBQUEsR0FBRztNQUNaLElBQUcsQ0FBQSxHQUFJLElBQUMsQ0FBQSxLQUFSO3FCQUNDLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxFQUFhLElBQUMsQ0FBQSxDQUFkLEVBQWdCLEVBQWhCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEdBREQ7T0FBQSxNQUFBO3FCQUdDLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxFQUFhLElBQUMsQ0FBQSxDQUFkLEVBQWdCLEVBQWhCLEVBQW1CLEdBQW5CLEVBQXVCLEdBQXZCLEVBQTJCLEdBQTNCLEdBSEQ7O0lBRkQsQ0FBQTs7RUFETTs7RUFRUCxTQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLENBQUE7QUFDYixRQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7SUFBRyxFQUFBLENBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQO0lBQ0EsRUFBQSxDQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUDtJQUNBLEVBQUEsQ0FBRyxDQUFIO0lBQ0EsRUFBQSxHQUFLLEdBQUEsR0FBSTtJQUNULENBQUEsSUFBSyxHQUFBLEdBQUk7SUFDVCxFQUFBLEdBQUssQ0FBQSxHQUFFLEdBQUEsR0FBSTtJQUNYLEVBQUEsR0FBSyxDQUFBLEdBQUUsR0FBQSxHQUFJO0lBQ1gsSUFBQSxDQUFLLENBQUEsR0FBRSxFQUFQLEVBQVUsRUFBVixFQUFjLENBQWQsRUFBZ0IsRUFBaEI7SUFDQSxJQUFBLENBQUssQ0FBQSxHQUFFLEVBQVAsRUFBVSxFQUFWLEVBQWMsQ0FBZCxFQUFnQixFQUFoQjtJQUNBLElBQUEsQ0FBSyxDQUFMLEVBQU8sQ0FBQSxHQUFFLEdBQUEsR0FBSSxDQUFiLEVBQWUsQ0FBZixFQUFpQixDQUFBLEdBQUUsQ0FBQSxHQUFFLENBQXJCO0lBQ0EsRUFBQSxDQUFBO0lBQ0EsTUFBQSxDQUFPLENBQUEsR0FBRSxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWI7V0FDQSxNQUFBLENBQU8sQ0FBQSxHQUFFLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYjtFQWJVOztBQVhiOztBQTBCTSxTQUFOLE1BQUEsT0FBQTtFQUNDLFdBQWMsR0FBQSxJQUFBLE1BQUEsT0FBQSxDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQUUsSUFBQyxDQUFBO0lBQUksSUFBQyxDQUFBO0lBQVUsSUFBQyxDQUFBLENBQUQsR0FBRztFQUExQjs7RUFDZCxNQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtXQUFTLElBQUMsQ0FBQSxDQUFELEdBQUssSUFBQSxDQUFLLElBQUMsQ0FBQSxDQUFOLEVBQVEsSUFBQyxDQUFBLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYjtFQUFkOztFQUNULElBQU8sQ0FBQSxDQUFBO0lBQ04sRUFBQSxDQUFHLEdBQUg7SUFDQSxJQUFHLEtBQUEsS0FBUyxRQUFaO01BQTBCLEVBQUEsQ0FBRyxDQUFILEVBQTFCO0tBQUEsTUFBQTtNQUFvQyxFQUFBLENBQUEsRUFBcEM7O0lBQ0EsRUFBQSxDQUFHLENBQUg7SUFDQSxNQUFBLENBQU8sSUFBQyxDQUFBLENBQVIsRUFBVSxJQUFDLENBQUEsQ0FBWCxFQUFhLElBQUMsQ0FBQSxDQUFkO0lBQ0EsRUFBQSxDQUFHLENBQUg7SUFDQSxRQUFBLENBQVMsRUFBVDtJQUNBLEVBQUEsQ0FBQTtXQUNBLElBQUEsQ0FBSyxJQUFDLENBQUEsR0FBTixFQUFVLElBQUMsQ0FBQSxDQUFYLEVBQWEsSUFBQyxDQUFBLENBQWQ7RUFSTTs7QUFIUjs7QUFhQSxPQUFBLEdBQVUsUUFBQSxDQUFDLENBQUQsQ0FBQSxFQUFBOztFQUVULElBQUcsTUFBTSxLQUFOLE1BQVEsQ0FBQSxRQUFBLEdBQVMsQ0FBVCxDQUFYO0FBQTRCLFdBQTVCOztFQUNBLEtBQUEsR0FBUSxTQUFBLENBQVUsQ0FBVixFQUFZLENBQVosRUFBYyxRQUFkO0VBQ1IsUUFBQSxDQUFBO1NBQ0EsU0FBQSxDQUFBO0FBTFM7O0FBT1YsV0FBQSxHQUFjLFFBQUEsQ0FBQSxDQUFBO1NBQUcsWUFBWSxDQUFDLEdBQUQsQ0FBWixHQUFvQjtBQUF2Qjs7QUFDZCxXQUFBLEdBQWMsUUFBQSxDQUFBLENBQUE7U0FBRyxRQUFBLEdBQWMsR0FBQSxJQUFPLFlBQVYsR0FBNEIsUUFBQSxDQUFTLFlBQVksQ0FBQyxHQUFELENBQXJCLENBQTVCLEdBQTRELFFBQUEsR0FBVztBQUFyRjs7QUFFZCxLQUFBLEdBQVEsUUFBQSxDQUFBLENBQUE7QUFDUixNQUFBO0VBQUMsTUFBQSxHQUFTLFlBQUEsQ0FBYSxJQUFBLEdBQUssQ0FBQyxJQUFBLEdBQUssQ0FBTixDQUFsQixFQUEyQixJQUFBLEdBQUssQ0FBQyxJQUFBLEdBQUssQ0FBTixDQUFoQztFQUNULE1BQU0sQ0FBQyxRQUFQLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLEVBREQ7RUFHQyxRQUFBLENBQVMsTUFBVDtFQUNBLFdBQUEsQ0FBQTtFQUNBLEtBQUEsR0FBUTtFQUNSLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxNQUFKLENBQVcsR0FBQSxHQUFJLEVBQWYsRUFBa0IsTUFBQSxHQUFPLElBQUEsR0FBSyxDQUE5QixFQUFnQyxHQUFoQyxFQUFxQyxRQUFBLENBQUEsQ0FBQTtXQUFHLE9BQUEsQ0FBUSxDQUFSO0VBQUgsQ0FBckMsQ0FBYjtFQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxNQUFKLENBQVcsR0FBQSxHQUFJLEdBQWYsRUFBbUIsTUFBQSxHQUFPLElBQUEsR0FBSyxDQUEvQixFQUFpQyxHQUFqQyxFQUFzQyxRQUFBLENBQUEsQ0FBQTtXQUFHLE9BQUEsQ0FBUSxLQUFBLEdBQU0sQ0FBZDtFQUFILENBQXRDLENBQWI7RUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksTUFBSixDQUFXLEdBQUEsR0FBSSxHQUFmLEVBQW1CLE1BQUEsR0FBTyxJQUFBLEdBQUssQ0FBL0IsRUFBaUMsS0FBakMsRUFBd0MsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUF4QyxDQUFiO0VBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFJLE1BQUosQ0FBVyxHQUFBLEdBQUksR0FBZixFQUFtQixNQUFBLEdBQU8sSUFBQSxHQUFLLENBQS9CLEVBQWlDLEdBQWpDLEVBQXNDLFFBQUEsQ0FBQSxDQUFBO1dBQUcsT0FBQSxDQUFRLEtBQUEsR0FBTSxDQUFkO0VBQUgsQ0FBdEMsQ0FBYjtFQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxNQUFKLENBQVcsR0FBQSxHQUFJLEdBQWYsRUFBbUIsTUFBQSxHQUFPLElBQUEsR0FBSyxDQUEvQixFQUFpQyxHQUFqQyxFQUFzQyxRQUFBLENBQUEsQ0FBQTtXQUFHLE9BQUEsQ0FBUSxRQUFSO0VBQUgsQ0FBdEMsQ0FBYjtFQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFlLE1BQUEsR0FBTyxJQUFBLEdBQUssQ0FBM0IsRUFBNkIsR0FBN0IsRUFBa0MsUUFBQSxDQUFBLENBQUE7V0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLG9GQUFaO0VBQUgsQ0FBbEMsQ0FBYjtFQUVBLE1BQUEsR0FBUyxJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWMsRUFBZDtFQUVULElBQUcsQ0FBQyxDQUFELEtBQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBckIsQ0FBNkIsT0FBN0IsQ0FBVDtJQUNDLE9BQUEsQ0FBQSxFQUREO0dBQUEsTUFBQTtJQUdDLFFBQUEsQ0FBQSxFQUhEOztTQUlBLFNBQUEsQ0FBQTtBQXBCTzs7QUFzQlIsT0FBQSxHQUFVLFFBQUEsQ0FBQSxDQUFBO0FBQ1YsTUFBQTtFQUFDLE1BQUEsR0FBUyxhQUFBLENBQUE7RUFDVCxLQUFBLEdBQVEsUUFBQSxDQUFTLE1BQU0sQ0FBQyxLQUFoQjtFQUNSLENBQUEsR0FBSSxJQUFJLENBQUMsS0FBTCxDQUFXLE1BQU0sQ0FBQyxDQUFsQjtFQUNKLElBQUEsR0FBTyxDQUFBLGNBQUUsUUFBTztFQUNoQixJQUFHLElBQUEsR0FBSyxFQUFSO0lBQWdCLElBQUEsR0FBSyxHQUFyQjs7RUFDQSxNQUFNLENBQUMsS0FBUCxHQUFpQixTQUFBLENBQVUsQ0FBQSxjQUFFLFFBQU8sRUFBbkIsRUFBcUIsQ0FBckIsRUFBdUIsRUFBdkI7RUFDakIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQSxDQUFVLENBQUEsY0FBRSxRQUFPLEVBQW5CLEVBQXFCLENBQXJCLEVBQXVCLEVBQXZCO0VBQ2pCLE9BQUEsR0FBVSxDQUFDLElBQUEsR0FBSyxDQUFOLENBQUEsR0FBUyxDQUFDLElBQUEsR0FBSyxDQUFOO0VBQ25CLElBQUcsT0FBQSxHQUFRLENBQVIsS0FBVyxDQUFkO0lBQXFCLE9BQUEsSUFBVyxFQUFoQzs7RUFDQSxhQUFBLEdBQWdCLE1BQUEsQ0FBQTtTQUNoQixLQUFBLEdBQVE7QUFYQzs7QUFhVixRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7QUFDWCxNQUFBLFVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUMsTUFBQSxHQUFTO0VBQ1QsTUFBQSxHQUFTO0VBRVQsVUFBQSxHQUFhO0VBRWIsSUFBRyxLQUFBLEtBQVMsUUFBWjtJQUNDLFFBQUEsR0FBVyxTQUFBLENBQVUsUUFBQSxHQUFTLEtBQW5CLEVBQXlCLENBQXpCLEVBQTJCLEdBQTNCLEVBRFo7O0VBRUEsS0FBQSxHQUFRLFNBQUEsQ0FBVSxLQUFBLEdBQU0sS0FBaEIsRUFBc0IsQ0FBdEIsRUFBd0IsR0FBeEI7RUFDUixLQUFBLEdBQVE7RUFDUixXQUFBLENBQUE7RUFFQSxJQUFBLEdBQU8sQ0FBQSxjQUFFLFFBQU87RUFDaEIsSUFBRyxJQUFBLEdBQUssRUFBUjtJQUFnQixJQUFBLEdBQUssR0FBckI7O0VBQ0EsTUFBTSxDQUFDLEtBQVAsR0FBaUIsU0FBQSxDQUFVLENBQUEsY0FBRSxRQUFPLEVBQW5CLEVBQXFCLENBQXJCLEVBQXVCLEVBQXZCO0VBQ2pCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUEsQ0FBVSxDQUFBLGNBQUUsUUFBTyxFQUFuQixFQUFxQixDQUFyQixFQUF1QixFQUF2QjtFQUVqQixPQUFBLEdBQVUsQ0FBQyxJQUFBLEdBQUssQ0FBTixDQUFBLEdBQVMsQ0FBQyxJQUFBLEdBQUssQ0FBTjtFQUNuQixJQUFHLE9BQUEsR0FBUSxDQUFSLEtBQVcsQ0FBZDtJQUFxQixPQUFBLElBQVcsRUFBaEM7O0VBRUEsVUFBQSxHQUFhO0FBQ2I7RUFBQSxLQUFBLHFDQUFBOztJQUNDLFVBQVUsQ0FBQyxJQUFYLENBQWdCLENBQUEsR0FBSSxDQUFBLEdBQUksS0FBeEI7SUFDQSxVQUFVLENBQUMsSUFBWCxDQUFnQixDQUFBLEdBQUksS0FBSixHQUFVLENBQVYsR0FBYyxDQUFBLEdBQUksS0FBbEM7RUFGRDtFQUdBLFVBQUEsR0FBYSxDQUFDLENBQUMsT0FBRixDQUFVLFVBQVY7RUFFYixDQUFBLEdBQUksSUFBSSxLQUFKLENBQVUsSUFBVjtBQUNKO0VBQUEsS0FBQSx3Q0FBQTs7SUFDQyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sSUFBSSxLQUFKLENBQVUsSUFBVjtBQUNQO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxLQUFHLE1BQU0sS0FBTixNQUFRLENBQUEsSUFBQSxHQUFLLENBQUwsRUFBUixLQUFtQixNQUFNLEtBQU4sTUFBUSxDQUFBLElBQUEsR0FBSyxDQUFMLEVBQTlCO1FBQTJDLENBQUMsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQUosR0FBVSxLQUFyRDtPQUFBLE1BQUE7UUFFQyxJQUFHLElBQUEsR0FBTyxDQUFQLEtBQVksQ0FBZjtVQUNDLENBQUMsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQUosR0FBVSxVQUFVLENBQUMsR0FBWCxDQUFBLEVBRFg7U0FBQSxNQUFBO1VBR0MsSUFBRyxDQUFBLGdCQUFLLE9BQU0sRUFBWCxJQUFpQixDQUFBLGdCQUFLLE9BQU0sRUFBL0I7WUFDQyxDQUFDLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFKLEdBQVUsS0FEWDtXQUFBLE1BQUE7WUFHQyxDQUFDLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFKLEdBQVUsVUFBVSxDQUFDLEdBQVgsQ0FBQSxFQUhYO1dBSEQ7U0FGRDs7SUFERDtFQUZEO0VBWUEsYUFBQSxHQUFnQixNQUFBLENBQUE7RUFDaEIsS0FBQSxHQUFRO0VBQ1IsSUFBQSxHQUFPLFFBQUEsQ0FBQTtFQUNQLGVBQUEsQ0FBZ0IsSUFBaEI7U0FDQSxLQUFBLENBQU0sSUFBTjtBQTNDVTs7QUE2Q1gsUUFBQSxHQUFXLFFBQUEsQ0FBQSxDQUFBO0FBQ1gsTUFBQSxLQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QjtFQUM3QixLQUFBLEdBQVEsR0FBRyxDQUFDLE9BQUosQ0FBWSxHQUFaO0VBQ1IsR0FBQSxHQUFNLEdBQUcsQ0FBQyxTQUFKLENBQWMsQ0FBZCxFQUFnQixLQUFoQjtFQUNOLEdBQUEsSUFBTyxLQUFBLEdBQVEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxDQUFmO0VBQ2YsR0FBQSxJQUFPLFNBQUEsR0FBWTtTQUNuQjtBQU5VOztBQVFYLFFBQUEsR0FBVyxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtFQUNWLEVBQUEsQ0FBRyxDQUFIO0VBQ0EsRUFBQSxDQUFHLElBQUg7RUFDQSxFQUFBLENBQUcsQ0FBSDtTQUNBLElBQUEsQ0FBSyxJQUFBLEdBQUssQ0FBVixFQUFZLElBQUEsR0FBSyxDQUFqQixFQUFtQixJQUFuQixFQUF3QixJQUF4QjtBQUpVOztBQU1YLFVBQUEsR0FBYSxRQUFBLENBQUMsSUFBRCxFQUFNLENBQU4sRUFBUSxDQUFSLENBQUE7QUFDYixNQUFBLEVBQUEsRUFBQTtFQUFDLElBQUEsSUFBUTtFQUNSLEVBQUEsQ0FBRyxDQUFIO0VBQ0EsRUFBQSxHQUFLLE1BQU0sUUFBQyxNQUFNLE1BQU0sQ0FBQyxPQUFkO0VBQ1gsRUFBQSxHQUFLLE1BQU0sWUFBQyxPQUFNLE1BQU0sQ0FBQyxPQUFkO0VBQ1gsSUFBRyxFQUFBLEtBQUksRUFBUDtJQUFlLEVBQUEsR0FBRyxPQUFsQjs7RUFDQSxJQUFBLENBQU8sRUFBUDtFQUNBLE1BQUEsQ0FBTyxFQUFQO1NBQ0EsSUFBQSxDQUFLLElBQUwsRUFBVSxJQUFBLEdBQUssQ0FBZixFQUFpQixJQUFBLEdBQUssQ0FBTCxHQUFTLENBQUcsUUFBSCxHQUFpQixFQUFqQixHQUF5QixDQUF6QixDQUExQjtBQVJZOztBQVViLFFBQUEsR0FBWSxRQUFBLENBQUMsS0FBRCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxDQUFBO0FBQ1osTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFHLFFBQUg7SUFDQyxFQUFBLENBQUcsQ0FBSDtJQUNBLEVBQUEsQ0FBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVA7SUFDQSxFQUFBLENBQUE7SUFDQSxRQUFBLENBQVMsRUFBVDtBQUNBO0lBQUEsS0FBQSx1REFBQTtNQUFJLENBQUMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFELEVBQVMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFUO01BQ0gsWUFBQSxDQUFhLE9BQU8sQ0FBQyxLQUFELENBQXBCLEVBQTRCLEVBQTVCLEVBQStCLEVBQS9CO21CQUNBLFlBQUEsQ0FBYSxPQUFPLENBQUMsS0FBRCxDQUFwQixFQUE0QixFQUE1QixFQUErQixFQUEvQjtJQUZELENBQUE7bUJBTEQ7O0FBRFc7O0FBVVosWUFBQSxHQUFlLFFBQUEsQ0FBQyxJQUFELEVBQU0sQ0FBTixFQUFRLENBQVIsQ0FBQTtBQUNmLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtFQUFFLEdBQUEsR0FBTSxDQUFBLENBQUEsQ0FBRyxDQUFILENBQUEsQ0FBQSxDQUFBLENBQVEsQ0FBUixDQUFBO0VBQ04sTUFBRyxHQUFBLElBQVcsUUFBZDtJQUEyQixPQUFPLENBQUMsR0FBRCxDQUFQLEdBQWUsRUFBMUM7O0VBQ0EsRUFBQSxHQUFLLENBQUMsQ0FBQyxFQUFGLEVBQUssQ0FBTCxFQUFPLEVBQVAsQ0FBVSxRQUFDLE9BQU8sQ0FBQyxHQUFELEdBQVMsRUFBakI7RUFDZixFQUFBLEdBQUssQ0FBQyxDQUFDLEVBQUYsRUFBSyxDQUFMLEVBQU8sRUFBUCxDQUFVLFlBQUMsT0FBTyxDQUFDLEdBQUQsSUFBUyxFQUFqQjtFQUNmLElBQUEsQ0FBSyxJQUFMLEVBQVUsSUFBQSxHQUFLLENBQUwsR0FBTyxFQUFqQixFQUFvQixJQUFBLEdBQUssQ0FBTCxHQUFPLEVBQTNCO1NBQ0EsT0FBTyxDQUFDLEdBQUQsQ0FBUDtBQU5hOztBQVFmLFVBQUEsR0FBYSxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtBQUNiLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUMsSUFBRyxVQUFIO0lBQ0MsRUFBQSxDQUFHLENBQUg7SUFDQSxJQUFBLENBQUssRUFBTDtJQUNBLE1BQUEsQ0FBTyxFQUFQO0FBQ0E7SUFBQSxLQUFBLDRDQUFBO01BQUksQ0FBQyxDQUFELEVBQUcsQ0FBSDtNQUNILElBQUcsQ0FBQSxLQUFHLENBQUgsSUFBUyxDQUFBLEtBQUcsQ0FBZjtxQkFDQyxJQUFBLENBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFMLEdBQVMsQ0FBZCxFQUFpQixJQUFBLEdBQUssQ0FBdEIsRUFBd0IsSUFBQSxHQUFLLENBQTdCLEdBREQ7T0FBQSxNQUFBOzZCQUFBOztJQURELENBQUE7bUJBSkQ7O0FBRFk7O0FBU2IsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFDLEVBQUEsQ0FBRyxJQUFIO0VBQ0EsRUFBQSxDQUFHLENBQUg7RUFDQSxPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsR0FBWCxHQUFpQixLQUFBLEdBQU07RUFFdkIsS0FBQSx5Q0FBQTs7SUFDQyxNQUFNLENBQUMsSUFBUCxDQUFBO0VBREQ7RUFFQSxNQUFNLENBQUMsSUFBUCxDQUFBO0VBRUEsU0FBQSxDQUFVLE1BQVYsRUFBaUIsTUFBakI7RUFDQSxRQUFBLENBQVMsR0FBQSxHQUFNLElBQWY7RUFFQSxJQUFBLENBQUE7RUFDQSxTQUFBLENBQVUsQ0FBQyxLQUFBLEdBQU0sSUFBQSxHQUFLLElBQVosQ0FBQSxHQUFrQixDQUFsQixHQUFvQixJQUFBLEdBQUssQ0FBbkMsRUFBc0MsQ0FBQyxNQUFBLEdBQU8sSUFBQSxHQUFLLElBQWIsQ0FBQSxHQUFtQixDQUFuQixHQUFxQixJQUFBLEdBQUssQ0FBaEU7RUFDQSxFQUFBLENBQUcsQ0FBSDtFQUNBLEVBQUEsQ0FBRyxDQUFIO0FBQ0E7RUFBQSxLQUFBLHVDQUFBOztBQUNDO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxRQUFBLENBQVMsQ0FBVCxFQUFXLENBQVg7TUFDQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQ7TUFDWCxJQUFHLEtBQUEsS0FBUyxRQUFaO1FBQ0MsSUFBRyxJQUFBLEtBQVEsSUFBWDtVQUFxQixVQUFBLENBQVcsR0FBQSxDQUFJLElBQUosQ0FBWCxFQUFxQixDQUFyQixFQUF1QixDQUF2QixFQUFyQjtTQUREO09BQUEsTUFBQTtRQUdDLElBQUcsSUFBQSxHQUFPLENBQVY7VUFBaUIsVUFBQSxDQUFXLElBQVgsRUFBZ0IsQ0FBaEIsRUFBa0IsQ0FBbEIsRUFBakI7U0FBQSxNQUNLLElBQUcsSUFBQSxLQUFRLElBQVg7VUFBcUIsVUFBQSxDQUFXLENBQVgsRUFBYSxDQUFiLEVBQXJCO1NBSk47O01BS0EsS0FBRyxNQUFNLEtBQU4sTUFBUSxDQUFBLElBQUEsR0FBSyxDQUFMLEVBQVIsS0FBbUIsTUFBTSxLQUFOLE1BQVEsQ0FBQSxJQUFBLEdBQUssQ0FBTCxFQUE5QjtRQUEyQyxXQUFBLENBQVksQ0FBWixFQUFjLENBQWQsRUFBM0M7O0lBUkQ7RUFERDtFQVVBLEtBQUEsNENBQUE7SUFBSSxDQUFDLENBQUQsRUFBRyxDQUFIO0lBQ0gsRUFBQSxDQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLEdBQVQ7SUFDQSxFQUFBLENBQUE7SUFDQSxNQUFBLENBQU8sSUFBQSxHQUFLLENBQVosRUFBYyxJQUFBLEdBQUssQ0FBbkIsRUFBcUIsSUFBQSxHQUFLLENBQUwsR0FBTyxDQUE1QjtFQUhEO0VBSUEsUUFBQSxDQUFBO0VBRUEsT0FBQSxHQUFVLENBQUE7RUFFVixRQUFBLENBQVMsTUFBVCxFQUFnQixDQUFoQixFQUFrQixDQUFsQixFQUFvQixDQUFwQjtFQUNBLFFBQUEsQ0FBUyxNQUFULEVBQWdCLENBQWhCLEVBQWtCLENBQWxCLEVBQW9CLENBQXBCO0VBRUEsR0FBQSxDQUFBO0VBRUEsSUFBRyxLQUFBLEtBQU8sUUFBVjtJQUNDLEVBQUEsQ0FBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxHQUFUO0lBQ0EsQ0FBQSxHQUFJLEtBQUEsR0FBTTtJQUNWLENBQUEsR0FBSSxNQUFBLEdBQU87SUFDWCxDQUFBLEdBQUksSUFBQSxHQUFLO0lBQ1QsQ0FBQSxHQUFJLElBQUEsR0FBSztJQUNULElBQUEsQ0FBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYO0lBQ0EsRUFBQSxHQUFLLEtBQUEsQ0FBTSxDQUFDLGFBQUEsR0FBYyxhQUFmLENBQUEsR0FBOEIsR0FBcEMsQ0FBQSxHQUF5QztJQUM5QyxJQUFHLEVBQUEsR0FBSyxDQUFSO01BQ0MsQ0FBQSxHQUFJLElBQUEsR0FBSyxJQUFMLEdBQVU7TUFDZCxFQUFBLENBQUcsQ0FBSDtNQUNBLEVBQUEsQ0FBQTtNQUNBLFFBQUEsQ0FBUyxFQUFUO01BQ0EsSUFBQSxDQUFLLEVBQUwsRUFBUSxLQUFBLEdBQU0sR0FBQSxHQUFJLElBQWxCLEVBQXVCLE1BQUEsR0FBTyxFQUE5QixFQUxEO0tBUkQ7O0VBY0EsSUFBRyxNQUFBLENBQUEsQ0FBQSxHQUFXLGNBQWQ7SUFDQyxDQUFBLEdBQUksS0FBQSxHQUFNO0lBQ1YsQ0FBQSxHQUFJLE1BQUEsR0FBTztJQUNYLE1BQU0sQ0FBQyxTQUFQLENBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLElBQUEsR0FBSyxJQUFMLEdBQVUsQ0FBL0IsRUFBaUMsQ0FBakMsRUFBbUMsQ0FBbkMsRUFBcUMsQ0FBckMsRUFIRDs7RUFLQSxTQUFBLENBQUE7U0FDQSxZQUFBLENBQUE7QUEzRE07O0FBNkRQLFNBQUEsR0FBWSxRQUFBLENBQUEsQ0FBQTtFQUNYLElBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBbkI7SUFDQyxFQUFBLENBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQO0lBQ0EsSUFBQSxDQUFLLEdBQUwsRUFBVSxJQUFWLEVBQWdCLE1BQUEsR0FBUyxHQUFBLEdBQU0sSUFBL0IsRUFGRDs7RUFHQSxJQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQW5CO0lBQ0MsRUFBQSxDQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUDtXQUNBLElBQUEsQ0FBSyxHQUFMLEVBQVUsSUFBVixFQUFnQixNQUFBLEdBQVMsR0FBQSxHQUFNLElBQS9CLEVBRkQ7O0FBSlc7O0FBUVosWUFBQSxHQUFlLFFBQUEsQ0FBQSxDQUFBO0VBQ2QsRUFBQSxDQUFHLENBQUg7RUFDQSxFQUFBLENBQUE7RUFDQSxRQUFBLENBQVMsRUFBVDtTQUNBLElBQUEsQ0FBSyxPQUFMLEVBQWEsR0FBQSxHQUFJLElBQWpCLEVBQXNCLE1BQUEsR0FBTyxHQUFBLEdBQUksSUFBakM7QUFKYzs7QUFNZixXQUFBLEdBQWMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7RUFDYixJQUFHLFdBQUg7SUFDQyxJQUFBLENBQUE7SUFDQSxRQUFBLENBQVMsRUFBVDtJQUNBLEVBQUEsQ0FBRyxJQUFIO0lBQ0EsRUFBQSxDQUFHLElBQUg7SUFDQSxLQUFHLE1BQU0sS0FBTixNQUFRLENBQUEsSUFBQSxHQUFLLENBQUwsRUFBUixJQUFvQixDQUFBLEdBQUksSUFBQSxHQUFLLENBQWhDO01BQ0MsSUFBQSxDQUFLLGNBQWMsQ0FBQyxDQUFELENBQW5CLEVBQXVCLElBQUEsR0FBSyxDQUE1QixFQUE4QixJQUFBLEdBQUssQ0FBbkMsRUFERDtLQUFBLE1BRUssS0FBRyxNQUFNLEtBQU4sTUFBUSxDQUFBLElBQUEsR0FBSyxDQUFMLEVBQVIsSUFBb0IsQ0FBQSxDQUFBLEdBQUUsQ0FBRixJQUFFLENBQUYsR0FBSSxJQUFBLEdBQUssQ0FBVCxDQUF2QjtNQUNKLElBQUEsQ0FBSyxJQUFBLEdBQUssQ0FBTCxHQUFPLENBQVosRUFBYyxJQUFBLEdBQUssQ0FBbkIsRUFBcUIsSUFBQSxHQUFLLENBQTFCLEVBREk7O1dBRUwsR0FBQSxDQUFBLEVBVEQ7O0FBRGE7O0FBWWQsTUFBQSxHQUFTLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO1NBQVMsQ0FBQSxDQUFBLElBQUssQ0FBTCxJQUFLLENBQUwsR0FBUyxJQUFULENBQUEsSUFBa0IsQ0FBQSxDQUFBLElBQUssQ0FBTCxJQUFLLENBQUwsR0FBUyxJQUFUO0FBQTNCOztBQUVULFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQTtFQUNaLElBQUEsSUFBUTtFQUNSLElBQUcsSUFBSSxDQUFDLFFBQUwsQ0FBYyxNQUFkLENBQUg7SUFDQyxJQUFBLEdBQU87V0FDUCxRQUFBLEdBQVcsQ0FBSSxTQUZoQjs7QUFGWTs7QUFNYixhQUFBLEdBQWdCLFFBQUEsQ0FBQSxDQUFBO1NBQUcsUUFBQSxHQUFXO0FBQWQ7O0FBRWhCLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUVmLE1BQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtFQUFDLElBQUcsQ0FBSSxRQUFQO0FBQXFCLFdBQXJCO0dBQUEsTUFBQTtJQUFpQyxRQUFBLEdBQVcsS0FBNUM7O0VBRUEsSUFBRyxLQUFBLEtBQU8sUUFBVjtJQUNDLE9BQUEsQ0FBUSxLQUFSO0FBQ0EsV0FGRDs7RUFHQSxLQUFBLHlDQUFBOztJQUNDLElBQUcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxNQUFkLEVBQXFCLE1BQXJCLENBQUg7TUFBb0MsTUFBTSxDQUFDLEtBQVAsQ0FBQSxFQUFwQzs7RUFERDtFQUdBLENBQUEsR0FBSSxNQUFBLEdBQVMsQ0FBQyxLQUFBLEdBQU0sSUFBQSxHQUFLLElBQVosQ0FBQSxHQUFrQjtFQUMvQixDQUFBLEdBQUksTUFBQSxHQUFTLENBQUMsTUFBQSxHQUFPLElBQUEsR0FBSyxJQUFiLENBQUEsR0FBbUI7RUFDaEMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsWUFBQyxJQUFHLEtBQUosYUFBUyxJQUFHLEtBQVo7RUFDUixJQUFHLENBQUksTUFBQSxDQUFPLENBQVAsRUFBUyxDQUFULENBQVA7QUFBdUIsV0FBdkI7O0VBRUEsS0FBRyxNQUFNLEtBQU4sTUFBUSxDQUFBLElBQUEsR0FBSyxDQUFMLEVBQVIsS0FBbUIsTUFBTSxLQUFOLE1BQVEsQ0FBQSxJQUFBLEdBQUssQ0FBTCxFQUE5QjtJQUNDLFdBQUEsR0FBYyxNQUFoQjtBQUNFLFdBRkQ7O0VBSUEsSUFBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFKLEdBQVUsQ0FBYjtJQUNDLFVBQUEsR0FBYSxDQUFJO0FBQ2pCLFdBRkQ7O0VBSUEsSUFBRyxRQUFRLENBQUMsTUFBVCxLQUFtQixDQUF0QjtJQUNDLElBQUcsQ0FBQyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBSixHQUFVLENBQWI7TUFBb0IsUUFBUSxDQUFDLElBQVQsQ0FBYyxDQUFDLENBQUQsRUFBRyxDQUFILENBQWQsRUFBcEI7S0FERDtHQUFBLE1BQUE7SUFHQyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUEsR0FBVSxRQUFRLENBQUMsQ0FBRDtJQUNsQixJQUFHLENBQUEsS0FBRyxFQUFILElBQVUsQ0FBQSxLQUFHLEVBQWhCO0FBQXdCLGFBQU8sUUFBUSxDQUFDLEdBQVQsQ0FBQSxFQUEvQjs7SUFDQSxJQUFHLENBQUMsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQUosR0FBUSxDQUFSLEdBQVksQ0FBQyxDQUFDLEVBQUQsQ0FBSSxDQUFDLEVBQUQsQ0FBakIsR0FBc0IsQ0FBdEIsS0FBMkIsS0FBQSxHQUFNLENBQXBDO01BQ0MsTUFBTSxDQUFDLEtBQVAsSUFBZ0IsRUFBbkI7TUFDRyxjQUFBLEdBQWlCLEdBQUEsR0FBTSxNQUFBLENBQUE7TUFDdkIsUUFBUSxDQUFDLEdBQVQsQ0FBQSxFQUhEO0tBQUEsTUFBQTtNQUtDLElBQUEsR0FBTyxLQUFBLENBQU0sS0FBTixFQUFZLEVBQVosRUFBZSxFQUFmLEVBQWtCLENBQWxCLEVBQW9CLENBQXBCO01BQ1AsSUFBRyxJQUFJLENBQUMsTUFBTCxLQUFlLENBQWxCO1FBQ0MsSUFBQSxHQUFPLEtBQUEsQ0FBTSxJQUFOLEVBQVcsRUFBWCxFQUFjLEVBQWQsRUFBaUIsQ0FBakIsRUFBbUIsQ0FBbkI7UUFDUCxJQUFHLElBQUksQ0FBQyxNQUFMLEtBQWUsQ0FBbEI7VUFDQyxNQUFNLENBQUMsS0FBUCxJQUFnQixFQURqQjtTQUFBLE1BQUE7VUFHQyxNQUFNLENBQUMsS0FBUCxJQUFnQixFQUhqQjs7UUFJQSxjQUFBLEdBQWlCLEdBQUEsR0FBTSxNQUFBLENBQUEsRUFOeEI7O01BT0EsVUFBQSxHQUFhLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQU8sQ0FBQyxFQUFELEVBQUksRUFBSixDQUFQO01BQ2IsQ0FBQyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBSixHQUFVLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQ7TUFDZixDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRCxDQUFMLEdBQVksQ0FBQyxDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRDtNQUNsQixPQUFBLElBQVc7TUFDWCxRQUFRLENBQUMsR0FBVCxDQUFBO01BQ0EsSUFBRyxPQUFBLEtBQVMsQ0FBWjtRQUNDLGFBQUEsR0FBZ0IsTUFBQSxDQUFBO1FBQ2hCLEtBQUEsR0FBUTtRQUNSLElBQUcsTUFBTSxDQUFDLEtBQVAsSUFBZ0IsQ0FBbkI7VUFBMEIsS0FBQSxHQUFRLEVBQWxDO1NBQUEsTUFBQTtVQUF5QyxLQUFBLEdBQVEsQ0FBQyxFQUFsRDtTQUhEO09BQUEsTUFBQTtRQUtDLElBQUcsS0FBQSxLQUFTLFFBQVo7VUFDQyxJQUFHLE1BQU0sQ0FBQyxLQUFQLEdBQWUsQ0FBbEI7WUFDQyxLQUFBLEdBQVE7WUFDUixLQUFBLEdBQVEsQ0FBQyxFQUZWO1dBREQ7U0FMRDtPQWxCRDtLQUxEOztTQWdDQSxTQUFBLENBQUE7QUF2RGM7O0FBeURmLFFBQUEsR0FBVyxRQUFBLENBQUMsSUFBRCxFQUFNLENBQU4sRUFBUSxDQUFSLENBQUE7RUFBYyxJQUFHLElBQUg7V0FBYSxRQUFDLEdBQUssS0FBTixTQUFZLEdBQUssS0FBakIsRUFBYjtHQUFBLE1BQUE7V0FBeUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUF6Qzs7QUFBZDs7QUFFWCxRQUFBLEdBQVcsUUFBQSxDQUFDLElBQUQsRUFBTSxPQUFOLEVBQWMsQ0FBZCxFQUFnQixDQUFoQixDQUFBO0FBQ1gsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU07RUFDTixHQUFBLEdBQU0sQ0FBQSxDQUFBLENBQUcsQ0FBSCxDQUFBLENBQUEsQ0FBQSxDQUFRLENBQVIsQ0FBQTtFQUNOLENBQUMsTUFBRCxFQUFRLEVBQVIsRUFBVyxFQUFYLEVBQWMsUUFBZCxDQUFBLEdBQTBCLE9BQU8sQ0FBQyxHQUFEO0VBQ2pDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQSxHQUFRLENBQUMsRUFBRCxFQUFJLEVBQUo7RUFDUixHQUFHLENBQUMsSUFBSixDQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBVDtFQUNBLGFBQUEsR0FBZ0IsTUFBQSxDQUFBO0VBQ2hCLFFBQVEsQ0FBQyxPQUFULENBQUE7RUFDQSxLQUFBLDBDQUFBOztJQUNDLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBQSxHQUFVLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQU8sQ0FBQyxDQUFDLENBQUYsRUFBSSxDQUFKLENBQVAsRUFBYyxDQUFDLENBQUQsRUFBRyxDQUFILENBQWQsRUFBb0IsQ0FBQyxDQUFELEVBQUcsQ0FBQyxDQUFKLENBQXBCLENBQTJCLENBQUMsS0FBRDtJQUNyQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBUSxRQUFBLENBQVMsSUFBVCxFQUFjLENBQUEsR0FBRSxFQUFoQixFQUFtQixDQUFBLEdBQUUsRUFBckI7SUFDUixHQUFHLENBQUMsSUFBSixDQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBVDtFQUhEO1NBSUE7QUFaVTs7QUFjWCxRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7QUFDWCxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxJQUFHLElBQUksQ0FBQyxNQUFMLEtBQWUsQ0FBbEI7QUFBeUIsV0FBekI7O0VBQ0EsRUFBQSxDQUFHLENBQUg7RUFDQSxFQUFBLENBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQO0VBQ0EsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFBLEdBQVUsSUFBSSxDQUFDLENBQUQ7RUFDZCxLQUFBLHNDQUFBO0lBQUksQ0FBQyxFQUFELEVBQUksRUFBSjtJQUNILElBQUcsQ0FBQSxLQUFLLElBQUEsQ0FBSyxFQUFMLEVBQVEsRUFBUixFQUFXLEVBQVgsRUFBYyxFQUFkLENBQVI7TUFDQyxJQUFBLENBQUssSUFBQSxHQUFLLEVBQVYsRUFBYSxJQUFBLEdBQUssRUFBbEIsRUFBcUIsSUFBQSxHQUFLLEVBQTFCLEVBQTZCLElBQUEsR0FBSyxFQUFsQyxFQUREOztJQUVBLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBQSxHQUFVLENBQUMsRUFBRCxFQUFJLEVBQUo7RUFIWDtFQUlBLElBQUcsTUFBQSxDQUFBLENBQUEsR0FBVyxHQUFBLEdBQU0sYUFBcEI7V0FBdUMsSUFBQSxHQUFPLEdBQTlDOztBQVRVLEVBbllrQjs7O0FBK1k3QixLQUFBLEdBQVEsUUFBQSxDQUFDLElBQUQsRUFBTSxFQUFOLEVBQVMsRUFBVCxFQUFZLEVBQVosRUFBZSxFQUFmLENBQUE7QUFDUixNQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxLQUFBLEdBQVE7SUFBQyxDQUFEO0lBQUcsRUFBSDtJQUFNLEVBQU47SUFBUyxFQUFUOztFQUNSLEtBQUEsR0FBUTtFQUNSLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBWDtFQUNBLE9BQUEsR0FBVSxDQUFBO0VBQ1YsT0FBTyxDQUFDLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBRCxDQUFQLEdBQW1CO0FBQ25CLFNBQU0sS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFyQjtJQUNDLEtBQUEsR0FBUTtJQUNSLEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7YUFBUyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQ7SUFBZixDQUFYO0lBQ0EsS0FBQSxHQUFRO0lBQ1IsS0FBQSx1Q0FBQTtNQUFJLENBQUMsTUFBRCxFQUFRLEVBQVIsRUFBVyxFQUFYLEVBQWMsUUFBZDtBQUNIO01BQUEsS0FBQSx1REFBQTtRQUFJLENBQUMsRUFBRCxFQUFJLEVBQUo7UUFDSCxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBUSxRQUFBLENBQVMsSUFBVCxFQUFjLEVBQUEsR0FBRyxFQUFqQixFQUFvQixFQUFBLEdBQUcsRUFBdkI7UUFDUixHQUFBLEdBQU0sQ0FBQSxDQUFBLENBQUcsQ0FBSCxDQUFBLENBQUEsQ0FBQSxDQUFRLENBQVIsQ0FBQTtRQUNOLEtBQUEsR0FBUTtRQUNSLElBQUcsUUFBUSxDQUFDLE1BQVQsR0FBa0IsQ0FBbEIsSUFBd0IsS0FBQSxLQUFTLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUCxDQUFwQztVQUEwRCxLQUFBLEdBQTFEOztRQUNBLElBQUEsR0FBTyxDQUFDLEtBQUQsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLFFBQVEsQ0FBQyxNQUFULENBQWdCLENBQUMsS0FBRCxDQUFoQixDQUFYO1FBQ1AsSUFBRyxDQUFBLEtBQUcsRUFBSCxJQUFVLENBQUEsS0FBRyxFQUFiLElBQW9CLEtBQUEsSUFBTyxDQUE5QjtVQUNDLE9BQU8sQ0FBQyxHQUFELENBQVAsR0FBZTtBQUNmLGlCQUFPLFFBQUEsQ0FBUyxJQUFULEVBQWMsT0FBZCxFQUFzQixFQUF0QixFQUF5QixFQUF6QixFQUZSOztRQUdBLElBQUcsTUFBQSxDQUFPLENBQVAsRUFBUyxDQUFULENBQUg7VUFDQyxJQUFHLENBQUMsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQUosSUFBVyxDQUFkO1lBQ0MsTUFBRyxHQUFBLElBQVcsUUFBWCxJQUFzQixPQUFPLENBQUMsR0FBRCxDQUFLLENBQUMsQ0FBRCxDQUFaLElBQW1CLElBQUksQ0FBQyxDQUFELENBQWhEO2NBQ0MsSUFBRyxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsQ0FBYjtnQkFDQyxPQUFPLENBQUMsR0FBRCxDQUFQLEdBQWU7Z0JBQ2YsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBRkQ7ZUFERDthQUREO1dBREQ7O01BVEQ7SUFERDtFQUpEO1NBb0JBO0FBMUJPOztBQTRCUixlQUFBLEdBQWtCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFDbEIsTUFBQTtFQUFDLFFBQUEsR0FBVyxRQUFRLENBQUMsY0FBVCxDQUF3QixhQUF4QjtFQUNYLFFBQVEsQ0FBQyxLQUFULEdBQWlCO0VBQ2pCLFFBQVEsQ0FBQyxNQUFULENBQUE7U0FDQSxRQUFRLENBQUMsV0FBVCxDQUFxQixNQUFyQjtBQUppQjs7QUFNbEIsU0FBQSxHQUFZLFFBQUEsQ0FBQSxDQUFBO0VBQ1gsTUFBQSxHQUFTLFVBQUEsQ0FBVyxLQUFYO1NBQ1QsTUFBQSxHQUFZLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQW5CLEdBQTBCLEVBQTFCLEdBQWtDLFVBQUEsQ0FBVyxJQUFYO0FBRmhDOztBQUlaLFVBQUEsR0FBYSxRQUFBLENBQUMsSUFBRCxDQUFBO0FBQ2IsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTTtBQUNOO0VBQUEsS0FBQSxxQ0FBQTs7QUFDQztJQUFBLEtBQUEsd0NBQUE7O01BQ0MsSUFBRyxDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRCxDQUFMLEdBQVksQ0FBZjtBQUNDO1FBQUEsS0FBQSx3Q0FBQTs7QUFDQztVQUFBLEtBQUEsd0NBQUE7O1lBQ0MsSUFBRyxDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRCxDQUFMLEdBQVksQ0FBZjtjQUNDLElBQUcsQ0FBQyxDQUFDLEVBQUQsQ0FBSSxDQUFDLEVBQUQsQ0FBTCxHQUFVLENBQVYsR0FBYyxDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRCxDQUFuQixHQUF3QixDQUF4QixLQUE2QixLQUFBLEdBQU0sQ0FBdEM7Z0JBQ0MsSUFBRyxDQUFDLENBQUMsRUFBRCxDQUFJLENBQUMsRUFBRCxDQUFMLElBQWEsQ0FBQyxDQUFDLEVBQUQsQ0FBSSxDQUFDLEVBQUQsQ0FBbEIsSUFBMkIsQ0FBQyxFQUFBLEtBQUksRUFBSixJQUFVLEVBQUEsS0FBSSxFQUFmLENBQTlCO2tCQUNDLENBQUEsR0FBSSxLQUFBLENBQU0sSUFBTixFQUFXLEVBQVgsRUFBYyxFQUFkLEVBQWlCLEVBQWpCLEVBQW9CLEVBQXBCO2tCQUNKLElBQUcsQ0FBQyxDQUFDLE1BQUYsR0FBVyxDQUFkO29CQUNDLEVBQUEsR0FBSztvQkFDTCxFQUFBLEdBQUssQ0FBQyxFQUFELEVBQUksRUFBSjtvQkFDTCxFQUFBLEdBQUssQ0FBQyxFQUFELEVBQUksRUFBSjtvQkFDTCxLQUFBLHVDQUFBO3NCQUFJLENBQUMsRUFBRCxFQUFJLEVBQUo7c0JBQ0gsSUFBRyxDQUFDLENBQUMsT0FBRixDQUFVLEVBQVYsRUFBYSxFQUFiLENBQUEsSUFBcUIsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxFQUFWLEVBQWEsRUFBYixDQUF4Qjt3QkFBOEMsRUFBQSxHQUFLLE1BQW5EOztzQkFDQSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsRUFBVixFQUFhLEVBQWIsQ0FBQSxJQUFxQixDQUFDLENBQUMsT0FBRixDQUFVLEVBQVYsRUFBYSxFQUFiLENBQXhCO3dCQUE4QyxFQUFBLEdBQUssTUFBbkQ7O29CQUZEO29CQUdBLElBQUcsRUFBSDtzQkFBVyxHQUFHLENBQUMsSUFBSixDQUFTLENBQUMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFELEVBQVMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFULENBQVQsRUFBWDtxQkFQRDttQkFGRDtpQkFERDtlQUREOztVQUREO1FBREQsQ0FERDs7SUFERDtFQUREO1NBaUJBLElBbkJZO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIEludGVybnQgYW52w6RuZHMgdGFsZW4gMS4uMTAwLiBFeHRlcm50IHZpc2FzIGRlIHNvbSAwLi45OVxyXG4jIETDpSBldHQgdGFsIHBsb2NrYXRzIGJvcnQgbmVnZXJhcyBkZXQuIERlc3NhIHZpc2FzIGdyw6VhIG9jaCBmw7ZybWluc2thZGUuXHJcbiMgUmFtZW5zIGNlbGxlciBpbm5laMOlbGxlciAwLlxyXG5cclxuQUxGQUJFVCA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIlxyXG5TSVpFID0gMTJcclxuVElMRSA9IDYwXHJcbkZSRUUgPSAwXHJcbkNPTE9SUyA9ICcjZmZmICNmMDAgIzBmMCAjZmYwICNmMGYgIzBmZiAjODgwICNmODggIzA4OCAjOGY4Jy5zcGxpdCAnICdcclxuS0VZID0gJzAxNi1Ud2luczInXHJcblxyXG5TaXplID0gbnVsbFxyXG5sZXZlbCA9IG51bGxcclxubWF4TGV2ZWw9bnVsbFxyXG5udW1iZXJzID0gbnVsbFxyXG5cclxuYiA9IG51bGxcclxuc2VsZWN0ZWQgPSBbXVxyXG5tZXNzYWdlID0gJydcclxuYnV0dG9ucyA9IFtdXHJcbnBhdGggPSBbXVxyXG5wYXRoVGltZXN0YW1wID0gbnVsbFxyXG5kZWF0aFRpbWVzdGFtcCA9IG51bGxcclxuaGVhcnRzID0gbnVsbFxyXG5taWxsaXNlY29uZHMwID0gbnVsbFxyXG5taWxsaXNlY29uZHMxID0gbnVsbFxyXG5zdGF0ZSA9ICdoYWx0ZWQnICMgJ3J1bm5pbmcnICdoYWx0ZWQnXHJcbmRlbHRhID0gMFxyXG5mb3VuZCA9IG51bGxcclxuc2hvd0xpdHRlcmEgPSBmYWxzZVxyXG5zaG93U2hhZG93ID0gdHJ1ZVxyXG5zaG93SGludCA9IGZhbHNlXHJcbmhpbnRzMCA9IFtdXHJcbmhpbnRzMSA9IFtdXHJcbmxhdGVzdFBhaXIgPSBbXVxyXG5jb3VudGVyID0ge31cclxua2V5cyA9ICcnXHJcbnJlbGVhc2VkID0gdHJ1ZVxyXG5cclxuY2xhc3MgSGVhcnRzXHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHksQGNvdW50PTEyLEBtYXhpbXVtPTEyKSAtPiBcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRmb3IgaSBpbiByYW5nZSBAbWF4aW11bVxyXG5cdFx0XHR4ID0gQHggKyA2MCppXHJcblx0XHRcdGlmIGkgPCBAY291bnRcclxuXHRcdFx0XHRAZHJhd0hlYXJ0IHgsQHksMTAsMSwwLDBcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdEBkcmF3SGVhcnQgeCxAeSwxMCwwLjUsMC41LDAuNVxyXG5cclxuXHRkcmF3SGVhcnQgOiAoeCx5LG4scixnLGIpIC0+XHJcblx0XHRcdGZjIHIsZyxiXHJcblx0XHRcdHNjIHIsZyxiXHJcblx0XHRcdHN3IG5cclxuXHRcdFx0ZHggPSAxLjIqblxyXG5cdFx0XHR5IC09IDAuOCpuXHJcblx0XHRcdHkxID0geSswLjYqblxyXG5cdFx0XHR5MiA9IHkrMi4yKm5cclxuXHRcdFx0bGluZSB4LWR4LHkxLCB4LHkyXHJcblx0XHRcdGxpbmUgeCtkeCx5MSwgeCx5MlxyXG5cdFx0XHRsaW5lIHgseSswLjUqbix4LHkrMipuXHJcblx0XHRcdHNjKClcclxuXHRcdFx0Y2lyY2xlIHgtbix5LG5cclxuXHRcdFx0Y2lyY2xlIHgrbix5LG5cclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEB0eHQsQGNsaWNrKSAtPiBAcj0yNFxyXG5cdGluc2lkZSA6ICh4LHkpIC0+IEByID4gZGlzdCBAeCxAeSx4LHlcclxuXHRkcmF3IDogLT5cclxuXHRcdGZjIDAuNVxyXG5cdFx0aWYgbGV2ZWwgPT0gbWF4TGV2ZWwgdGhlbiBzYyAxIGVsc2Ugc2MoKVxyXG5cdFx0c3cgMlxyXG5cdFx0Y2lyY2xlIEB4LEB5LEByXHJcblx0XHRmYyAwXHJcblx0XHR0ZXh0U2l6ZSAzMFxyXG5cdFx0c2MoKVxyXG5cdFx0dGV4dCBAdHh0LEB4LEB5XHJcblxyXG5uZXdHYW1lID0gKG4pIC0+XHJcbiNcdGlmIG4gaW4gWzAsbWF4TGV2ZWwrMV0gdGhlbiByZXR1cm4gXHJcblx0aWYgbiBpbiBbMCxtYXhMZXZlbCsyXSB0aGVuIHJldHVybiBcclxuXHRsZXZlbCA9IGNvbnN0cmFpbiBuLDIsbWF4TGV2ZWxcclxuXHRtYWtlR2FtZSgpXHJcblx0c2hvd01vdmVzKClcclxuXHJcbnNhdmVTdG9yYWdlID0gLT4gbG9jYWxTdG9yYWdlW0tFWV0gPSBtYXhMZXZlbFxyXG5sb2FkU3RvcmFnZSA9IC0+IG1heExldmVsID0gaWYgS0VZIG9mIGxvY2FsU3RvcmFnZSB0aGVuIHBhcnNlSW50IGxvY2FsU3RvcmFnZVtLRVldIGVsc2UgbWF4TGV2ZWwgPSAyXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y2FudmFzID0gY3JlYXRlQ2FudmFzIFRJTEUqKFNJWkUrMSksVElMRSooU0laRSsyKVxyXG5cdGNhbnZhcy5wb3NpdGlvbiAwLDAgIyBoaWRlcyB0ZXh0IGZpZWxkIHVzZWQgZm9yIGNsaXBib2FyZCBjb3B5LlxyXG5cclxuXHRyZWN0TW9kZSBDRU5URVJcclxuXHRsb2FkU3RvcmFnZSgpXHJcblx0bGV2ZWwgPSBtYXhMZXZlbFxyXG5cdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIDE4MCs5MCxoZWlnaHQtVElMRS8yLCc8JywgLT4gbmV3R2FtZSAxXHJcblx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gMTgwKzE1MCxoZWlnaHQtVElMRS8yLCctJywgLT4gbmV3R2FtZSBsZXZlbC0xXHJcblx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gMTgwKzIxMCxoZWlnaHQtVElMRS8yLGxldmVsLCAtPiBcclxuXHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiAxODArMjcwLGhlaWdodC1USUxFLzIsJysnLCAtPiBuZXdHYW1lIGxldmVsKzFcclxuXHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiAxODArMzMwLGhlaWdodC1USUxFLzIsJz4nLCAtPiBuZXdHYW1lIG1heExldmVsXHJcblx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gNzIwLGhlaWdodC1USUxFLzIsJz8nLCAtPiB3aW5kb3cub3BlbiAnaHR0cHM6Ly9naXRodWIuY29tL0NocmlzdGVyTmlsc3Nvbi9MYWIvYmxvYi9tYXN0ZXIvMjAyNS8wMTYtVHdpbnMyL1JFQURNRS5tZCN0d2lucydcclxuXHJcblx0aGVhcnRzID0gbmV3IEhlYXJ0cyA2MCwzNVxyXG5cclxuXHRpZiAtMSAhPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mICdsZXZlbCdcclxuXHRcdHVybEdhbWUoKVxyXG5cdGVsc2VcclxuXHRcdG1ha2VHYW1lKClcclxuXHRzaG93TW92ZXMoKVxyXG5cclxudXJsR2FtZSA9IC0+XHJcblx0cGFyYW1zID0gZ2V0UGFyYW1ldGVycygpXHJcblx0bGV2ZWwgPSBwYXJzZUludCBwYXJhbXMubGV2ZWxcclxuXHRiID0gSlNPTi5wYXJzZSBwYXJhbXMuYlxyXG5cdFNpemUgPSA0K2xldmVsLy80IFxyXG5cdGlmIFNpemU+MTIgdGhlbiBTaXplPTEyXHJcblx0aGVhcnRzLmNvdW50ICAgPSBjb25zdHJhaW4gMStsZXZlbC8vOCwwLDEyXHJcblx0aGVhcnRzLm1heGltdW0gPSBjb25zdHJhaW4gMStsZXZlbC8vOCwwLDEyIFxyXG5cdG51bWJlcnMgPSAoU2l6ZS0yKSooU2l6ZS0yKVxyXG5cdGlmIG51bWJlcnMlMj09MSB0aGVuIG51bWJlcnMgLT0gMVxyXG5cdG1pbGxpc2Vjb25kczAgPSBtaWxsaXMoKVxyXG5cdHN0YXRlID0gJ3J1bm5pbmcnXHRcclxuXHJcbm1ha2VHYW1lID0gLT5cclxuXHRoaW50czAgPSBbXVxyXG5cdGhpbnRzMSA9IFtdXHJcblxyXG5cdGxhdGVzdFBhaXIgPSBbXVxyXG5cclxuXHRpZiBsZXZlbCA9PSBtYXhMZXZlbFxyXG5cdFx0bWF4TGV2ZWwgPSBjb25zdHJhaW4gbWF4TGV2ZWwrZGVsdGEsMiwxMDBcclxuXHRsZXZlbCA9IGNvbnN0cmFpbiBsZXZlbCtkZWx0YSwyLDEwMFxyXG5cdGRlbHRhID0gMFxyXG5cdHNhdmVTdG9yYWdlKClcclxuXHJcblx0U2l6ZSA9IDQrbGV2ZWwvLzQgXHJcblx0aWYgU2l6ZT4xMiB0aGVuIFNpemU9MTJcclxuXHRoZWFydHMuY291bnQgICA9IGNvbnN0cmFpbiAxK2xldmVsLy84LDAsMTIgXHJcblx0aGVhcnRzLm1heGltdW0gPSBjb25zdHJhaW4gMStsZXZlbC8vOCwwLDEyIFxyXG5cclxuXHRudW1iZXJzID0gKFNpemUtMikqKFNpemUtMilcclxuXHRpZiBudW1iZXJzJTI9PTEgdGhlbiBudW1iZXJzIC09IDFcclxuXHJcblx0Y2FuZGlkYXRlcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgbnVtYmVycy8yXHJcblx0XHRjYW5kaWRhdGVzLnB1c2ggMSArIGkgJSBsZXZlbFxyXG5cdFx0Y2FuZGlkYXRlcy5wdXNoIDEgKyBsZXZlbC0xIC0gaSAlIGxldmVsXHJcblx0Y2FuZGlkYXRlcyA9IF8uc2h1ZmZsZSBjYW5kaWRhdGVzXHJcblxyXG5cdGIgPSBuZXcgQXJyYXkgU2l6ZVxyXG5cdGZvciBpIGluIHJhbmdlIFNpemVcclxuXHRcdGJbaV0gPSBuZXcgQXJyYXkgU2l6ZVxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgU2l6ZVxyXG5cdFx0XHRpZiBpIGluIFswLFNpemUtMV0gb3IgaiBpbiBbMCxTaXplLTFdIHRoZW4gYltpXVtqXSA9IEZSRUVcclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRpZiBTaXplICUgMiA9PSAwXHJcblx0XHRcdFx0XHRiW2ldW2pdID0gY2FuZGlkYXRlcy5wb3AoKVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGlmIGkgPT0gU2l6ZS8vMiBhbmQgaiA9PSBTaXplLy8yXHJcblx0XHRcdFx0XHRcdGJbaV1bal0gPSBGUkVFXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGJbaV1bal0gPSBjYW5kaWRhdGVzLnBvcCgpXHJcblx0bWlsbGlzZWNvbmRzMCA9IG1pbGxpcygpXHJcblx0c3RhdGUgPSAncnVubmluZydcclxuXHRsaW5rID0gbWFrZUxpbmsoKVxyXG5cdGNvcHlUb0NsaXBib2FyZCBsaW5rXHJcblx0cHJpbnQgbGluayBcclxuXHJcbm1ha2VMaW5rID0gLT4gXHJcblx0dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYgKyAnPydcclxuXHRpbmRleCA9IHVybC5pbmRleE9mICc/J1xyXG5cdHVybCA9IHVybC5zdWJzdHJpbmcgMCxpbmRleFxyXG5cdHVybCArPSAnP2I9JyArIEpTT04uc3RyaW5naWZ5IGJcclxuXHR1cmwgKz0gJyZsZXZlbD0nICsgbGV2ZWxcclxuXHR1cmxcclxuXHJcbmRyYXdSZWN0ID0gKGksaikgLT5cclxuXHRmYyAwXHJcblx0c2MgMC4yNVxyXG5cdHN3IDFcclxuXHRyZWN0IFRJTEUqaSxUSUxFKmosVElMRSxUSUxFXHJcblxyXG5kcmF3TnVtYmVyID0gKGNlbGwsaSxqKSAtPlxyXG5cdGNlbGwgLT0gMSBcclxuXHRzdyAzXHJcblx0YzEgPSBDT0xPUlNbY2VsbCUlQ09MT1JTLmxlbmd0aF1cclxuXHRjMiA9IENPTE9SU1tjZWxsLy9DT0xPUlMubGVuZ3RoXVxyXG5cdGlmIGMxPT1jMiB0aGVuIGMxPScjMDAwJ1xyXG5cdGZpbGwgICBjMVxyXG5cdHN0cm9rZSBjMlxyXG5cdHRleHQgY2VsbCxUSUxFKmksVElMRSpqICsgaWYgc2hvd0hpbnQgdGhlbiAxMCBlbHNlIDBcclxuXHJcbmRyYXdIaW50ICA9IChoaW50cyxyLGcsYikgLT4gXHJcblx0aWYgc2hvd0hpbnQgXHJcblx0XHRzdyAxXHJcblx0XHRmYyByLGcsYlxyXG5cdFx0c2MoKVxyXG5cdFx0dGV4dFNpemUgMjBcclxuXHRcdGZvciBbW2kwLGowXSxbaTEsajFdXSxpbmRleCBpbiBoaW50c1xyXG5cdFx0XHRkcmF3SGludEhlbHAgQUxGQUJFVFtpbmRleF0saTAsajBcclxuXHRcdFx0ZHJhd0hpbnRIZWxwIEFMRkFCRVRbaW5kZXhdLGkxLGoxXHJcblxyXG5kcmF3SGludEhlbHAgPSAoY2VsbCxpLGopIC0+XHJcblx0XHRrZXkgPSBcIiN7aX0tI3tqfVwiXHJcblx0XHRpZiBrZXkgbm90IG9mIGNvdW50ZXIgdGhlbiBjb3VudGVyW2tleV0gPSAwXHJcblx0XHRkeCA9IFstMjAsMCwyMF1bY291bnRlcltrZXldICUlIDNdXHJcblx0XHRkeSA9IFstMjAsMCwyMF1bY291bnRlcltrZXldIC8vIDNdXHJcblx0XHR0ZXh0IGNlbGwsVElMRSppK2R4LFRJTEUqaitkeVxyXG5cdFx0Y291bnRlcltrZXldKytcclxuXHJcbmRyYXdTaGFkb3cgPSAoaSxqKSAtPlxyXG5cdGlmIHNob3dTaGFkb3dcclxuXHRcdHN3IDNcclxuXHRcdGZpbGwgNDhcclxuXHRcdHN0cm9rZSA0OCBcclxuXHRcdGZvciBbeCx5XSBpbiBsYXRlc3RQYWlyXHJcblx0XHRcdGlmIGk9PXggYW5kIGo9PXkgXHJcblx0XHRcdFx0dGV4dCAtYltpXVtqXS0xLCBUSUxFKmksVElMRSpqXHRcdFx0XHRcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJnIDAuMjVcclxuXHRzdyAxXHJcblx0YnV0dG9uc1syXS50eHQgPSBsZXZlbC0xXHJcblxyXG5cdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0YnV0dG9uLmRyYXcoKVxyXG5cdGhlYXJ0cy5kcmF3KClcclxuXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR0ZXh0U2l6ZSAwLjggKiBUSUxFXHJcblxyXG5cdHB1c2goKVxyXG5cdHRyYW5zbGF0ZSAod2lkdGgtVElMRSpTaXplKS8yK1RJTEUvMiwgKGhlaWdodC1USUxFKlNpemUpLzIrVElMRS8yIFxyXG5cdGZjIDFcclxuXHRzYyAwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgU2l6ZVxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgU2l6ZVxyXG5cdFx0XHRkcmF3UmVjdCBpLGpcclxuXHRcdFx0Y2VsbCA9IGJbaV1bal1cclxuXHRcdFx0aWYgc3RhdGUgPT0gJ2hhbHRlZCcgXHRcdFxyXG5cdFx0XHRcdGlmIGNlbGwgIT0gRlJFRSB0aGVuIGRyYXdOdW1iZXIgYWJzKGNlbGwpLGksalxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgY2VsbCA+IDAgdGhlbiBkcmF3TnVtYmVyIGNlbGwsaSxqXHJcblx0XHRcdFx0ZWxzZSBpZiBjZWxsICE9IEZSRUUgdGhlbiBkcmF3U2hhZG93IGksalxyXG5cdFx0XHRpZiBpIGluIFswLFNpemUtMV0gb3IgaiBpbiBbMCxTaXplLTFdIHRoZW4gZHJhd0xpdHRlcmEgaSxqXHJcblx0Zm9yIFtpLGpdIGluIHNlbGVjdGVkXHJcblx0XHRmYyAxLDEsMCwwLjVcclxuXHRcdHNjKClcclxuXHRcdGNpcmNsZSBUSUxFKmksVElMRSpqLFRJTEUvMi0zXHJcblx0ZHJhd1BhdGgoKVxyXG5cclxuXHRjb3VudGVyID0ge31cclxuXHJcblx0ZHJhd0hpbnQgaGludHMwLDAsMSwwXHJcblx0ZHJhd0hpbnQgaGludHMxLDEsMCwwXHJcblxyXG5cdHBvcCgpXHJcblxyXG5cdGlmIHN0YXRlPT0naGFsdGVkJ1xyXG5cdFx0ZmMgMSwxLDAsMC41XHJcblx0XHR4ID0gd2lkdGgvMiBcclxuXHRcdHkgPSBoZWlnaHQvMiBcclxuXHRcdHcgPSBTaXplKlRJTEVcclxuXHRcdGggPSBTaXplKlRJTEVcclxuXHRcdHJlY3QgeCx5LHcsaFxyXG5cdFx0bXMgPSByb3VuZCgobWlsbGlzZWNvbmRzMS1taWxsaXNlY29uZHMwKS8xMDApLzEwXHJcblx0XHRpZiBtcyA+IDBcclxuXHRcdFx0eSA9IFNpemUqVElMRS0xMFxyXG5cdFx0XHRmYyAxXHJcblx0XHRcdHNjKClcclxuXHRcdFx0dGV4dFNpemUgMzBcclxuXHRcdFx0dGV4dCBtcyx3aWR0aC0yLjUqVElMRSxoZWlnaHQtMzBcclxuXHRpZiBtaWxsaXMoKSA8IGRlYXRoVGltZXN0YW1wXHJcblx0XHR4ID0gd2lkdGgvMiBcclxuXHRcdHkgPSBoZWlnaHQvMiBcclxuXHRcdGhlYXJ0cy5kcmF3SGVhcnQgeCx5LFNpemUqVElMRS81LDEsMCwwXHJcblxyXG5cdGRyYXdIaW50cygpXHJcblx0ZHJhd1Byb2dyZXNzKClcclxuXHJcbmRyYXdIaW50cyA9IC0+XHJcblx0aWYgaGludHMwLmxlbmd0aCA+IDAgXHJcblx0XHRmYyAwLDEsMCBcclxuXHRcdHRleHQgJyonLCBUSUxFLCBoZWlnaHQgLSAwLjMgKiBUSUxFXHJcblx0aWYgaGludHMxLmxlbmd0aCA+IDAgXHJcblx0XHRmYyAxLDAsMFxyXG5cdFx0dGV4dCAnKicsIFRJTEUsIGhlaWdodCAtIDAuMyAqIFRJTEVcclxuXHJcbmRyYXdQcm9ncmVzcyA9IC0+XHJcblx0ZmMgMVxyXG5cdHNjKClcclxuXHR0ZXh0U2l6ZSAzMFxyXG5cdHRleHQgbnVtYmVycywyLjUqVElMRSxoZWlnaHQtMC41KlRJTEVcclxuXHJcbmRyYXdMaXR0ZXJhID0gKGksaikgLT5cclxuXHRpZiBzaG93TGl0dGVyYVxyXG5cdFx0cHVzaCgpXHJcblx0XHR0ZXh0U2l6ZSAzMlxyXG5cdFx0ZmMgMC4yNVxyXG5cdFx0c2MgMC4yNVxyXG5cdFx0aWYgaiBpbiBbMCxTaXplLTFdIGFuZCBpIDwgU2l6ZS0xXHJcblx0XHRcdHRleHQgJyBhYmNkZWZnaGlrICdbaV0sVElMRSppLFRJTEUqalxyXG5cdFx0ZWxzZSBpZiBpIGluIFswLFNpemUtMV0gYW5kIDA8ajxTaXplLTFcclxuXHRcdFx0dGV4dCBTaXplLTEtaixUSUxFKmksVElMRSpqXHJcblx0XHRwb3AoKVxyXG5cclxud2l0aGluID0gKGksaikgLT4gMCA8PSBpIDwgU2l6ZSBhbmQgMCA8PSBqIDwgU2l6ZVxyXG5cclxua2V5UHJlc3NlZCA9IC0+XHJcblx0a2V5cyArPSBrZXkgXHJcblx0aWYga2V5cy5lbmRzV2l0aCAnUVBaTSdcclxuXHRcdGtleXMgPSAnJ1xyXG5cdFx0c2hvd0hpbnQgPSBub3Qgc2hvd0hpbnRcclxuXHJcbm1vdXNlUmVsZWFzZWQgPSAtPiByZWxlYXNlZCA9IHRydWVcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblxyXG5cdGlmIG5vdCByZWxlYXNlZCB0aGVuIHJldHVybiBlbHNlIHJlbGVhc2VkID0gdHJ1ZVxyXG5cclxuXHRpZiBzdGF0ZT09J2hhbHRlZCcgXHJcblx0XHRuZXdHYW1lIGxldmVsXHJcblx0XHRyZXR1cm5cclxuXHRmb3IgYnV0dG9uIGluIGJ1dHRvbnNcclxuXHRcdGlmIGJ1dHRvbi5pbnNpZGUgbW91c2VYLG1vdXNlWSB0aGVuIGJ1dHRvbi5jbGljaygpXHJcblxyXG5cdHggPSBtb3VzZVggLSAod2lkdGgtVElMRSpTaXplKS8yIFxyXG5cdHkgPSBtb3VzZVkgLSAoaGVpZ2h0LVRJTEUqU2l6ZSkvMiBcclxuXHRbaSxqXSA9IFt4Ly9USUxFLHkvL1RJTEVdXHJcblx0aWYgbm90IHdpdGhpbiBpLGogdGhlbiByZXR1cm5cclxuXHJcblx0aWYgaSBpbiBbMCxTaXplLTFdIG9yIGogaW4gWzAsU2l6ZS0xXSBcclxuXHRcdHNob3dMaXR0ZXJhID0gZmFsc2UgIyBub3Qgc2hvd0xpdHRlcmFcclxuXHRcdHJldHVyblxyXG5cclxuXHRpZiBiW2ldW2pdIDwgMFxyXG5cdFx0c2hvd1NoYWRvdyA9IG5vdCBzaG93U2hhZG93IFxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlmIHNlbGVjdGVkLmxlbmd0aCA9PSAwXHJcblx0XHRpZiBiW2ldW2pdID4gMCB0aGVuIHNlbGVjdGVkLnB1c2ggW2ksal1cclxuXHRlbHNlXHJcblx0XHRbaTEsajFdID0gc2VsZWN0ZWRbMF1cclxuXHRcdGlmIGk9PWkxIGFuZCBqPT1qMSB0aGVuIHJldHVybiBzZWxlY3RlZC5wb3AoKVxyXG5cdFx0aWYgYltpXVtqXS0xICsgYltpMV1bajFdLTEgIT0gbGV2ZWwtMVxyXG5cdFx0XHRoZWFydHMuY291bnQgLT0gMSAjIFB1bmlzaCBvbmUsIHdyb25nIHN1bVxyXG5cdFx0XHRkZWF0aFRpbWVzdGFtcCA9IDIwMCArIG1pbGxpcygpXHJcblx0XHRcdHNlbGVjdGVkLnBvcCgpXHJcblx0XHRlbHNlXHJcblx0XHRcdHBhdGggPSBsZWdhbCBmYWxzZSxpMSxqMSxpLGpcclxuXHRcdFx0aWYgcGF0aC5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdHBhdGggPSBsZWdhbCB0cnVlLGkxLGoxLGksalxyXG5cdFx0XHRcdGlmIHBhdGgubGVuZ3RoID09IDBcclxuXHRcdFx0XHRcdGhlYXJ0cy5jb3VudCAtPSAyICMgUHVuaXNoIHR3bywgYW55dGhpbmcgZ29lc1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGhlYXJ0cy5jb3VudCAtPSAxICMgUHVuaXNoIG9uZSwgd3JhcFxyXG5cdFx0XHRcdGRlYXRoVGltZXN0YW1wID0gMjAwICsgbWlsbGlzKClcclxuXHRcdFx0bGF0ZXN0UGFpciA9IFtbaSxqXSxbaTEsajFdXVxyXG5cdFx0XHRiW2ldW2pdID0gLWJbaV1bal0gXHJcblx0XHRcdGJbaTFdW2oxXSA9IC1iW2kxXVtqMV0gXHJcblx0XHRcdG51bWJlcnMgLT0gMlxyXG5cdFx0XHRzZWxlY3RlZC5wb3AoKVxyXG5cdFx0XHRpZiBudW1iZXJzPT0wXHJcblx0XHRcdFx0bWlsbGlzZWNvbmRzMSA9IG1pbGxpcygpXHJcblx0XHRcdFx0c3RhdGUgPSAnaGFsdGVkJ1xyXG5cdFx0XHRcdGlmIGhlYXJ0cy5jb3VudCA+PSAwIHRoZW4gZGVsdGEgPSAxIGVsc2UgZGVsdGEgPSAtMVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgbGV2ZWwgPT0gbWF4TGV2ZWwgXHJcblx0XHRcdFx0XHRpZiBoZWFydHMuY291bnQgPCAwIFxyXG5cdFx0XHRcdFx0XHRzdGF0ZSA9ICdoYWx0ZWQnXHJcblx0XHRcdFx0XHRcdGRlbHRhID0gLTFcclxuXHRzaG93TW92ZXMoKVxyXG5cclxubWFrZU1vdmUgPSAod3JhcCx4LHkpIC0+IGlmIHdyYXAgdGhlbiBbeCAlJSBTaXplLCB5ICUlIFNpemVdIGVsc2UgW3gseV1cclxuXHJcbm1ha2VQYXRoID0gKHdyYXAscmVhY2hlZCxpLGopIC0+XHJcblx0cmVzID0gW11cclxuXHRrZXkgPSBcIiN7aX0sI3tqfVwiXHJcblx0W3R1cm5zMCxpMCxqMCxpbmRleGVzMF0gPSByZWFjaGVkW2tleV1cclxuXHRbaSxqXSA9IFtpMCxqMF1cclxuXHRyZXMucHVzaCBbaSxqXVxyXG5cdHBhdGhUaW1lc3RhbXAgPSBtaWxsaXMoKVxyXG5cdGluZGV4ZXMwLnJldmVyc2UoKVxyXG5cdGZvciBpbmRleCBpbiBpbmRleGVzMFxyXG5cdFx0W2RpLGRqXSA9IFtbMSwwXSxbLTEsMF0sWzAsMV0sWzAsLTFdXVtpbmRleF1cclxuXHRcdFtpLGpdID0gbWFrZU1vdmUgd3JhcCxpK2RpLGorZGpcclxuXHRcdHJlcy5wdXNoIFtpLGpdXHJcblx0cmVzXHJcblxyXG5kcmF3UGF0aCA9IC0+XHJcblx0aWYgcGF0aC5sZW5ndGggPT0gMCB0aGVuIHJldHVybiBcclxuXHRzdyAzXHJcblx0c2MgMSwxLDBcclxuXHRbaTEsajFdID0gcGF0aFswXVxyXG5cdGZvciBbaTIsajJdIGluIHBhdGhcclxuXHRcdGlmIDEgPT0gZGlzdCBpMSxqMSxpMixqMlxyXG5cdFx0XHRsaW5lIFRJTEUqaTEsVElMRSpqMSxUSUxFKmkyLFRJTEUqajJcclxuXHRcdFtpMSxqMV0gPSBbaTIsajJdXHJcblx0aWYgbWlsbGlzKCkgPiA1MDAgKyBwYXRoVGltZXN0YW1wIHRoZW4gcGF0aCA9IFtdXHJcblxyXG4jIEEqXHJcbmxlZ2FsID0gKHdyYXAsaTAsajAsaTEsajEpIC0+XHJcblx0c3RhcnQgPSBbMCxpMCxqMCxbXV0gIyB0dXJucyx4LHksbW92ZVxyXG5cdGNhbmRzID0gW11cclxuXHRjYW5kcy5wdXNoIHN0YXJ0XHJcblx0cmVhY2hlZCA9IHt9XHJcblx0cmVhY2hlZFtbaTAsajBdXSA9IHN0YXJ0XHJcblx0d2hpbGUgY2FuZHMubGVuZ3RoID4gMFxyXG5cdFx0ZnJvbnQgPSBjYW5kc1xyXG5cdFx0ZnJvbnQuc29ydCAoYSxiKSAtPiBhWzBdLWJbMF1cclxuXHRcdGNhbmRzID0gW11cclxuXHRcdGZvciBbdHVybnMwLHgwLHkwLGluZGV4ZXMwXSBpbiBmcm9udFxyXG5cdFx0XHRmb3IgW2R4LGR5XSxpbmRleCBpbiBbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXV1cclxuXHRcdFx0XHRbeCx5XSA9IG1ha2VNb3ZlIHdyYXAseDArZHgseTArZHlcclxuXHRcdFx0XHRrZXkgPSBcIiN7eH0sI3t5fVwiXHJcblx0XHRcdFx0dHVybnMgPSB0dXJuczBcclxuXHRcdFx0XHRpZiBpbmRleGVzMC5sZW5ndGggPiAwIGFuZCBpbmRleCAhPSBfLmxhc3QoaW5kZXhlczApIHRoZW4gdHVybnMrK1xyXG5cdFx0XHRcdG5leHQgPSBbdHVybnMseCx5LGluZGV4ZXMwLmNvbmNhdCBbaW5kZXhdXVxyXG5cdFx0XHRcdGlmIHg9PWkxIGFuZCB5PT1qMSBhbmQgdHVybnM8PTJcclxuXHRcdFx0XHRcdHJlYWNoZWRba2V5XSA9IG5leHRcclxuXHRcdFx0XHRcdHJldHVybiBtYWtlUGF0aCB3cmFwLHJlYWNoZWQsaTEsajFcclxuXHRcdFx0XHRpZiB3aXRoaW4geCx5XHJcblx0XHRcdFx0XHRpZiBiW3hdW3ldIDw9IDBcclxuXHRcdFx0XHRcdFx0aWYga2V5IG5vdCBvZiByZWFjaGVkIG9yIHJlYWNoZWRba2V5XVswXSA+PSBuZXh0WzBdXHJcblx0XHRcdFx0XHRcdFx0aWYgbmV4dFswXSA8IDNcclxuXHRcdFx0XHRcdFx0XHRcdHJlYWNoZWRba2V5XSA9IG5leHRcclxuXHRcdFx0XHRcdFx0XHRcdGNhbmRzLnB1c2ggbmV4dFxyXG5cdFtdXHJcblxyXG5jb3B5VG9DbGlwYm9hcmQgPSAodHh0KSAtPlxyXG5cdGNvcHlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJteUNsaXBib2FyZFwiXHJcblx0Y29weVRleHQudmFsdWUgPSB0eHQgXHJcblx0Y29weVRleHQuc2VsZWN0KClcclxuXHRkb2N1bWVudC5leGVjQ29tbWFuZCBcImNvcHlcIlxyXG5cclxuc2hvd01vdmVzID0gLT4gXHJcblx0aGludHMwID0gc2hvd01vdmVzMSBmYWxzZVxyXG5cdGhpbnRzMSA9IGlmIGhpbnRzMC5sZW5ndGggPiAwIHRoZW4gW10gZWxzZSBzaG93TW92ZXMxIHRydWVcclxuXHJcbnNob3dNb3ZlczEgPSAod3JhcCkgLT5cclxuXHRyZXMgPSBbXVxyXG5cdGZvciBpMCBpbiByYW5nZSAxLFNpemUtMVxyXG5cdFx0Zm9yIGowIGluIHJhbmdlIDEsU2l6ZS0xXHJcblx0XHRcdGlmIGJbaTBdW2owXSA+IDAgXHJcblx0XHRcdFx0Zm9yIGkxIGluIHJhbmdlIDEsU2l6ZS0xXHJcblx0XHRcdFx0XHRmb3IgajEgaW4gcmFuZ2UgMSxTaXplLTFcclxuXHRcdFx0XHRcdFx0aWYgYltpMV1bajFdID4gMCBcclxuXHRcdFx0XHRcdFx0XHRpZiBiW2kwXVtqMF0tMSArIGJbaTFdW2oxXS0xID09IGxldmVsLTFcclxuXHRcdFx0XHRcdFx0XHRcdGlmIGJbaTBdW2owXSA8PSBiW2kxXVtqMV0gYW5kIChpMCE9aTEgb3IgajAhPWoxKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRwID0gbGVnYWwgd3JhcCxpMCxqMCxpMSxqMSBcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgcC5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2sgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cDAgPSBbaTAsajBdXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cDEgPSBbaTEsajFdXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIFtxMCxxMV0gaW4gcmVzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiBfLmlzRXF1YWwocDAscTApIGFuZCBfLmlzRXF1YWwocDEscTEpIHRoZW4gb2sgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgXy5pc0VxdWFsKHAwLHExKSBhbmQgXy5pc0VxdWFsKHAxLHEwKSB0aGVuIG9rID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiBvayB0aGVuIHJlcy5wdXNoIFtbaTAsajBdLFtpMSxqMV1dXHJcblx0cmVzICMgaW5uZWjDpWxsZXIga29vcmRpbmF0ZXJuYSBmw7ZyIHBhcmVuLlxyXG4iXX0=
//# sourceURL=c:\github\2025\016-Twins2\coffee\sketch.coffee