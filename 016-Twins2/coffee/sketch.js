// Generated by CoffeeScript 2.7.0
  // Internt används talen 1..100. Externt visas de som 0..99
  // Då ett tal plockats bort negeras det. Dessa visas gråa och förminskade.
  // Ramens celler innehåller 0.
var ALFABET, Button, COLORS, FREE, Hearts, KEY, Size, StopLight, TILE, b, buttons, counter, deathTimestamp, delta, diagonal, draw, drawHints, drawLittera, drawNumber, drawPath, drawRect, drawShadow, echo, found, handlePress, handleRelease, hearts, hints0, hints1, keys, latestPair, legal, level, loadStorage, makeGame, makeMove, makePath, margin, maxLevel, message, milliseconds0, milliseconds1, mousePressed, mouseReleased, newGame, numbers, path, pathTimestamp, released, saveStorage, selected, setup, showLittera, showMoves, showMoves1, showShadow, state, stopLight, touchEnded, touchStarted, trans, urlGame, within,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

echo = console.log;

ALFABET = "abcdefghijklmnopqrstuvwxyz";

// SIZE = 12
TILE = 60;

FREE = 0;

COLORS = '#fff #f00 #0f0 #ff0 #f0f #0ff #880 #f88 #088 #8f8'.split(' ');

KEY = '016-Twins2';

Size = null;

level = null;

maxLevel = null;

numbers = null;

b = null;

selected = [];

message = '';

buttons = [];

stopLight = null;

path = [];

pathTimestamp = null;

deathTimestamp = null;

hearts = null;

milliseconds0 = null;

milliseconds1 = null;

state = 'halted'; // 'running' 'halted'

delta = 0;

found = null;

showLittera = true;

showShadow = true;

// showHint = true # false
hints0 = [];

hints1 = [];

latestPair = [];

counter = {};

keys = '';

released = true;

margin = 0;

diagonal = 0;

Hearts = class Hearts {
  constructor(x1, y3, count = 12, maximum = 24) {
    this.x = x1;
    this.y = y3;
    this.count = count;
    this.maximum = maximum;
  }

  draw() {
    var i, k, l, len, len1, ref, ref1, results, results1, x, y;
    if (width < height) { // portrait
      ref = range(this.maximum);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        x = this.x + i * width / 12;
        results.push(this.drawHeart(x, this.y, i < this.count ? 'red' : 'gray')); // landscape
      }
      return results;
    } else {
      y = this.y - 0.6 * height / 12;
      ref1 = range(this.maximum);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        y += height / 12; //TILE*i + TILE*0.3
        results1.push(this.drawHeart(this.x, y, i < this.count ? 'red' : 'gray'));
      }
      return results1;
    }
  }

  drawHeart(x, y, col) {
    var dx, tile, y1, y2;
    tile = width < height ? width / 12 : height / 12;
    fill(col);
    stroke(col);
    sw(0.3 * tile);
    dx = 0.2 * tile;
    y1 = y + 0.1 * tile;
    y2 = y + 0.4 * tile;
    line(x - dx, y1, x, y2);
    line(x + dx, y1, x, y2);
    line(x, y1, x, y2);
    sc();
    circle(x - 0.2 * tile, y, 0.2 * tile);
    return circle(x + 0.2 * tile, y, 0.2 * tile);
  }

};

Button = class Button {
  constructor(x1, y3, txt, click) {
    this.x = x1;
    this.y = y3;
    this.txt = txt;
    this.click = click;
    this.r = 0.025 * diagonal;
  }

  inside(x, y) {
    return this.r > dist(this.x, this.y, x, y);
  }

  draw() {
    fc(0.5);
    if (level === maxLevel) {
      sc(1);
    } else {
      sc();
    }
    sw(2);
    circle(this.x, this.y, this.r);
    fc(0);
    textSize(0.03 * diagonal);
    sc();
    return text(this.txt, this.x, this.y);
  }

};

StopLight = class StopLight {
  constructor(x1, y3, txt) {
    this.x = x1;
    this.y = y3;
    this.txt = txt;
    this.r = 0.025 * diagonal;
    this.color = 'yellow';
  }

  inside(x, y) {
    return this.r > dist(this.x, this.y, x, y);
  }

  draw() {
    fc(0.5);
    if (level === maxLevel) {
      sc(1);
    } else {
      sc();
    }
    sw(2);
    fill(this.color);
    circle(this.x, this.y, this.r);
    fill('black');
    textSize(0.03 * diagonal);
    sc();
    return text(this.txt, this.x, this.y);
  }

};

newGame = function(n) {
  //	if n in [0,maxLevel+1] then return 
  if (n === 0 || n === (maxLevel + 2)) {
    return;
  }
  level = constrain(n, 2, maxLevel);
  makeGame();
  return showMoves();
};

saveStorage = function() {
  return localStorage[KEY] = maxLevel;
};

loadStorage = function() {
  return maxLevel = KEY in localStorage ? parseInt(localStorage[KEY]) : maxLevel = 2;
};

setup = function() {
  var canvas, dx, dy, w2, x, y;
  canvas = createCanvas(window.innerWidth, window.innerHeight);
  // noLoop()
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  loadStorage();
  level = maxLevel;
  dx = width / 8;
  dy = height / 8;
  w2 = dx;
  diagonal = sqrt(width * width + height * height);
  if (width < height) { // portrait
    margin = (height - width) / 2;
    y = height - margin / 2;
    stopLight = new StopLight(w2, y, level);
    buttons.push(stopLight);
    buttons.push(new Button(w2 + 1 * dx, y, '?', function() {
      return window.open('https://github.com/ChristerNilsson/2025/tree/main/016-Twins2#readme');
    }));
    buttons.push(new Button(w2 + 2 * dx, y, '-', function() {
      return newGame(level - 1);
    }));
    buttons.push(new Button(w2 + 3 * dx, y, '+', function() {
      return newGame(level + 1);
    }));
    buttons.push(new Button(w2 + 4 * dx, y, '<', function() {
      return newGame(1);
    }));
    buttons.push(new Button(w2 + 5 * dx, y, '>', function() {
      return newGame(maxLevel);
    }));
    hearts = new Hearts(0.35 * TILE, 0.4 * TILE); // landscape
  } else {
    margin = (width - height) / 2;
    x = width - margin / 2;
    stopLight = new StopLight(x, 1 * dy, level);
    buttons.push(stopLight);
    buttons.push(new Button(x, 2 * dy, '?', function() {
      return window.open('https://github.com/ChristerNilsson/2025/tree/main/016-Twins2#readme');
    }));
    buttons.push(new Button(x, 3 * dy, '<', function() {
      return newGame(1);
    }));
    buttons.push(new Button(x, 4 * dy, '>', function() {
      return newGame(maxLevel);
    }));
    buttons.push(new Button(x, 5 * dy, '-', function() {
      return newGame(level - 1);
    }));
    buttons.push(new Button(x, 6 * dy, '+', function() {
      return newGame(level + 1);
    }));
    hearts = new Hearts(margin / 2, 0);
  }
  if (-1 !== window.location.href.indexOf('level')) {
    urlGame();
  } else {
    makeGame();
  }
  return showMoves();
};

trans = function([[a, b], [c, d]]) {
  return `${' abcdefghij'[a]}${b - 1}${' abcdefghij'[c]}${d - 1}`;
};

urlGame = function() {
  var params;
  params = getParameters();
  level = parseInt(params.level);
  b = JSON.parse(params.b);
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  milliseconds0 = millis();
  return state = 'running';
};

makeGame = function() {
  var candidates, i, j, k, l, len, len1, len2, m, ref, ref1, ref2;
  hints0 = [];
  hints1 = [];
  latestPair = [];
  if (level === maxLevel) {
    maxLevel = constrain(maxLevel + delta, 2, 100);
  }
  level = constrain(level + delta, 2, 100);
  delta = 0;
  saveStorage();
  Size = 4 + Math.floor(level / 4);
  if (Size > 12) {
    Size = 12;
  }
  hearts.count = constrain(1 + Math.floor(level / 8), 0, 12);
  hearts.maximum = constrain(1 + Math.floor(level / 8), 0, 12);
  numbers = (Size - 2) * (Size - 2);
  if (numbers % 2 === 1) {
    numbers -= 1;
  }
  candidates = [];
  ref = range(numbers / 2);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    candidates.push(1 + i % level);
    candidates.push(1 + level - 1 - i % level);
  }
  candidates = _.shuffle(candidates);
  b = new Array(Size);
  ref1 = range(Size);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    b[i] = new Array(Size);
    ref2 = range(Size);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      j = ref2[m];
      if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
        b[i][j] = FREE;
      } else {
        if (Size % 2 === 0) {
          b[i][j] = candidates.pop();
        } else {
          if (i === Math.floor(Size / 2) && j === Math.floor(Size / 2)) {
            b[i][j] = FREE;
          } else {
            b[i][j] = candidates.pop();
          }
        }
      }
    }
  }
  milliseconds0 = millis();
  return state = 'running';
};

drawLittera = function(i, j) {
  if (showLittera) {
    push();
    textSize(32);
    fc(0.25);
    sc(0.25);
    if (j === Size - 1 && i < Size - 1) {
      text(' abcdefghij '[i], TILE * i, TILE * j);
    } else if (i === 0 && (0 < j && j < Size - 1)) {
      text(j - 1, TILE * i, TILE * j);
    }
    return pop();
  }
};

drawRect = function(i, j) {
  fc(0);
  sc(0.25);
  sw(1);
  return rect(TILE * i, TILE * j, TILE, TILE);
};

drawNumber = function(cell, i, j) {
  var c1, c2;
  cell -= 1;
  sw(3);
  c1 = COLORS[modulo(cell, COLORS.length)];
  c2 = COLORS[Math.floor(cell / COLORS.length)];
  if (c1 === c2) {
    c1 = '#000';
  }
  fill(c1);
  stroke(c2);
  return text(cell, TILE * i, TILE * j + 0); // if showHint then 10 else 0
};


// drawHint  = (hints,r,g,b) -> 
// 	if showHint 
// 		sw 1
// 		fc r,g,b
// 		sc()
// 		textSize 0.05 * diagonal
// 		for [[i0,j0],[i1,j1]],index in hints
// 			drawHintHelp ALFABET[index],i0,j0
// 			drawHintHelp ALFABET[index],i1,j1

// drawHintHelp = (cell,i,j) ->
// 		key = "#{i}-#{j}"
// 		if key not of counter then counter[key] = 0
// 		dx = [-20,0,20][counter[key] %% 3]
// 		dy = [-20,0,20][counter[key] // 3]
// 		text cell,TILE*i+dx,TILE*j+dy
// 		counter[key]++
drawShadow = function(i, j) {
  var k, len, results, x, y;
  if (showShadow) {
    sw(3);
    fill(48);
    stroke(48);
    results = [];
    for (k = 0, len = latestPair.length; k < len; k++) {
      [x, y] = latestPair[k];
      if (i === x && j === y) {
        results.push(text(-b[i][j] - 1, TILE * i, TILE * j));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

draw = function() {
  var button, cell, h, i, j, k, l, len, len1, len2, len3, m, ms, o, ref, ref1, w, x, y;
  bg(0.25);
  sw(1);
  buttons[0].txt = level - 1;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  hearts.draw();
  if (width < height) {
    TILE = width / Size;
  } else {
    TILE = height / Size;
  }
  textAlign(CENTER, CENTER);
  textSize(0.8 * TILE);
  push();
  translate((width - TILE * Size) / 2 + TILE / 2, (height - TILE * Size) / 2 + TILE / 2);
  fc(1);
  sc(0);
  ref = range(Size);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(Size);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      drawRect(i, j);
      cell = b[i][j];
      if (state === 'halted') {
        if (cell !== FREE) {
          drawNumber(abs(cell), i, j);
        }
      } else {
        if (cell > 0) {
          drawNumber(cell, i, j);
        } else if (cell !== FREE) {
          drawShadow(i, j);
        }
      }
      if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
        drawLittera(i, j);
      }
    }
  }
  for (o = 0, len3 = selected.length; o < len3; o++) {
    [i, j] = selected[o];
    fc(1, 1, 0, 0.5);
    sc();
    circle(TILE * i, TILE * j, TILE / 2 - 3);
  }
  drawPath();
  counter = {};
  // drawHint hints0,0,1,0
  // drawHint hints1,1,0,0
  pop();
  if (state === 'halted') {
    fc(1, 1, 0, 0.5);
    x = width / 2;
    y = height / 2;
    w = Size * TILE;
    h = Size * TILE;
    rect(x, y, w, h);
    ms = round((milliseconds1 - milliseconds0) / 100) / 10;
    if (ms > 0) {
      y = Size * TILE - 10;
      fc(1);
      sc();
      textSize(30);
    }
  }
  // text ms,width-2.5*TILE,height-30
  if (millis() < deathTimestamp) {
    x = width / 2;
    y = height / 2;
    hearts.drawHeart(x, y, Size * TILE / 5, 'red');
  }
  return drawHints();
};

drawHints = function() {
  var dx, dy, x, y;
  if (width < height) { // portrait
    dx = width / 8;
    margin = (height - width) / 2;
    x = width - margin / 2;
    y = height - margin / 2;
    stopLight.color = 'red';
    if (hints0.length > 0) {
      stopLight.color = 'green';
    }
    
    // circle x, y, 0.025 * diagonal
    if (hints1.length > 0) {
      return stopLight.color = 'yellow';
    }
  } else {
    // circle x, y, 0.025 * diagonal
    margin = (width - height) / 2;
    x = width - margin / 2;
    dy = height / 8;
    stopLight.color = 'red';
    if (hints0.length > 0) {
      stopLight.color = 'green';
    }
    
    // circle x, 7*dy, 0.025 * diagonal
    if (hints1.length > 0) {
      return stopLight.color = 'yellow';
    }
  }
};


// circle x, 7*dy, 0.025 * diagonal
within = function(i, j) {
  return (0 <= i && i < Size) && (0 <= j && j < Size);
};

// keyPressed = ->
// 	keys += key 
// 	if keys.endsWith 'QPZM'
// 		keys = '' 
// 		showHint = not showHint

// === För iPad och mobiler ===
touchStarted = function() {
  handlePress();
  return false;
};

touchEnded = function() {
  handleRelease();
  return false;
};

// === För PC med mus ===
mousePressed = function() {
  return handlePress();
};

mouseReleased = function() {
  return handleRelease();
};

handleRelease = function() {
  return released = true;
};

handlePress = function() {
  var button, i, i1, j, j1, k, len, x, y;
  if (!released) {
    return;
  }
  released = false;
  if (state === 'halted') {
    newGame(level);
    return;
  }
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  x = mouseX - (width - TILE * Size) / 2;
  y = mouseY - (height - TILE * Size) / 2;
  [i, j] = [Math.floor(x / TILE), Math.floor(y / TILE)];
  if (!within(i, j)) {
    return;
  }
  if ((i === 0 || i === (Size - 1)) || (j === 0 || j === (Size - 1))) {
    showLittera = false; // not showLittera
    return;
  }
  if (b[i][j] < 0) {
    showShadow = !showShadow;
    return;
  }
  if (selected.length === 0) {
    if (b[i][j] > 0) {
      selected.push([i, j]);
    }
  } else {
    [i1, j1] = selected[0];
    if (i === i1 && j === j1) {
      return selected.pop();
    }
    if (b[i][j] - 1 + b[i1][j1] - 1 !== level - 1) {
      hearts.count -= 1; // Punish one, wrong sum
      deathTimestamp = 200 + millis();
      selected.pop();
    } else {
      path = legal(false, i1, j1, i, j);
      if (path.length === 0) {
        path = legal(true, i1, j1, i, j);
        if (path.length === 0) {
          hearts.count -= 2; // Punish two, anything goes
        } else {
          hearts.count -= 1; // Punish one, wrap
        }
        deathTimestamp = 200 + millis();
      }
      latestPair = [[i, j], [i1, j1]];
      b[i][j] = -b[i][j];
      b[i1][j1] = -b[i1][j1];
      numbers -= 2;
      selected.pop();
      if (numbers === 0) {
        milliseconds1 = millis();
        state = 'halted';
        if (hearts.count >= 0) {
          delta = 1;
        } else {
          delta = -1;
        }
      } else {
        if (level === maxLevel) {
          if (hearts.count < 0) {
            state = 'halted';
            delta = -1;
          }
        }
      }
    }
  }
  return showMoves();
};

makeMove = function(wrap, x, y) {
  if (wrap) {
    return [modulo(x, Size), modulo(y, Size)];
  } else {
    return [x, y];
  }
};

makePath = function(wrap, reached, i, j) {
  var di, dj, i0, index, indexes0, j0, k, key, len, res, turns0;
  res = [];
  key = `${i},${j}`;
  [turns0, i0, j0, indexes0] = reached[key];
  [i, j] = [i0, j0];
  res.push([i, j]);
  pathTimestamp = millis();
  indexes0.reverse();
  for (k = 0, len = indexes0.length; k < len; k++) {
    index = indexes0[k];
    [di, dj] = [[1, 0], [-1, 0], [0, 1], [0, -1]][index];
    [i, j] = makeMove(wrap, i + di, j + dj);
    res.push([i, j]);
  }
  return res;
};

drawPath = function() {
  var i1, i2, j1, j2, k, len;
  if (path.length === 0) {
    return;
  }
  sw(3);
  sc(1, 1, 0);
  [i1, j1] = path[0];
  for (k = 0, len = path.length; k < len; k++) {
    [i2, j2] = path[k];
    if (1 === dist(i1, j1, i2, j2)) {
      line(TILE * i1, TILE * j1, TILE * i2, TILE * j2);
    }
    [i1, j1] = [i2, j2];
  }
  if (millis() > 500 + pathTimestamp) {
    return path = [];
  }
};

// A*
legal = function(wrap, i0, j0, i1, j1) {
  var cands, dx, dy, front, index, indexes0, k, key, l, len, len1, next, reached, ref, start, turns, turns0, x, x0, y, y0;
  start = [
    0,
    i0,
    j0, // turns,x,y,move
    []
  ];
  cands = [];
  cands.push(start);
  reached = {};
  reached[[i0, j0]] = start;
  while (cands.length > 0) {
    front = cands;
    front.sort(function(a, b) {
      return a[0] - b[0];
    });
    cands = [];
    for (k = 0, len = front.length; k < len; k++) {
      [turns0, x0, y0, indexes0] = front[k];
      ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      for (index = l = 0, len1 = ref.length; l < len1; index = ++l) {
        [dx, dy] = ref[index];
        [x, y] = makeMove(wrap, x0 + dx, y0 + dy);
        key = `${x},${y}`;
        turns = turns0;
        if (indexes0.length > 0 && index !== _.last(indexes0)) {
          turns++;
        }
        next = [turns, x, y, indexes0.concat([index])];
        if (x === i1 && y === j1 && turns <= 2) {
          reached[key] = next;
          return makePath(wrap, reached, i1, j1);
        }
        if (within(x, y)) {
          if (b[x][y] <= 0) {
            if (!(key in reached) || reached[key][0] >= next[0]) {
              if (next[0] < 3) {
                reached[key] = next;
                cands.push(next);
              }
            }
          }
        }
      }
    }
  }
  return [];
};

showMoves = function() {
  hints0 = showMoves1(false);
  return hints1 = hints0.length > 0 ? [] : showMoves1(true);
};

showMoves1 = function(wrap) {
  var i0, i1, item, j0, j1, k, l, len, len1, len2, len3, len4, m, o, ok, p, p0, p1, q, q0, q1, ref, ref1, ref2, ref3, res, start;
  start = new Date();
  res = [];
  ref = range(1, Size - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i0 = ref[k];
    ref1 = range(1, Size - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j0 = ref1[l];
      if (b[i0][j0] > 0) {
        ref2 = range(1, Size - 1);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          i1 = ref2[m];
          ref3 = range(1, Size - 1);
          for (o = 0, len3 = ref3.length; o < len3; o++) {
            j1 = ref3[o];
            if (b[i1][j1] > 0) {
              if (b[i0][j0] - 1 + b[i1][j1] - 1 === level - 1) {
                if (b[i0][j0] <= b[i1][j1] && (i0 !== i1 || j0 !== j1)) {
                  p = legal(wrap, i0, j0, i1, j1);
                  if (p.length > 0) {
                    ok = true;
                    p0 = [i0, j0];
                    p1 = [i1, j1];
                    for (q = 0, len4 = res.length; q < len4; q++) {
                      [q0, q1] = res[q];
                      if (_.isEqual(p0, q0) && _.isEqual(p1, q1)) {
                        ok = false;
                      }
                      if (_.isEqual(p0, q1) && _.isEqual(p1, q0)) {
                        ok = false;
                      }
                    }
                    if (ok) {
                      res.push([[i0, j0], [i1, j1]]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  wrap = wrap ? 'wrap' : '';
  echo(wrap, ((function() {
    var len5, r, results;
    results = [];
    for (r = 0, len5 = res.length; r < len5; r++) {
      item = res[r];
      results.push(trans(item));
    }
    return results;
  })()).join(' '), `${(new Date()) - start}ms`);
  return res; // innehåller koordinaterna för paren.
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\016-Twins2\coffee\sketch.coffee