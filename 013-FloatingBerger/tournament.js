// Generated by CoffeeScript 2.7.0
  // ½
var RESULTS, alignCenter, alignLeft, alignRight, ass, calcPoints, convert, convertLong, display, echo, expand, findNumberOfDecimals, frirond, longForm, longs, main, makeBerger, makeFairPair, other, parseQuery, parseTextarea, players, prettify, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, settings, shortForm, shorts, showInfo, showMatrix, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

settings = {
  TITLE: '',
  GAMES: 0,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1 // ONE = 1 # 0=dev 1=prod
};

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

display = 3; // both

frirond = null; // ingen frirond. Annars index för frironden

sorteringsOrdning = {}; // Spara per kolumn

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  echo('Assertion failed: (open the Assertion below to find the failing assertion)');
  echo('  expect', JSON.stringify(a));
  echo('  actual', JSON.stringify(b));
  return console.assert(false); // can be used to track the assert
};

ass(7, 3 + 4);

// The short Form is used to render the table list
// rounds: produced by makeBerger and makeFairPair
// results: produced by the human
shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, j, len, ref, results1;
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "F"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "x"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10rx"));

// listify = (s) -> ('0r1'.indexOf ch) for ch in s # omvandla "r01x1" till [1,0,2,-1,2] 
// ass [0,1,2,-1,2], listify '0r1x1'
convert = function(input, a, b) {
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

other = function(input) {
  return convert(input, "01FG", "1011");
};

ass('1', other('0'));

ass('r', other('r'));

ass('0', other('1'));

ass('1', other('F'));

ass('1', other('G'));

ass('x', other('x'));

longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  if (rounds.length > results.length) {
    results += 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  return result.sort(function(a, b) {
    return a[0] - b[0];
  });
};

ass([[0, 11, 'w', 'F'], [1, 10, 'w', '0'], [2, 9, 'w', 'r'], [3, 8, 'w', '1'], [4, 7, 'w', '0'], [5, 6, 'w', 'r'], [6, 5, 'b', 'r'], [7, 4, 'b', '1'], [8, 3, 'b', '0'], [9, 2, 'b', 'r'], [10, 1, 'b', '1'], [11, 0, 'b', '1']], longForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

// ass [[1,10,"0"], [2,9,"r"], [3,8,"1"], [4,7,"0"], [5,6,"r"], [0,11,"x"]], longForm [[1,10], [2,9], [3,8], [4,7], [5,6], [0,11]], "0r10rx"
prettify = function(ch) {
  if (ch === void 0) {
    return " - ";
  } else {
    return convertLong(ch, "xF0r1", "-|-|0 - 1|½ - ½|1 - 0");
  }
};

ass("0 - 1", prettify('0'));

ass("½ - ½", prettify('r'));

ass("1 - 0", prettify('1'));

ass("-", prettify('x'));

expand = function(rounds) { // make a double round from a single
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

ass([[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]], expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]));

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

ass(0, findNumberOfDecimals([1200, 1200]));

ass(0, findNumberOfDecimals([1200, 1201]));

ass(0, findNumberOfDecimals([1200.23, 1200.23]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(3, findNumberOfDecimals([1200.23, 1200.2345]));

ass(0, findNumberOfDecimals([1200.12345, 1200.12345]));

skapaSorteringsklick = function() {
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var k, key, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseFloat(cellA);
          numB = parseFloat(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (k = 0, len1 = rader.length; k < len1; k++) {
          rad = rader[k];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var elo, i, j, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  i = 0;
  echo("");
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(i, elo, name);
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  return echo(settings);
};

parseTextarea = function() {
  var j, k, key, l, len, len1, len2, line, lines, n, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo('textarea', raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
      if (key[0] === 'r') {
        n = Math.floor(players.length / 2);
        if (rounds === null) {
          rounds = new Array(settings.GAMES * settings.ROUNDS).fill("x".repeat(n));
        }
        rounds[key.slice(1) - 1] = val;
      }
    } else {
      players.push(line);
    }
  }
  echo(rounds);
  echo(window.location.href);
  if (rounds === null) {
    rounds = [];
  }
  if (window.location.href.includes("github")) {
    url = "https://christernilsson.github.io/2025/013-FloatingBerger/";
  } else {
    url = '/';
  }
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (k = 0, len1 = players.length; k < len1; k++) {
    player = players[k];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    r = ref[l];
    if (rounds[r] === 'xxxxx') {
      continue;
    }
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  players = [];
  rounds = [];
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

makeBerger = function() {
  var A, half, i, j, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

showMatrix = function(fairpair) {
  var i, j, len, line, ref;
  if (players.length > 20) {
    return;
  }
  echo("");
  ref = range(players.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = fairpair.matrix[i];
    echo((i + settings.ONE) % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('summa', fairpair.summa);
  return echo('FAIRPAIR', fairpair.rounds);
};

makeFairPair = function() {
  var fairpair;
  fairpair = new FairPair(players, settings);
  showMatrix(fairpair);
  return fairpair.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    if (frirond && opponent === frirond + settings.ONE) {
      opponent = 'F';
    }
    result = convert(result, 'x10rFG', ' 10½11');
    if (color === 'w') {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

showPlayers = function(longs) { // longs lagrad som lista av spelare
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(alignLeft, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) {
  var b, bord, color, j, len, message, ref, res, result, rows, short, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (color === 'b') {
      continue;
    }
    vit = players[w].name;
    svart = players[b].name;
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
    }
    rows += tr({}, td({}, bord + settings.ONE), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(res)));
    bord++;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + settings.ONE}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${settings.GAMES} • R${settings.ROUNDS} • S${settings.SORT} • B${settings.BALANCE} • ${settings.ROUNDS === players.length - 1 ? 'Berger' : 'FairPair'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var j, len, n, r, ref;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    results.push(safeGet(params, `r${r + 1}`, "x".repeat(n)));
  }
  return echo('readResults', results);
};

progress = function(points) {
  var antal, j, len, point;
  antal = 0;
  for (j = 0, len = points.length; j < len; j++) {
    point = points[j];
    antal += point;
  }
  if (frirond) {
    return ` • ${antal} av ${Math.floor(settings.GAMES * settings.ROUNDS * (players.length - 2) / 2)}`;
  } else {
    return ` • ${antal} av ${settings.GAMES * settings.ROUNDS * players.length / 2}`;
  }
};

calcPoints = function() { // Hämta cellerna från GUI:t
  var PRS, PS, cell, decimals, elos, i, j, k, l, len, len1, len2, opp, performances, points, pointsPR, rad, rader, ref, ref1, tbody, val, value;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  PS = [];
  PRS = [];
  performances = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    points = 0;
    pointsPR = 0;
    elos = [];
    ref = range(settings.GAMES * settings.ROUNDS);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      cell = rad.children[3 + i];
      opp = cell.children[0].textContent;
      val = cell.children[1].textContent;
      value = 0;
      if (val === '½') {
        value = 0.5;
      }
      if (val === '1') {
        value = 1;
      }
      points += value;
      if (indexOf.call('0½1', val) >= 0 && opp !== 'F' && players[opp - 1].elo > 0) {
        pointsPR += value;
        elos.push(players[opp - 1].elo);
      }
    }
    PS.push(points);
    PRS.push(pointsPR);
    performances.push(performance(pointsPR, elos));
  }
  decimals = findNumberOfDecimals(performances);
  ref1 = range(rader.length);
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    rad = rader[i];
    rad.children[settings.GAMES * settings.ROUNDS + 3].textContent = PS[i].toFixed(1);
    rad.children[settings.GAMES * settings.ROUNDS + 4].textContent = performances[i] > 3999 ? "" : performances[i].toFixed(decimals);
  }
  return PRS;
};

main = function() {
  var PRS, j, len, params, r, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  rounds = settings.ROUNDS === players.length - 1 ? makeBerger() : makeFairPair();
  if (settings.GAMES === 2) {
    rounds = expand(rounds);
  }
  readResults(params);
  longs = []; // innehåller alla ronderna
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    longs.push(longForm(rounds[r], results[r]));
  }
  shorts = longs; // _.cloneDeep
  longs = _.zip(...longs); // transponerar matrisen
  showPlayers(longs);
  showTables(shorts, 0);
  skapaSorteringsklick();
  PRS = calcPoints();
  return document.title = settings.TITLE + progress(PRS);
};

document.addEventListener('keyup', function(event) {
  var ref, ref1, ref2;
  if (ref = event.key, indexOf.call('123', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("13", ref1) >= 0) ? "table" : "none";
    return document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("23", ref2) >= 0) ? "table" : "none";
  }
});

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFHO0FBQUEsSUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLG9CQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxvQkFBQSxFQUFBLGlCQUFBO0VBQUE7O0FBRUgsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFdBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxLQUFSO0VBQWMsS0FBZDtFQUFvQixFQUFwQjtFQUF1QixFQUF2QjtFQUEwQixFQUExQjtFQUE2QixDQUE3QjtFQUErQixHQUEvQjtFQUFtQyxHQUFuQztFQUF1QyxDQUF2QztFQUF5QyxFQUF6QztDQUFBLE1BQUE7O0FBRUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUVWLFFBQUEsR0FBVztFQUFDLEtBQUEsRUFBTSxFQUFQO0VBQVcsS0FBQSxFQUFNLENBQWpCO0VBQW9CLE1BQUEsRUFBTyxDQUEzQjtFQUE4QixJQUFBLEVBQUssQ0FBbkM7RUFBc0MsR0FBQSxFQUFJLENBQTFDO0VBQTZDLE9BQUEsRUFBUSxDQUFyRDtBQUFBOztBQUVYLE9BQUEsR0FBVTs7QUFFVixTQUFBLEdBQWM7RUFBQyxLQUFBLEVBQU87QUFBUjs7QUFDZCxXQUFBLEdBQWM7RUFBQyxLQUFBLEVBQU87QUFBUjs7QUFDZCxVQUFBLEdBQWM7RUFBQyxLQUFBLEVBQU87QUFBUjs7QUFFZCxPQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTLEdBcEJOOztBQXFCSCxPQUFBLEdBQVUsR0FyQlA7O0FBdUJILE9BQUEsR0FBVSxFQXZCUDs7QUF3QkgsT0FBQSxHQUFVLEtBeEJQOztBQTBCSCxpQkFBQSxHQUFvQixDQUFBLEVBMUJqQjs7QUE0QkgsS0FBQSxHQUFRLEdBNUJMOztBQTZCSCxNQUFBLEdBQVMsR0E3Qk47O0FBK0JILEdBQUEsR0FBTSxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtFQUNMLElBQUcsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFIO0FBQXVCLFdBQXZCOztFQUNBLElBQUEsQ0FBSyw0RUFBTDtFQUNBLElBQUEsQ0FBSyxVQUFMLEVBQWlCLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUFqQjtFQUNBLElBQUEsQ0FBSyxVQUFMLEVBQWlCLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUFqQjtTQUNBLE9BQU8sQ0FBQyxNQUFSLENBQWUsS0FBZixFQUxLO0FBQUE7O0FBTU4sR0FBQSxDQUFJLENBQUosRUFBTyxDQUFBLEdBQUksQ0FBWCxFQXJDRzs7Ozs7QUEwQ0gsU0FBQSxHQUFZLFFBQUEsQ0FBQyxNQUFELEVBQVMsT0FBVCxDQUFBLEVBQUE7QUFDWixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLElBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsT0FBTyxDQUFDLE1BQTNCO0lBQXVDLE9BQUEsSUFBVyxJQUFsRDs7QUFDQTtBQUFBO0VBQUEsS0FBQSxxQ0FBQTs7a0JBQUEsTUFBTSxDQUFDLENBQUQsQ0FBRyxDQUFDLE1BQVYsQ0FBaUIsT0FBTyxDQUFDLENBQUQsQ0FBeEI7RUFBQSxDQUFBOztBQUZXOztBQUdaLEdBQUEsQ0FBSSxDQUFDLENBQUMsQ0FBRCxFQUFHLEVBQUgsRUFBTSxHQUFOLENBQUQsRUFBYSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssR0FBTCxDQUFiLEVBQXdCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxHQUFMLENBQXhCLEVBQW1DLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxHQUFMLENBQW5DLEVBQThDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxHQUFMLENBQTlDLEVBQXlELENBQUMsQ0FBRCxFQUFHLEVBQUgsRUFBTSxHQUFOLENBQXpELENBQUosRUFBMEUsU0FBQSxDQUFVLENBQUMsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUFELEVBQVMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFULEVBQWdCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBaEIsRUFBdUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUF2QixFQUE4QixDQUFDLENBQUQsRUFBRyxDQUFILENBQTlCLEVBQXFDLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBckMsQ0FBVixFQUF3RCxPQUF4RCxDQUExRTs7QUFDQSxHQUFBLENBQUksQ0FBQyxDQUFDLENBQUQsRUFBRyxFQUFILEVBQU0sR0FBTixDQUFELEVBQWEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEdBQUwsQ0FBYixFQUF3QixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssR0FBTCxDQUF4QixFQUFtQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssR0FBTCxDQUFuQyxFQUE4QyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssR0FBTCxDQUE5QyxFQUF5RCxDQUFDLENBQUQsRUFBRyxFQUFILEVBQU0sR0FBTixDQUF6RCxDQUFKLEVBQTBFLFNBQUEsQ0FBVSxDQUFDLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBVCxFQUFnQixDQUFDLENBQUQsRUFBRyxDQUFILENBQWhCLEVBQXVCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBdkIsRUFBOEIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUE5QixFQUFxQyxDQUFDLENBQUQsRUFBRyxFQUFILENBQXJDLENBQVYsRUFBd0QsUUFBeEQsQ0FBMUUsRUE5Q0c7Ozs7QUFtREgsT0FBQSxHQUFVLFFBQUEsQ0FBQyxLQUFELEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FBQTtFQUFlLGlCQUFZLEdBQVQsV0FBSDtXQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxLQUFWLENBQUQsRUFBcEI7R0FBQSxNQUFBO1dBQTJDLE1BQTNDOztBQUFmOztBQUVWLFdBQUEsR0FBYyxRQUFBLENBQUMsS0FBRCxFQUFPLENBQVAsRUFBUyxDQUFULENBQUEsRUFBQTtBQUNkLE1BQUE7RUFBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQUYsQ0FBVSxLQUFWO0VBQ0osQ0FBQSxHQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUjtFQUNKLGlCQUFZLEdBQVQsV0FBSDtXQUFtQixDQUFDLENBQUMsQ0FBRCxFQUFwQjtHQUFBLE1BQUE7V0FBNkIsTUFBN0I7O0FBSGE7O0FBS2QsS0FBQSxHQUFRLFFBQUEsQ0FBQyxLQUFELENBQUE7U0FBVyxPQUFBLENBQVEsS0FBUixFQUFlLE1BQWYsRUFBc0IsTUFBdEI7QUFBWDs7QUFDUixHQUFBLENBQUksR0FBSixFQUFTLEtBQUEsQ0FBTSxHQUFOLENBQVQ7O0FBQ0EsR0FBQSxDQUFJLEdBQUosRUFBUyxLQUFBLENBQU0sR0FBTixDQUFUOztBQUNBLEdBQUEsQ0FBSSxHQUFKLEVBQVMsS0FBQSxDQUFNLEdBQU4sQ0FBVDs7QUFDQSxHQUFBLENBQUksR0FBSixFQUFTLEtBQUEsQ0FBTSxHQUFOLENBQVQ7O0FBQ0EsR0FBQSxDQUFJLEdBQUosRUFBUyxLQUFBLENBQU0sR0FBTixDQUFUOztBQUNBLEdBQUEsQ0FBSSxHQUFKLEVBQVMsS0FBQSxDQUFNLEdBQU4sQ0FBVDs7QUFFQSxRQUFBLEdBQVcsUUFBQSxDQUFDLE1BQUQsRUFBUyxPQUFULENBQUEsRUFBQTtBQUNYLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBO0VBQUMsSUFBRyxNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsTUFBM0I7SUFBdUMsT0FBQSxJQUFXLElBQWxEOztFQUNBLE1BQUEsR0FBUztBQUNUO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBUSxNQUFNLENBQUMsQ0FBRDtJQUNkLEdBQUEsR0FBTSxPQUFPLENBQUMsQ0FBRDtJQUNiLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEdBQUwsRUFBUyxHQUFULENBQVo7SUFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxHQUFMLEVBQVMsS0FBQSxDQUFNLEdBQU4sQ0FBVCxDQUFaO0VBSkQ7U0FLQSxNQUFNLENBQUMsSUFBUCxDQUFZLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO1dBQVMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLENBQUMsQ0FBQyxDQUFEO0VBQWpCLENBQVo7QUFSVTs7QUFTWCxHQUFBLENBQUksQ0FDSCxDQUFFLENBQUYsRUFBSSxFQUFKLEVBQU8sR0FBUCxFQUFXLEdBQVgsQ0FERyxFQUVILENBQUUsQ0FBRixFQUFJLEVBQUosRUFBTyxHQUFQLEVBQVcsR0FBWCxDQUZHLEVBR0gsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFPLEdBQVAsRUFBVyxHQUFYLENBSEcsRUFJSCxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQU8sR0FBUCxFQUFXLEdBQVgsQ0FKRyxFQUtILENBQUUsQ0FBRixFQUFLLENBQUwsRUFBTyxHQUFQLEVBQVcsR0FBWCxDQUxHLEVBTUgsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFPLEdBQVAsRUFBVyxHQUFYLENBTkcsRUFPSCxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQU8sR0FBUCxFQUFXLEdBQVgsQ0FQRyxFQVFILENBQUUsQ0FBRixFQUFLLENBQUwsRUFBTyxHQUFQLEVBQVcsR0FBWCxDQVJHLEVBU0gsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFPLEdBQVAsRUFBVyxHQUFYLENBVEcsRUFVSCxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQU8sR0FBUCxFQUFXLEdBQVgsQ0FWRyxFQVdILENBQUMsRUFBRCxFQUFLLENBQUwsRUFBTyxHQUFQLEVBQVcsR0FBWCxDQVhHLEVBWUgsQ0FBQyxFQUFELEVBQUssQ0FBTCxFQUFPLEdBQVAsRUFBVyxHQUFYLENBWkcsQ0FBSixFQWFHLFFBQUEsQ0FBUyxDQUFDLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBVCxFQUFnQixDQUFDLENBQUQsRUFBRyxDQUFILENBQWhCLEVBQXVCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBdkIsRUFBOEIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUE5QixFQUFxQyxDQUFDLENBQUQsRUFBRyxFQUFILENBQXJDLENBQVQsRUFBdUQsT0FBdkQsQ0FiSCxFQTNFRzs7O0FBMkZILFFBQUEsR0FBVyxRQUFBLENBQUMsRUFBRCxDQUFBO0VBQVEsSUFBRyxFQUFBLEtBQU0sTUFBVDtBQUF3QixXQUFPLE1BQS9CO0dBQUEsTUFBQTtXQUEwQyxXQUFBLENBQVksRUFBWixFQUFnQixPQUFoQixFQUF3Qix1QkFBeEIsRUFBMUM7O0FBQVI7O0FBQ1gsR0FBQSxDQUFJLE9BQUosRUFBYSxRQUFBLENBQVMsR0FBVCxDQUFiOztBQUNBLEdBQUEsQ0FBSSxPQUFKLEVBQWEsUUFBQSxDQUFTLEdBQVQsQ0FBYjs7QUFDQSxHQUFBLENBQUksT0FBSixFQUFhLFFBQUEsQ0FBUyxHQUFULENBQWI7O0FBQ0EsR0FBQSxDQUFJLEdBQUosRUFBUyxRQUFBLENBQVMsR0FBVCxDQUFUOztBQUVBLE1BQUEsR0FBUyxRQUFBLENBQUMsTUFBRCxDQUFBLEVBQUE7QUFDVCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVM7RUFDVCxLQUFBLHdDQUFBOztJQUNDLE1BQU0sQ0FBQyxJQUFQOztBQUFhO01BQUEsS0FBQSx5Q0FBQTtRQUFVLENBQUMsQ0FBRCxFQUFHLENBQUg7c0JBQVYsQ0FBQyxDQUFELEVBQUcsQ0FBSDtNQUFBLENBQUE7O1FBQWI7SUFDQSxNQUFNLENBQUMsSUFBUDs7QUFBYTtNQUFBLEtBQUEseUNBQUE7UUFBVSxDQUFDLENBQUQsRUFBRyxDQUFIO3NCQUFWLENBQUMsQ0FBRCxFQUFHLENBQUg7TUFBQSxDQUFBOztRQUFiO0VBRkQ7U0FHQTtBQUxROztBQU1ULEdBQUEsQ0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFQLENBQUQsRUFBZSxDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxFQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBUCxDQUFmLEVBQTZCLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFQLENBQTdCLEVBQTJDLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFQLENBQTNDLENBQUosRUFBK0QsTUFBQSxDQUFPLENBQUMsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUQsRUFBTyxDQUFDLENBQUQsRUFBRyxDQUFILENBQVAsQ0FBRCxFQUFnQixDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxFQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBUCxDQUFoQixDQUFQLENBQS9EOztBQUVBLG9CQUFBLEdBQXVCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFDdkIsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFBLEdBQU87QUFDUDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsSUFBQSxHQUFPLENBQUMsQ0FBQyxJQUFGOztBQUFRO01BQUEsS0FBQSx1Q0FBQTs7c0JBQUEsSUFBSSxDQUFDLE9BQUwsQ0FBYSxDQUFiO01BQUEsQ0FBQTs7UUFBUjtJQUNQLElBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxJQUFqQjtNQUEyQixDQUFDLElBQUQsRUFBTSxLQUFOLENBQUEsR0FBZSxDQUFDLElBQUksQ0FBQyxNQUFOLEVBQWEsQ0FBYixFQUExQzs7RUFGRDtTQUdBO0FBTHNCOztBQU12QixHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsT0FBRCxFQUFTLE9BQVQsQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsT0FBRCxFQUFTLE1BQVQsQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsT0FBRCxFQUFTLE1BQVQsQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsT0FBRCxFQUFTLFNBQVQsQ0FBckIsQ0FBUDs7QUFDQSxHQUFBLENBQUksQ0FBSixFQUFPLG9CQUFBLENBQXFCLENBQUMsVUFBRCxFQUFZLFVBQVosQ0FBckIsQ0FBUDs7QUFFQSxvQkFBQSxHQUF1QixRQUFBLENBQUEsQ0FBQTtBQUV2QixNQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU0sUUFBUSxDQUFDLGdCQUFULENBQTBCLGVBQTFCLEVBQVA7O0VBR0MsS0FBQSxHQUFRLENBQUM7QUFDVDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsS0FBQTtrQkFDRyxDQUFBLFFBQUEsQ0FBQyxHQUFELEVBQUssS0FBTCxDQUFBO2FBQ0YsR0FBRyxDQUFDLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFFBQUEsQ0FBQyxLQUFELENBQUE7QUFDakMsWUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUE7UUFBSSxHQUFBLEdBQU0sR0FBRyxDQUFDO1FBQ1YsSUFBRyxDQUFDLEtBQUEsQ0FBTSxRQUFBLENBQVMsR0FBVCxDQUFOLENBQUo7VUFDQyxHQUFBLEdBQU0sUUFBQSxDQUFTLEdBQVQsQ0FBQSxHQUFnQixRQUFRLENBQUM7VUFDL0IsVUFBQSxDQUFXLE1BQVgsRUFBbUIsR0FBbkI7QUFDQSxpQkFIRDs7UUFLQSxLQUFBLEdBQVEsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsa0JBQXZCO1FBQ1IsS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBSyxDQUFDLGdCQUFOLENBQXVCLElBQXZCLENBQVg7UUFDUixRQUFBLGdCQUFrQixRQUFRLENBQUMsS0FBVCxDQUFlLEdBQWYsR0FBUDtRQUVYLEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBQSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUE7QUFDZixjQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBO1VBQUssS0FBQSxHQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBRCxDQUFPLENBQUMsV0FBVyxDQUFDLElBQTlCLENBQUE7VUFDUixLQUFBLEdBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFELENBQU8sQ0FBQyxXQUFXLENBQUMsSUFBOUIsQ0FBQSxFQURiOztVQUlLLElBQUEsR0FBTyxVQUFBLENBQVcsS0FBWDtVQUNQLElBQUEsR0FBTyxVQUFBLENBQVcsS0FBWDtVQUNQLElBQUcsQ0FBQyxLQUFBLENBQU0sSUFBTixDQUFELElBQWlCLENBQUMsS0FBQSxDQUFNLElBQU4sQ0FBckI7WUFDUSxJQUFHLFFBQUg7cUJBQWlCLElBQUEsR0FBTyxLQUF4QjthQUFBLE1BQUE7cUJBQWtDLElBQUEsR0FBTyxLQUF6QzthQURSO1dBQUEsTUFBQTtZQUdRLElBQUcsUUFBSDtxQkFBaUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsS0FBcEIsRUFBakI7YUFBQSxNQUFBO3FCQUFnRCxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFwQixFQUFoRDthQUhSOztRQVBVLENBQVgsRUFWSjs7QUF1Qkk7UUFBQSxLQUFBLHlDQUFBOzt3QkFDQyxLQUFLLENBQUMsV0FBTixDQUFrQixHQUFsQjtRQURELENBQUE7O01BeEI2QixDQUE5QjtJQURFLENBQUEsRUFBQyxLQUFJO0VBRlQsQ0FBQTs7QUFOc0I7O0FBb0N2QixPQUFBLEdBQVUsUUFBQSxDQUFDLE1BQUQsRUFBUSxHQUFSLEVBQVksV0FBUyxFQUFyQixDQUFBO0VBQ1QsSUFBRyxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQVgsQ0FBSDtBQUF1QixXQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBWCxDQUFlLENBQUMsSUFBaEIsQ0FBQSxFQUE5Qjs7RUFDQSxJQUFHLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBQSxHQUFNLEdBQWpCLENBQUg7QUFBNkIsV0FBTyxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQUEsR0FBTSxHQUFqQixDQUFxQixDQUFDLElBQXRCLENBQUEsRUFBcEM7O1NBQ0E7QUFIUzs7QUFLVixVQUFBLEdBQWEsUUFBQSxDQUFBLENBQUE7QUFDYixNQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFDLElBQUEsQ0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXJCO0VBQ0EsTUFBQSxHQUFTLElBQUksZUFBSixDQUFvQixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXBDO0VBRVQsUUFBUSxDQUFDLEtBQVQsR0FBaUIsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsT0FBaEI7RUFDakIsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBQSxDQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLE9BQWhCLEVBQXlCLEdBQXpCLENBQVQ7RUFDakIsUUFBUSxDQUFDLElBQVQsR0FBZ0IsUUFBQSxDQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLE1BQWhCLEVBQXdCLEdBQXhCLENBQVQ7RUFDaEIsUUFBUSxDQUFDLEdBQVQsR0FBZSxRQUFBLENBQVMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsS0FBaEIsRUFBdUIsR0FBdkIsQ0FBVDtFQUNmLFFBQVEsQ0FBQyxPQUFULEdBQW1CLFFBQUEsQ0FBUyxPQUFBLENBQVEsTUFBUixFQUFnQixTQUFoQixFQUEyQixHQUEzQixDQUFUO0VBRW5CLE9BQUEsR0FBVTtJQUFDLENBQUQ7SUFBRyxDQUFIO0lBQUssQ0FBTDs7RUFFVixPQUFBLEdBQVU7RUFDVixPQUFBLEdBQVUsTUFBTSxDQUFDLE1BQVAsQ0FBYyxHQUFkO0VBRVYsSUFBRyxRQUFRLENBQUMsSUFBVCxLQUFpQixDQUFwQjtJQUEyQixPQUFPLENBQUMsSUFBUixDQUFBLENBQWMsQ0FBQyxPQUFmLENBQUEsRUFBM0I7O0VBRUEsQ0FBQSxHQUFJO0VBQ0osSUFBQSxDQUFLLEVBQUw7RUFDQSxLQUFBLHlDQUFBOztJQUNDLENBQUEsSUFBSztJQUNMLEdBQUEsR0FBTSxRQUFBLENBQVMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxDQUFiLEVBQWUsQ0FBZixDQUFUO0lBQ04sSUFBQSxHQUFPLE1BQU0sQ0FBQyxLQUFQLENBQWEsQ0FBYixDQUFlLENBQUMsSUFBaEIsQ0FBQTtJQUNQLElBQUEsQ0FBSyxDQUFMLEVBQVEsR0FBUixFQUFZLElBQVo7SUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksTUFBSixDQUFXLE9BQU8sQ0FBQyxNQUFuQixFQUEyQixJQUEzQixFQUFpQyxHQUFqQyxDQUFiO0VBTEQ7RUFPQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQWpCLEtBQXNCLENBQXpCO0lBQ0MsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFJLE1BQUosQ0FBVyxPQUFPLENBQUMsTUFBbkIsRUFBMkIsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBYjtJQUNBLE9BQUEsR0FBVSxPQUFPLENBQUMsTUFBUixHQUFpQixFQUY1QjtHQUFBLE1BQUE7SUFJQyxPQUFBLEdBQVUsS0FKWDs7RUFNQSxRQUFRLENBQUMsTUFBVCxHQUFrQixRQUFBLENBQVMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsUUFBaEIsRUFBMEIsQ0FBQSxDQUFBLENBQUcsT0FBTyxDQUFDLE1BQVIsR0FBZSxDQUFsQixDQUFBLENBQTFCLENBQVQ7U0FDbEIsSUFBQSxDQUFLLFFBQUw7QUFqQ1k7O0FBbUNiLGFBQUEsR0FBZ0IsUUFBQSxDQUFBLENBQUE7QUFDaEIsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLElBQUEsQ0FBSyxlQUFMO0VBQ0EsR0FBQSxHQUFNLFFBQVEsQ0FBQyxjQUFULENBQXdCLFVBQXhCO0VBQ04sSUFBQSxDQUFLLFVBQUwsRUFBZ0IsR0FBRyxDQUFDLEtBQXBCO0VBRUEsS0FBQSxHQUFRLEdBQUcsQ0FBQztFQUNaLEtBQUEsR0FBUSxLQUFLLENBQUMsS0FBTixDQUFZLElBQVo7RUFFUixNQUFBLEdBQVM7RUFFVCxLQUFBLHVDQUFBOztJQUNDLElBQUcsSUFBQSxLQUFRLEVBQVg7QUFBbUIsZUFBbkI7O0lBQ0EsSUFBRyxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBSDtNQUNDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBQSxHQUFhLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWDtNQUNiLEdBQUEsR0FBTSxHQUFHLENBQUMsSUFBSixDQUFBO01BQ04sR0FBQSxHQUFNLEdBQUcsQ0FBQyxJQUFKLENBQUE7TUFDTixJQUFHLEdBQUEsS0FBTyxPQUFWO1FBQXVCLFFBQVEsQ0FBQyxLQUFULEdBQWlCLElBQXhDOztNQUNBLElBQUcsR0FBQSxLQUFPLE9BQVY7UUFBdUIsUUFBUSxDQUFDLEtBQVQsR0FBaUIsSUFBeEM7O01BQ0EsSUFBRyxHQUFBLEtBQU8sUUFBVjtRQUF3QixRQUFRLENBQUMsTUFBVCxHQUFrQixJQUExQzs7TUFDQSxJQUFHLEdBQUEsS0FBTyxNQUFWO1FBQXNCLFFBQVEsQ0FBQyxJQUFULEdBQWdCLElBQXRDOztNQUNBLElBQUcsR0FBQSxLQUFPLEtBQVY7UUFBcUIsUUFBUSxDQUFDLEdBQVQsR0FBZSxJQUFwQzs7TUFDQSxJQUFHLEdBQUEsS0FBTyxTQUFWO1FBQXlCLFFBQVEsQ0FBQyxPQUFULEdBQW1CLElBQTVDOztNQUNBLElBQUcsR0FBRyxDQUFDLENBQUQsQ0FBSCxLQUFVLEdBQWI7UUFDQyxDQUFBLGNBQUksT0FBTyxDQUFDLFNBQVU7UUFDdEIsSUFBRyxNQUFBLEtBQVUsSUFBYjtVQUF1QixNQUFBLEdBQVMsSUFBSSxLQUFKLENBQVUsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLE1BQXBDLENBQTJDLENBQUMsSUFBNUMsQ0FBaUQsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFYLENBQWpELEVBQWhDOztRQUNBLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsQ0FBQSxHQUFlLENBQWhCLENBQU4sR0FBMkIsSUFINUI7T0FWRDtLQUFBLE1BQUE7TUFlQyxPQUFPLENBQUMsSUFBUixDQUFhLElBQWIsRUFmRDs7RUFGRDtFQW1CQSxJQUFBLENBQUssTUFBTDtFQUNBLElBQUEsQ0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQXJCO0VBRUEsSUFBRyxNQUFBLEtBQVUsSUFBYjtJQUF1QixNQUFBLEdBQVMsR0FBaEM7O0VBRUEsSUFBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFyQixDQUE4QixRQUE5QixDQUFIO0lBQStDLEdBQUEsR0FBTSw2REFBckQ7R0FBQSxNQUFBO0lBQXVILEdBQUEsR0FBTSxJQUE3SDs7RUFFQSxHQUFBLElBQU8sQ0FBQSxPQUFBLENBQUEsQ0FBVSxRQUFRLENBQUMsS0FBbkIsQ0FBQTtFQUNQLEdBQUEsSUFBTyxDQUFBLE9BQUEsQ0FBQSxDQUFVLFFBQVEsQ0FBQyxLQUFuQixDQUFBO0VBQ1AsR0FBQSxJQUFPLENBQUEsUUFBQSxDQUFBLENBQVcsUUFBUSxDQUFDLE1BQXBCLENBQUE7RUFDUCxHQUFBLElBQU8sQ0FBQSxNQUFBLENBQUEsQ0FBUyxRQUFRLENBQUMsSUFBbEIsQ0FBQTtFQUNQLEdBQUEsSUFBTyxDQUFBLEtBQUEsQ0FBQSxDQUFRLFFBQVEsQ0FBQyxHQUFqQixDQUFBO0VBQ1AsR0FBQSxJQUFPLENBQUEsU0FBQSxDQUFBLENBQVksUUFBUSxDQUFDLE9BQXJCLENBQUE7RUFFUCxLQUFBLDJDQUFBOztJQUNDLEdBQUEsSUFBTyxDQUFBLEdBQUEsQ0FBQSxDQUFNLE1BQU4sQ0FBQTtFQURSO0FBR0E7RUFBQSxLQUFBLHVDQUFBOztJQUNDLElBQUcsTUFBTSxDQUFDLENBQUQsQ0FBTixLQUFhLE9BQWhCO0FBQTZCLGVBQTdCOztJQUNBLEdBQUEsSUFBTyxDQUFBLEVBQUEsQ0FBQSxDQUFLLENBQUEsR0FBRSxDQUFQLENBQUEsQ0FBQSxDQUFBLENBQVksTUFBTSxDQUFDLENBQUQsQ0FBbEIsQ0FBQTtFQUZSO0VBSUEsR0FBQSxHQUFNLEdBQUcsQ0FBQyxVQUFKLENBQWUsR0FBZixFQUFvQixHQUFwQjtFQUVOLElBQUEsQ0FBSyxHQUFMO0VBQ0EsT0FBQSxHQUFVO0VBQ1YsTUFBQSxHQUFTO1NBQ1QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QjtBQXZEUjs7QUF5RGhCLFdBQUEsR0FBYyxRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxJQUFQLEVBQWEsQ0FBYixDQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEdBQUEsR0FBUyxDQUFBLEdBQUksQ0FBSixLQUFTLENBQVosR0FBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFGLEVBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixDQUFELENBQW5CLEdBQTJDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFMLENBQVIsQ0FBRDtFQUNqRCxLQUFTLCtFQUFUO0lBQ0MsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBTyxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQVIsQ0FBVDtFQUREO0VBRUEsSUFBRyxPQUFIO0lBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBRyxDQUFDLEtBQUosQ0FBQSxDQUFULEVBQWhCOztTQUNBLEdBQUcsQ0FBQyxJQUFKLENBQUE7QUFMYTs7QUFPZCxVQUFBLEdBQWEsUUFBQSxDQUFBLENBQUE7QUFDYixNQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUMsSUFBQSxDQUFLLFFBQUw7RUFFQSxDQUFBLEdBQUksT0FBTyxDQUFDO0VBQ1osSUFBRyxDQUFBLEdBQUksQ0FBSixLQUFTLENBQVo7SUFBbUIsQ0FBQSxJQUFLLEVBQXhCOztFQUNBLElBQUEsY0FBTyxJQUFLO0VBQ1osQ0FBQSxHQUFJOzs7OztFQUNKLE1BQUEsR0FBUztBQUNUO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxNQUFNLENBQUMsSUFBUCxDQUFZLFdBQUEsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixJQUFsQixFQUF3QixDQUF4QixDQUFaO0lBQ0EsQ0FBQyxDQUFDLEdBQUYsQ0FBQTtJQUNBLENBQUEsR0FBSSxDQUFDLENBQUMsS0FBRixDQUFRLElBQVIsQ0FBYSxDQUFDLE1BQWQsQ0FBcUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVUsSUFBVixDQUFyQjtJQUNKLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQSxHQUFFLENBQVQ7RUFKRDtFQUtBLElBQUEsQ0FBSyxRQUFMLEVBQWMsTUFBZDtTQUNBO0FBZFk7O0FBZ0JiLFVBQUEsR0FBYSxRQUFBLENBQUMsUUFBRCxDQUFBO0FBQ2IsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7RUFBQyxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLEVBQXBCO0FBQTRCLFdBQTVCOztFQUNBLElBQUEsQ0FBSyxFQUFMO0FBQ0E7RUFBQSxLQUFBLHFDQUFBOztJQUNDLElBQUEsR0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUQ7SUFDdEIsSUFBQSxDQUFLLENBQUMsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxHQUFkLENBQUEsR0FBcUIsRUFBckIsR0FBMEIsS0FBMUIsR0FBa0MsSUFBSSxDQUFDLElBQUwsQ0FBVSxLQUFWLENBQWxDLEdBQXFELElBQXJELEdBQTRELE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxHQUE1RTtFQUZEO0VBR0EsSUFBQSxDQUFLLE9BQUwsRUFBYyxRQUFRLENBQUMsS0FBdkI7U0FDQSxJQUFBLENBQUssVUFBTCxFQUFpQixRQUFRLENBQUMsTUFBMUI7QUFQWTs7QUFTYixZQUFBLEdBQWUsUUFBQSxDQUFBLENBQUE7QUFDZixNQUFBO0VBQUMsUUFBQSxHQUFXLElBQUksUUFBSixDQUFhLE9BQWIsRUFBc0IsUUFBdEI7RUFDWCxVQUFBLENBQVcsUUFBWDtTQUNBLFFBQVEsQ0FBQztBQUhLOztBQUtmLFFBQUEsR0FBVyxRQUFBLENBQUEsQ0FBQTtTQUNWLFFBQVEsQ0FBQyxjQUFULENBQXdCLE1BQXhCLENBQStCLENBQUMsU0FBaEMsR0FBNEMsR0FBQSxDQUFJLENBQUEsQ0FBSixFQUMzQyxHQUFBLENBQUk7SUFBQyxLQUFBLEVBQU07RUFBUCxDQUFKLEVBQW9CLEdBQUEsQ0FBSSxDQUFBLENBQUosRUFBUSxRQUFSLENBQXBCLENBRDJDO0FBRGxDOztBQUlYLGFBQUEsR0FBZ0IsUUFBQSxDQUFDLElBQUQsRUFBTyxDQUFQLENBQUEsRUFBQTtBQUVoQixNQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFDLE1BQUEsR0FBUztFQUNULE9BQUEsR0FBVTtFQUVWLEtBQUEsc0NBQUE7SUFBSSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssS0FBTCxFQUFXLE1BQVg7SUFDSCxRQUFBLEdBQVcsUUFBUSxDQUFDLEdBQVQsR0FBZSxDQUFHLENBQUEsS0FBSyxDQUFSLEdBQWUsQ0FBZixHQUFzQixDQUF0QjtJQUMxQixJQUFHLE9BQUEsSUFBWSxRQUFBLEtBQVksT0FBQSxHQUFVLFFBQVEsQ0FBQyxHQUE5QztNQUF1RCxRQUFBLEdBQVcsSUFBbEU7O0lBQ0EsTUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLFFBQWhCLEVBQTBCLFFBQTFCO0lBRVQsSUFBRyxLQUFBLEtBQVMsR0FBWjtNQUFxQixJQUFBLEdBQU8sYUFBNUI7S0FBQSxNQUFBO01BQThDLElBQUEsR0FBTyxZQUFyRDs7SUFDQSxJQUFBLEdBQU8sRUFBQSxDQUFHO01BQUMsS0FBQSxFQUFPO0lBQVIsQ0FBSCxFQUNOLEdBQUEsQ0FBSTtNQUFDLEtBQUEsRUFBTywrQ0FBQSxHQUFrRDtJQUExRCxDQUFKLEVBQXFFLFFBQXJFLENBRE0sRUFFTixHQUFBLENBQUk7TUFBQyxLQUFBLEVBQU87SUFBUixDQUFKLEVBQStGLE1BQS9GLENBRk07SUFJUCxNQUFNLENBQUMsSUFBUCxDQUFZLElBQVo7RUFWRDtFQVlBLE1BQU0sQ0FBQyxJQUFQLENBQVksRUFBQSxDQUFHLFVBQUgsRUFBZSxFQUFmLENBQVo7RUFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxFQUFQLENBQVo7U0FDQSxNQUFNLENBQUMsSUFBUCxDQUFZLEVBQVo7QUFuQmU7O0FBcUJoQixXQUFBLEdBQWMsUUFBQSxDQUFDLEtBQUQsQ0FBQSxFQUFBO0FBRWQsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFDLElBQUEsR0FBTztFQUVQLEtBQUEsK0NBQUE7O0lBQ0MsTUFBQSxHQUFTLE9BQU8sQ0FBQyxDQUFEO0lBQ2hCLElBQUcsTUFBTSxDQUFDLElBQVAsS0FBZSxTQUFsQjtBQUFpQyxlQUFqQzs7SUFDQSxJQUFJLENBQUMsSUFBTCxDQUFVLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFDVCxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sQ0FBQSxHQUFJLFFBQVEsQ0FBQyxHQUFwQixDQURTLEVBRVQsRUFBQSxDQUFHLFNBQUgsRUFBYyxNQUFNLENBQUMsSUFBckIsQ0FGUyxFQUdULEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxNQUFNLENBQUMsR0FBZCxDQUhTLEVBSVQsYUFBQSxDQUFjLElBQWQsRUFBb0IsQ0FBcEIsQ0FKUyxDQUFWO0VBSEQ7RUFTQSxNQUFBLEdBQVMsR0FBQSxDQUFJLENBQUEsQ0FBSixFQUNSLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxRQUFRLENBQUMsS0FBaEIsQ0FEUSxFQUVSLEtBQUEsQ0FBTSxDQUFBLENBQU4sRUFDQyxLQUFBLENBQU0sQ0FBQSxDQUFOLEVBQ0MsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLEdBQVAsQ0FERCxFQUVDLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxNQUFQLENBRkQsRUFHQyxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sS0FBUCxDQUhELEVBSUM7O0FBQUM7QUFBQTtJQUFBLEtBQUEsdUNBQUE7O29CQUFBLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxDQUFBLENBQUEsQ0FBRyxDQUFBLEdBQUksUUFBUSxDQUFDLEdBQWhCLENBQUEsQ0FBUDtJQUFBLENBQUE7O01BQUQsQ0FBMkQsQ0FBQyxJQUE1RCxDQUFpRSxFQUFqRSxDQUpELEVBS0MsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLEdBQVAsQ0FMRCxFQU1DLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxJQUFQLENBTkQsQ0FERCxFQVFDLElBQUksQ0FBQyxJQUFMLENBQVUsRUFBVixDQVJELENBRlE7U0FZVCxRQUFRLENBQUMsY0FBVCxDQUF3QixXQUF4QixDQUFvQyxDQUFDLFNBQXJDLEdBQWlEO0FBekJwQzs7QUEyQmQsVUFBQSxHQUFhLFFBQUEsQ0FBQyxNQUFELEVBQVMsYUFBVCxDQUFBO0FBQ2IsTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFHLE1BQU0sQ0FBQyxNQUFQLEtBQWlCLENBQXBCO0FBQTJCLFdBQTNCOztFQUVBLElBQUEsR0FBTztFQUNQLElBQUEsR0FBTztFQUNQLE9BQUEsR0FBVTtBQUVWO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sS0FBUCxFQUFjLEdBQWQsQ0FBQSxHQUFxQjtJQUNyQixJQUFHLEtBQUEsS0FBUyxHQUFaO0FBQXFCLGVBQXJCOztJQUVBLEdBQUEsR0FBTSxPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUM7SUFDakIsS0FBQSxHQUFRLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQztJQUVuQixJQUFHLEdBQUEsS0FBTyxTQUFWO01BQ0MsT0FBQSxHQUFVLENBQUEsR0FBQSxDQUFBLENBQU0sS0FBTixDQUFBLFlBQUE7QUFDVixlQUZEOztJQUdBLElBQUcsS0FBQSxLQUFTLFNBQVo7TUFDQyxPQUFBLEdBQVUsQ0FBQSxHQUFBLENBQUEsQ0FBTSxHQUFOLENBQUEsWUFBQTtBQUNWLGVBRkQ7O0lBR0EsSUFBQSxJQUFRLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFDUCxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sSUFBQSxHQUFPLFFBQVEsQ0FBQyxHQUF2QixDQURPLEVBRVAsRUFBQSxDQUFHLFNBQUgsRUFBYyxHQUFkLENBRk8sRUFHUCxFQUFBLENBQUcsU0FBSCxFQUFjLEtBQWQsQ0FITyxFQUlQLEVBQUEsQ0FBRyxXQUFILEVBQWdCLFFBQUEsQ0FBUyxHQUFULENBQWhCLENBSk87SUFLUixJQUFBO0VBbEJEO0VBb0JBLE1BQUEsR0FBUyxHQUFBLENBQUksQ0FBQSxDQUFKLEVBQ1IsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLENBQUEsb0JBQUEsQ0FBQSxDQUF1QixhQUFBLEdBQWdCLFFBQVEsQ0FBQyxHQUFoRCxDQUFBLENBQVAsQ0FEUSxFQUVSLEtBQUEsQ0FBTSxDQUFBLENBQU4sRUFDQyxLQUFBLENBQU0sQ0FBQSxDQUFOLEVBQ0MsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLE1BQVAsQ0FERCxFQUVDLEVBQUEsQ0FBRyxDQUFBLENBQUgsRUFBTyxLQUFQLENBRkQsRUFHQyxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sT0FBUCxDQUhELEVBSUMsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLFVBQVAsQ0FKRCxDQURELEVBTUMsSUFORCxDQUZRO0VBVVQsTUFBQSxJQUFVLENBQUEsS0FBQSxDQUFBLENBQVEsUUFBUSxDQUFDLEtBQWpCLENBQUEsSUFBQSxDQUFBLENBQTZCLFFBQVEsQ0FBQyxNQUF0QyxDQUFBLElBQUEsQ0FBQSxDQUFtRCxRQUFRLENBQUMsSUFBNUQsQ0FBQSxJQUFBLENBQUEsQ0FBdUUsUUFBUSxDQUFDLE9BQWhGLENBQUEsR0FBQSxDQUFBLENBQWdHLFFBQVEsQ0FBQyxNQUFULEtBQW1CLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXZDLEdBQThDLFFBQTlDLEdBQTRELFVBQXpKLEVBQUEsQ0FBQSxDQUF1SyxPQUF2SyxDQUFBO1NBRVYsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxTQUFsQyxHQUE4QztBQXZDbEM7O0FBeUNiLFdBQUEsR0FBYyxRQUFBLENBQUMsTUFBRCxDQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxPQUFBLEdBQVU7RUFDVixDQUFBLEdBQUksT0FBTyxDQUFDO0VBQ1osSUFBRyxPQUFIO0lBQWdCLENBQUEsSUFBSyxFQUFyQjs7RUFDQSxlQUFBLElBQU07QUFFTjtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFBLENBQVEsTUFBUixFQUFnQixDQUFBLENBQUEsQ0FBQSxDQUFJLENBQUEsR0FBRSxDQUFOLENBQUEsQ0FBaEIsRUFBMkIsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFYLENBQTNCLENBQWI7RUFERDtTQUVBLElBQUEsQ0FBSyxhQUFMLEVBQW9CLE9BQXBCO0FBUmE7O0FBVWQsUUFBQSxHQUFXLFFBQUEsQ0FBQyxNQUFELENBQUE7QUFDWCxNQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUMsS0FBQSxHQUFRO0VBQ1IsS0FBQSx3Q0FBQTs7SUFDQyxLQUFBLElBQVM7RUFEVjtFQUVBLElBQUcsT0FBSDtXQUNDLENBQUEsR0FBQSxDQUFBLENBQU0sS0FBTixDQUFBLElBQUEsQ0FBQSxZQUFrQixRQUFRLENBQUMsS0FBVCxHQUFpQixRQUFRLENBQUMsTUFBMUIsR0FBbUMsQ0FBQyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFsQixJQUF3QixFQUE3RSxDQUFBLEVBREQ7R0FBQSxNQUFBO1dBR0MsQ0FBQSxHQUFBLENBQUEsQ0FBTSxLQUFOLENBQUEsSUFBQSxDQUFBLENBQWtCLFFBQVEsQ0FBQyxLQUFULEdBQWlCLFFBQVEsQ0FBQyxNQUExQixHQUFtQyxPQUFPLENBQUMsTUFBM0MsR0FBb0QsQ0FBdEUsQ0FBQSxFQUhEOztBQUpVOztBQVNYLFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQSxFQUFBO0FBQ2IsTUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsWUFBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxLQUFBLEdBQVEsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsa0JBQXZCO0VBQ1IsS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBSyxDQUFDLGdCQUFOLENBQXVCLElBQXZCLENBQVg7RUFFUixFQUFBLEdBQUs7RUFDTCxHQUFBLEdBQU07RUFDTixZQUFBLEdBQWU7RUFFZixLQUFBLHVDQUFBOztJQUNDLE1BQUEsR0FBUztJQUNULFFBQUEsR0FBVztJQUNYLElBQUEsR0FBTztBQUNQO0lBQUEsS0FBQSx1Q0FBQTs7TUFDQyxJQUFBLEdBQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBLEdBQUUsQ0FBSDtNQUNuQixHQUFBLEdBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFELENBQUcsQ0FBQztNQUN2QixHQUFBLEdBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFELENBQUcsQ0FBQztNQUN2QixLQUFBLEdBQVE7TUFDUixJQUFHLEdBQUEsS0FBTyxHQUFWO1FBQW1CLEtBQUEsR0FBUSxJQUEzQjs7TUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO1FBQW1CLEtBQUEsR0FBUSxFQUEzQjs7TUFDQSxNQUFBLElBQVU7TUFFVixpQkFBVSxPQUFQLFNBQUEsSUFBaUIsR0FBQSxLQUFPLEdBQXhCLElBQWdDLE9BQU8sQ0FBQyxHQUFBLEdBQUksQ0FBTCxDQUFPLENBQUMsR0FBZixHQUFxQixDQUF4RDtRQUNDLFFBQUEsSUFBWTtRQUNaLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQUEsR0FBSSxDQUFMLENBQU8sQ0FBQyxHQUF6QixFQUZEOztJQVREO0lBYUEsRUFBRSxDQUFDLElBQUgsQ0FBUSxNQUFSO0lBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxRQUFUO0lBQ0EsWUFBWSxDQUFDLElBQWIsQ0FBa0IsV0FBQSxDQUFZLFFBQVosRUFBc0IsSUFBdEIsQ0FBbEI7RUFuQkQ7RUFxQkEsUUFBQSxHQUFXLG9CQUFBLENBQXFCLFlBQXJCO0FBQ1g7RUFBQSxLQUFBLHdDQUFBOztJQUNDLEdBQUEsR0FBTSxLQUFLLENBQUMsQ0FBRDtJQUNYLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLE1BQTFCLEdBQW1DLENBQXBDLENBQXNDLENBQUMsV0FBbkQsR0FBaUUsRUFBRSxDQUFDLENBQUQsQ0FBRyxDQUFDLE9BQU4sQ0FBYyxDQUFkO0lBQ2pFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLE1BQTFCLEdBQW1DLENBQXBDLENBQXNDLENBQUMsV0FBbkQsR0FBb0UsWUFBWSxDQUFDLENBQUQsQ0FBWixHQUFrQixJQUFyQixHQUErQixFQUEvQixHQUF1QyxZQUFZLENBQUMsQ0FBRCxDQUFHLENBQUMsT0FBaEIsQ0FBd0IsUUFBeEI7RUFIekc7U0FLQTtBQW5DWTs7QUFxQ2IsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBRVAsTUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUMsTUFBQSxHQUFTLElBQUksZUFBSixDQUFvQixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXBDO0VBRVQsSUFBRyxNQUFNLENBQUMsSUFBUCxLQUFlLENBQWxCO0lBQ0MsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxnQkFBbEMsQ0FBbUQsT0FBbkQsRUFBNEQsYUFBNUQ7SUFDQSxRQUFBLENBQUE7QUFDQSxXQUhEOztFQUtBLFFBQVEsQ0FBQyxjQUFULENBQXdCLFVBQXhCLENBQW1DLENBQUMsS0FBcEMsR0FBNEM7RUFDNUMsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxLQUFsQyxHQUEwQztFQUUxQyxVQUFBLENBQUE7RUFFQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXBCO0lBQ0MsUUFBQSxDQUFBO0FBQ0EsV0FGRDs7RUFJQSxNQUFBLEdBQVksUUFBUSxDQUFDLE1BQVQsS0FBbUIsT0FBTyxDQUFDLE1BQVIsR0FBaUIsQ0FBdkMsR0FBOEMsVUFBQSxDQUFBLENBQTlDLEdBQWdFLFlBQUEsQ0FBQTtFQUN6RSxJQUFHLFFBQVEsQ0FBQyxLQUFULEtBQWtCLENBQXJCO0lBQTRCLE1BQUEsR0FBUyxNQUFBLENBQU8sTUFBUCxFQUFyQzs7RUFFQSxXQUFBLENBQVksTUFBWjtFQUVBLEtBQUEsR0FBUSxHQXJCVDtBQXNCQztFQUFBLEtBQUEscUNBQUE7O0lBQ0MsS0FBSyxDQUFDLElBQU4sQ0FBVyxRQUFBLENBQVMsTUFBTSxDQUFDLENBQUQsQ0FBZixFQUFtQixPQUFPLENBQUMsQ0FBRCxDQUExQixDQUFYO0VBREQ7RUFHQSxNQUFBLEdBQVMsTUF6QlY7RUEwQkMsS0FBQSxHQUFRLENBQUMsQ0FBQyxHQUFGLENBQU0sR0FBRyxLQUFULEVBMUJUO0VBNEJDLFdBQUEsQ0FBWSxLQUFaO0VBQ0EsVUFBQSxDQUFXLE1BQVgsRUFBbUIsQ0FBbkI7RUFFQSxvQkFBQSxDQUFBO0VBRUEsR0FBQSxHQUFNLFVBQUEsQ0FBQTtTQUNOLFFBQVEsQ0FBQyxLQUFULEdBQWlCLFFBQVEsQ0FBQyxLQUFULEdBQWlCLFFBQUEsQ0FBUyxHQUFUO0FBcEM1Qjs7QUFzQ1AsUUFBUSxDQUFDLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFFBQUEsQ0FBQyxLQUFELENBQUE7QUFFbkMsTUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUMsVUFBRyxLQUFLLENBQUMsa0JBQU8sT0FBYixTQUFIO0lBQ0MsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsV0FBeEIsQ0FBb0MsQ0FBQyxLQUFLLENBQUMsT0FBM0MsV0FBd0QsS0FBSyxDQUFDLGtCQUFPLE1BQWIsV0FBSCxHQUEwQixPQUExQixHQUF1QztXQUM1RixRQUFRLENBQUMsY0FBVCxDQUF3QixRQUF4QixDQUFpQyxDQUFDLEtBQUssQ0FBQyxPQUF4QyxXQUFxRCxLQUFLLENBQUMsa0JBQU8sTUFBYixXQUFILEdBQTBCLE9BQTFCLEdBQXVDLE9BRjFGOztBQUZrQyxDQUFuQzs7QUFNQSxJQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIMK9XHJcblxyXG5pbXBvcnQge1BsYXllcn0gZnJvbSAnLi9wbGF5ZXIuanMnXHJcbmltcG9ydCB7RmFpclBhaXJ9IGZyb20gJy4vZmFpcnBhaXIuanMnXHJcbmltcG9ydCB7aGVscFRleHR9IGZyb20gJy4vdGV4dHMuanMnXHJcbmltcG9ydCB7cGVyZm9ybWFuY2V9IGZyb20gJy4vcmF0aW5nLmpzJ1xyXG5pbXBvcnQge3RhYmxlLHRoZWFkLHRoLHRyLHRkLGEsZGl2LHByZSxwLGgyfSBmcm9tICcuL2h0bWwuanMnXHJcblxyXG5lY2hvID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcblxyXG5zZXR0aW5ncyA9IHtUSVRMRTonJywgR0FNRVM6MCwgUk9VTkRTOjAsIFNPUlQ6MSwgT05FOjEsIEJBTEFOQ0U6MX0gIyBPTkUgPSAxICMgMD1kZXYgMT1wcm9kXHJcblxyXG5SRVNVTFRTID0gW11cclxuXHJcbmFsaWduTGVmdCAgID0ge3N0eWxlOiBcInRleHQtYWxpZ246bGVmdFwifVxyXG5hbGlnbkNlbnRlciA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOmNlbnRlclwifVxyXG5hbGlnblJpZ2h0ICA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOnJpZ2h0XCJ9XHJcblxyXG5wbGF5ZXJzID0gW11cclxucm91bmRzID0gW10gIyB2ZW0gbcO2dGVyIHZlbT8gW3csYl0uIFQgZXggWzAsOV0sIFsxLDhdIC4uLl1cclxucmVzdWx0cyA9IFtdICMgW1swLDEsMiwtMSwyXSwgWzEsMiwtMSwwLDJdXSBWaXRzcGVsYXJuYXMgcmVzdWx0YXQgaSB2YXJqZSByb25kLiAtMSA8PT4geCBkdnMgZWogc3BlbGFkXHJcblxyXG5kaXNwbGF5ID0gMyAjIGJvdGhcclxuZnJpcm9uZCA9IG51bGwgIyBpbmdlbiBmcmlyb25kLiBBbm5hcnMgaW5kZXggZsO2ciBmcmlyb25kZW5cclxuXHJcbnNvcnRlcmluZ3NPcmRuaW5nID0ge31cdCMgU3BhcmEgcGVyIGtvbHVtblxyXG5cclxubG9uZ3MgPSBbXSAjIHVuZGVybGFnIGbDtnIgc2hvd1BsYXllcnNcclxuc2hvcnRzID0gW10gIyB1bmRlcmxhZyBmw7ZyIHNob3dUYWJsZXNcclxuXHJcbmFzcyA9IChhLGIpIC0+XHJcblx0aWYgXy5pc0VxdWFsIGEsIGIgdGhlbiByZXR1cm5cclxuXHRlY2hvICdBc3NlcnRpb24gZmFpbGVkOiAob3BlbiB0aGUgQXNzZXJ0aW9uIGJlbG93IHRvIGZpbmQgdGhlIGZhaWxpbmcgYXNzZXJ0aW9uKSdcclxuXHRlY2hvICcgIGV4cGVjdCcsIEpTT04uc3RyaW5naWZ5IGEgXHJcblx0ZWNobyAnICBhY3R1YWwnLCBKU09OLnN0cmluZ2lmeSBiXHJcblx0Y29uc29sZS5hc3NlcnQgZmFsc2UgIyBjYW4gYmUgdXNlZCB0byB0cmFjayB0aGUgYXNzZXJ0XHJcbmFzcyA3LCAzICsgNFxyXG5cclxuIyBUaGUgc2hvcnQgRm9ybSBpcyB1c2VkIHRvIHJlbmRlciB0aGUgdGFibGUgbGlzdFxyXG4jIHJvdW5kczogcHJvZHVjZWQgYnkgbWFrZUJlcmdlciBhbmQgbWFrZUZhaXJQYWlyXHJcbiMgcmVzdWx0czogcHJvZHVjZWQgYnkgdGhlIGh1bWFuXHJcbnNob3J0Rm9ybSA9IChyb3VuZHMsIHJlc3VsdHMpIC0+ICMgcHJvZHVjZXMgdGhlIHNob3J0IGZvcm0gZm9yIE9ORSByb3VuZCAoYm9yZHNsaXN0YW4pLiBJZiB0aGVyZSBpcyBhIEJZRSwgcHV0IGl0IGxhc3QgaW4gdGhlIGxpc3RcclxuXHRpZiByb3VuZHMubGVuZ3RoID4gcmVzdWx0cy5sZW5ndGggdGhlbiByZXN1bHRzICs9ICdGJ1xyXG5cdHJvdW5kc1tpXS5jb25jYXQgcmVzdWx0c1tpXSBmb3IgaSBpbiByYW5nZSByZXN1bHRzLmxlbmd0aFxyXG5hc3MgW1sxLDEwLFwiMFwiXSwgWzIsOSxcInJcIl0sIFszLDgsXCIxXCJdLCBbNCw3LFwiMFwiXSwgWzUsNixcInJcIl0sIFswLDExLFwiRlwiXV0sIHNob3J0Rm9ybSBbWzEsMTBdLCBbMiw5XSwgWzMsOF0sIFs0LDddLCBbNSw2XSwgWzAsMTFdXSwgXCIwcjEwclwiXHJcbmFzcyBbWzEsMTAsXCIwXCJdLCBbMiw5LFwiclwiXSwgWzMsOCxcIjFcIl0sIFs0LDcsXCIwXCJdLCBbNSw2LFwiclwiXSwgWzAsMTEsXCJ4XCJdXSwgc2hvcnRGb3JtIFtbMSwxMF0sIFsyLDldLCBbMyw4XSwgWzQsN10sIFs1LDZdLCBbMCwxMV1dLCBcIjByMTByeFwiXHJcblxyXG4jIGxpc3RpZnkgPSAocykgLT4gKCcwcjEnLmluZGV4T2YgY2gpIGZvciBjaCBpbiBzICMgb212YW5kbGEgXCJyMDF4MVwiIHRpbGwgWzEsMCwyLC0xLDJdIFxyXG4jIGFzcyBbMCwxLDIsLTEsMl0sIGxpc3RpZnkgJzByMXgxJ1xyXG5cclxuY29udmVydCA9IChpbnB1dCxhLGIpIC0+IGlmIGlucHV0IGluIGEgdGhlbiBiW2EuaW5kZXhPZiBpbnB1dF0gZWxzZSBpbnB1dCAjIGEgb2NoIGIgw6RyIHN0csOkbmdhclxyXG5cclxuY29udmVydExvbmcgPSAoaW5wdXQsYSxiKSAtPiAjIGIgw6RyIHNlcGFyZXJhZCBtZWQgfFxyXG5cdGkgPSBhLmluZGV4T2YgaW5wdXRcclxuXHRiID0gYi5zcGxpdCAnfCdcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYltpXSBlbHNlIGlucHV0XHJcblxyXG5vdGhlciA9IChpbnB1dCkgLT4gY29udmVydCBpbnB1dCwgXCIwMUZHXCIsXCIxMDExXCJcclxuYXNzICcxJywgb3RoZXIgJzAnXHJcbmFzcyAncicsIG90aGVyICdyJ1xyXG5hc3MgJzAnLCBvdGhlciAnMSdcclxuYXNzICcxJywgb3RoZXIgJ0YnXHJcbmFzcyAnMScsIG90aGVyICdHJ1xyXG5hc3MgJ3gnLCBvdGhlciAneCdcclxuXHJcbmxvbmdGb3JtID0gKHJvdW5kcywgcmVzdWx0cykgLT4gIyBwcm9kdWNlcyB0aGUgbG9uZyBmb3JtIGZvciBPTkUgcm91bmQgKHNwZWxhcmxpc3RhbikuIElmIHRoZXJlIGlzIGEgQllFLCBwdXQgaXQgbGFzdCBpbiB0aGUgbGlzdFxyXG5cdGlmIHJvdW5kcy5sZW5ndGggPiByZXN1bHRzLmxlbmd0aCB0aGVuIHJlc3VsdHMgKz0gJ0YnXHJcblx0cmVzdWx0ID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRbdyxiXSA9IHJvdW5kc1tpXVxyXG5cdFx0cmVzID0gcmVzdWx0c1tpXVxyXG5cdFx0cmVzdWx0LnB1c2ggW3csYiwndycscmVzXVxyXG5cdFx0cmVzdWx0LnB1c2ggW2IsdywnYicsb3RoZXIgcmVzXVxyXG5cdHJlc3VsdC5zb3J0IChhLGIpIC0+IGFbMF0gLSBiWzBdXHJcbmFzcyBbXHJcblx0WyAwLDExLCd3JywnRiddXHJcblx0WyAxLDEwLCd3JywnMCddXHJcblx0WyAyLCA5LCd3JywnciddXHJcblx0WyAzLCA4LCd3JywnMSddXHJcblx0WyA0LCA3LCd3JywnMCddXHJcblx0WyA1LCA2LCd3JywnciddXHJcblx0WyA2LCA1LCdiJywnciddXHJcblx0WyA3LCA0LCdiJywnMSddXHJcblx0WyA4LCAzLCdiJywnMCddXHJcblx0WyA5LCAyLCdiJywnciddXHJcblx0WzEwLCAxLCdiJywnMSddXHJcblx0WzExLCAwLCdiJywnMSddXHJcbl0sIGxvbmdGb3JtIFtbMSwxMF0sIFsyLDldLCBbMyw4XSwgWzQsN10sIFs1LDZdLCBbMCwxMV1dLCBcIjByMTByXCJcclxuIyBhc3MgW1sxLDEwLFwiMFwiXSwgWzIsOSxcInJcIl0sIFszLDgsXCIxXCJdLCBbNCw3LFwiMFwiXSwgWzUsNixcInJcIl0sIFswLDExLFwieFwiXV0sIGxvbmdGb3JtIFtbMSwxMF0sIFsyLDldLCBbMyw4XSwgWzQsN10sIFs1LDZdLCBbMCwxMV1dLCBcIjByMTByeFwiXHJcblxyXG5wcmV0dGlmeSA9IChjaCkgLT4gaWYgY2ggPT0gdW5kZWZpbmVkIHRoZW4gcmV0dXJuIFwiIC0gXCIgZWxzZSBjb252ZXJ0TG9uZyBjaCwgXCJ4RjByMVwiLFwiLXwtfDAgLSAxfMK9IC0gwr18MSAtIDBcIlxyXG5hc3MgXCIwIC0gMVwiLCBwcmV0dGlmeSAnMCdcclxuYXNzIFwiwr0gLSDCvVwiLCBwcmV0dGlmeSAncidcclxuYXNzIFwiMSAtIDBcIiwgcHJldHRpZnkgJzEnXHJcbmFzcyBcIi1cIiwgcHJldHRpZnkgJ3gnXHJcblxyXG5leHBhbmQgPSAocm91bmRzKSAtPiAjIG1ha2UgYSBkb3VibGUgcm91bmQgZnJvbSBhIHNpbmdsZVxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIHJvdW5kIGluIHJvdW5kc1xyXG5cdFx0cmVzdWx0LnB1c2ggKFt3LGJdIGZvciBbdyxiXSBpbiByb3VuZClcclxuXHRcdHJlc3VsdC5wdXNoIChbYix3XSBmb3IgW3csYl0gaW4gcm91bmQpXHJcblx0cmVzdWx0XHJcbmFzcyBbW1sxLDJdLFszLDRdXSxbWzIsMV0sWzQsM11dLFtbMSw0XSxbMiwzXV0sW1s0LDFdLFszLDJdXV0sIGV4cGFuZCBbW1sxLDJdLFszLDRdXSwgW1sxLDRdLFsyLDNdXV1cclxuXHJcbmZpbmROdW1iZXJPZkRlY2ltYWxzID0gKGxzdCkgLT5cclxuXHRiZXN0ID0gMFxyXG5cdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdHVuaWsgPSBfLnVuaXEgKGl0ZW0udG9GaXhlZChpKSBmb3IgaXRlbSBpbiBsc3QpXHJcblx0XHRpZiB1bmlrLmxlbmd0aCA+IGJlc3QgdGhlbiBbYmVzdCxpYmVzdF0gPSBbdW5pay5sZW5ndGgsaV1cclxuXHRpYmVzdFxyXG5hc3MgMCwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAsMTIwMF1cclxuYXNzIDAsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLDEyMDFdXHJcbmFzcyAwLCBmaW5kTnVtYmVyT2ZEZWNpbWFscyBbMTIwMC4yMywxMjAwLjIzXVxyXG5hc3MgMSwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMjMsMTIwMC4zXVxyXG5hc3MgMSwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMjMsMTIwMC4zXVxyXG5hc3MgMywgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMjMsMTIwMC4yMzQ1XVxyXG5hc3MgMCwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMTIzNDUsMTIwMC4xMjM0NV1cclxuXHJcbnNrYXBhU29ydGVyaW5nc2tsaWNrID0gLT5cclxuXHJcblx0dGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0aCdcclxuXHJcblx0I2VjaG8gdGhzXHJcblx0aW5kZXggPSAtMVxyXG5cdGZvciBfdGggaW4gdGhzXHJcblx0XHRpbmRleCsrXHJcblx0XHRkbyAoX3RoLGluZGV4KSAtPlxyXG5cdFx0XHRfdGguYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAoZXZlbnQpIC0+XHJcblx0XHRcdFx0a2V5ID0gX3RoLnRleHRDb250ZW50XHJcblx0XHRcdFx0aWYgIWlzTmFOIHBhcnNlSW50IGtleVxyXG5cdFx0XHRcdFx0a2V5ID0gcGFyc2VJbnQoa2V5KSAtIHNldHRpbmdzLk9ORVxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcyBzaG9ydHMsIGtleVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciAnI3N0YWxsbmluZyB0Ym9keSdcclxuXHRcdFx0XHRyYWRlciA9IEFycmF5LmZyb20gdGJvZHkucXVlcnlTZWxlY3RvckFsbCAndHInXHJcblx0XHRcdFx0c3RpZ2FuZGUgPSBrZXkgaW4gXCIjIE5hbW5cIi5zcGxpdCAnICdcclxuXHJcblx0XHRcdFx0cmFkZXIuc29ydCAoYSwgYikgLT5cclxuXHRcdFx0XHRcdGNlbGxBID0gYS5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblx0XHRcdFx0XHRjZWxsQiA9IGIuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cclxuXHRcdFx0XHRcdCMgRsO2cnPDtmsgasOkbWbDtnJhIHNvbSB0YWwsIGFubmFycyBzb20gdGV4dFxyXG5cdFx0XHRcdFx0bnVtQSA9IHBhcnNlRmxvYXQgY2VsbEFcclxuXHRcdFx0XHRcdG51bUIgPSBwYXJzZUZsb2F0IGNlbGxCXHJcblx0XHRcdFx0XHRpZiAhaXNOYU4obnVtQSkgYW5kICFpc05hTihudW1CKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBudW1BIC0gbnVtQiBlbHNlIG51bUIgLSBudW1BXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIGNlbGxBLmxvY2FsZUNvbXBhcmUgY2VsbEIgZWxzZSBjZWxsQi5sb2NhbGVDb21wYXJlIGNlbGxBXHJcblxyXG5cdFx0XHRcdCMgTMOkZ2cgdGlsbGJha2EgcmFkZXJuYSBpIHNvcnRlcmFkIG9yZG5pbmdcclxuXHRcdFx0XHRmb3IgcmFkIGluIHJhZGVyXHJcblx0XHRcdFx0XHR0Ym9keS5hcHBlbmRDaGlsZCByYWRcclxuXHJcbnNhZmVHZXQgPSAocGFyYW1zLGtleSxzdGFuZGFyZD1cIlwiKSAtPiBcclxuXHRpZiBwYXJhbXMuZ2V0IGtleSB0aGVuIHJldHVybiBwYXJhbXMuZ2V0KGtleSkudHJpbSgpXHJcblx0aWYgcGFyYW1zLmdldCAnICcgKyBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCgnICcgKyBrZXkpLnRyaW0oKVxyXG5cdHN0YW5kYXJkXHJcblxyXG5wYXJzZVF1ZXJ5ID0gLT5cclxuXHRlY2hvIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0c2V0dGluZ3MuVElUTEUgPSBzYWZlR2V0IHBhcmFtcywgXCJUSVRMRVwiXHJcblx0c2V0dGluZ3MuR0FNRVMgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJHQU1FU1wiLCBcIjFcIlxyXG5cdHNldHRpbmdzLlNPUlQgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJTT1JUXCIsIFwiMVwiXHJcblx0c2V0dGluZ3MuT05FID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiT05FXCIsIFwiMVwiXHJcblx0c2V0dGluZ3MuQkFMQU5DRSA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIkJBTEFOQ0VcIiwgXCIxXCJcclxuXHJcblx0UkVTVUxUUyA9IFswLDEsMl0gIyBpbnRlcm50IGJydWtcclxuXHJcblx0cGxheWVycyA9IFtdXHJcblx0cGVyc29ucyA9IHBhcmFtcy5nZXRBbGwgXCJwXCJcclxuXHJcblx0aWYgc2V0dGluZ3MuU09SVCA9PSAxIHRoZW4gcGVyc29ucy5zb3J0KCkucmV2ZXJzZSgpXHJcblxyXG5cdGkgPSAwXHJcblx0ZWNobyBcIlwiXHJcblx0Zm9yIHBlcnNvbiBpbiBwZXJzb25zXHJcblx0XHRpICs9IDFcclxuXHRcdGVsbyA9IHBhcnNlSW50IHBlcnNvbi5zbGljZSAwLDRcclxuXHRcdG5hbWUgPSBwZXJzb24uc2xpY2UoNCkudHJpbSgpXHJcblx0XHRlY2hvIGksIGVsbyxuYW1lXHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBwbGF5ZXJzLmxlbmd0aCwgbmFtZSwgZWxvXHJcblxyXG5cdGlmIHBsYXllcnMubGVuZ3RoICUgMiA9PSAxXHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBwbGF5ZXJzLmxlbmd0aCwgJ0ZSSVJPTkQnLCAwXHJcblx0XHRmcmlyb25kID0gcGxheWVycy5sZW5ndGggLSAxXHJcblx0ZWxzZVxyXG5cdFx0ZnJpcm9uZCA9IG51bGxcclxuXHJcblx0c2V0dGluZ3MuUk9VTkRTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiUk9VTkRTXCIsIFwiI3twbGF5ZXJzLmxlbmd0aC0xfVwiXHJcblx0ZWNobyBzZXR0aW5nc1xyXG5cclxucGFyc2VUZXh0YXJlYSA9IC0+XHJcblx0ZWNobyAncGFyc2VUZXh0QXJlYSdcclxuXHRyYXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcInRleHRhcmVhXCJcclxuXHRlY2hvICd0ZXh0YXJlYScscmF3LnZhbHVlXHJcblxyXG5cdGxpbmVzID0gcmF3LnZhbHVlXHJcblx0bGluZXMgPSBsaW5lcy5zcGxpdCBcIlxcblwiXHJcblxyXG5cdHJvdW5kcyA9IG51bGxcclxuXHJcblx0Zm9yIGxpbmUgaW4gbGluZXMgXHJcblx0XHRpZiBsaW5lID09IFwiXCIgdGhlbiBjb250aW51ZVxyXG5cdFx0aWYgbGluZS5pbmNsdWRlcyAnPSdcclxuXHRcdFx0W2tleSwgdmFsXSA9IGxpbmUuc3BsaXQgJz0nXHJcblx0XHRcdGtleSA9IGtleS50cmltKClcclxuXHRcdFx0dmFsID0gdmFsLnRyaW0oKVxyXG5cdFx0XHRpZiBrZXkgPT0gJ1RJVExFJyB0aGVuIHNldHRpbmdzLlRJVExFID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnR0FNRVMnIHRoZW4gc2V0dGluZ3MuR0FNRVMgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdST1VORFMnIHRoZW4gc2V0dGluZ3MuUk9VTkRTID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnU09SVCcgdGhlbiBzZXR0aW5ncy5TT1JUID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnT05FJyB0aGVuIHNldHRpbmdzLk9ORSA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ0JBTEFOQ0UnIHRoZW4gc2V0dGluZ3MuQkFMQU5DRSA9IHZhbFxyXG5cdFx0XHRpZiBrZXlbMF0gPT0gJ3InXHJcblx0XHRcdFx0biA9IHBsYXllcnMubGVuZ3RoIC8vIDJcclxuXHRcdFx0XHRpZiByb3VuZHMgPT0gbnVsbCB0aGVuIHJvdW5kcyA9IG5ldyBBcnJheShzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EUykuZmlsbCBcInhcIi5yZXBlYXQgblxyXG5cdFx0XHRcdHJvdW5kc1trZXkuc2xpY2UoMSkgLSAxXSA9IHZhbFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwbGF5ZXJzLnB1c2ggbGluZVxyXG5cclxuXHRlY2hvIHJvdW5kc1xyXG5cdGVjaG8gd2luZG93LmxvY2F0aW9uLmhyZWZcclxuXHJcblx0aWYgcm91bmRzID09IG51bGwgdGhlbiByb3VuZHMgPSBbXVxyXG5cclxuXHRpZiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyBcImdpdGh1YlwiIHRoZW4gdXJsID0gXCJodHRwczovL2NocmlzdGVybmlsc3Nvbi5naXRodWIuaW8vMjAyNS8wMTMtRmxvYXRpbmdCZXJnZXIvXCIgZWxzZSB1cmwgPSAnLydcclxuXHJcblx0dXJsICs9IFwiP1RJVExFPSN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHR1cmwgKz0gXCImR0FNRVM9I3tzZXR0aW5ncy5HQU1FU31cIlxyXG5cdHVybCArPSBcIiZST1VORFM9I3tzZXR0aW5ncy5ST1VORFN9XCJcclxuXHR1cmwgKz0gXCImU09SVD0je3NldHRpbmdzLlNPUlR9XCJcclxuXHR1cmwgKz0gXCImT05FPSN7c2V0dGluZ3MuT05FfVwiXHJcblx0dXJsICs9IFwiJkJBTEFOQ0U9I3tzZXR0aW5ncy5CQUxBTkNFfVwiXHJcblxyXG5cdGZvciBwbGF5ZXIgaW4gcGxheWVyc1xyXG5cdFx0dXJsICs9IFwiJnA9I3twbGF5ZXJ9XCJcclxuXHJcblx0Zm9yIHIgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0aWYgcm91bmRzW3JdID09ICd4eHh4eCcgdGhlbiBjb250aW51ZVxyXG5cdFx0dXJsICs9IFwiJnIje3IrMX09I3tyb3VuZHNbcl19XCJcclxuXHJcblx0dXJsID0gdXJsLnJlcGxhY2VBbGwgJyAnLCAnKydcclxuXHJcblx0ZWNobyB1cmxcclxuXHRwbGF5ZXJzID0gW11cclxuXHRyb3VuZHMgPSBbXVxyXG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXHJcblxyXG5zYXZlUGFpcmluZyA9IChyLCBBLCBoYWxmLCBuKSAtPlxyXG5cdGxzdCA9IGlmIHIgJSAyID09IDEgdGhlbiBbW0FbbiAtIDFdLCBBWzBdXV0gZWxzZSBbW0FbMF0sIEFbbiAtIDFdXV1cclxuXHRmb3IgaSBpbiBbMS4uLmhhbGZdXHJcblx0XHRsc3QucHVzaCBbQVtpXSwgQVtuIC0gMSAtIGldXVxyXG5cdGlmIGZyaXJvbmQgdGhlbiBsc3QucHVzaCBsc3Quc2hpZnQoKVxyXG5cdGxzdC5zb3J0KClcclxuXHJcbm1ha2VCZXJnZXIgPSAtPlxyXG5cdGVjaG8gJ0JFUkdFUidcclxuXHJcblx0biA9IHBsYXllcnMubGVuZ3RoXHJcblx0aWYgbiAlIDIgPT0gMSB0aGVuIG4gKz0gMVxyXG5cdGhhbGYgPSBuIC8vIDIgXHJcblx0QSA9IFswLi4ubl1cclxuXHRyb3VuZHMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0cm91bmRzLnB1c2ggc2F2ZVBhaXJpbmcgaSwgQSwgaGFsZiwgblxyXG5cdFx0QS5wb3AoKVxyXG5cdFx0QSA9IEEuc2xpY2UoaGFsZikuY29uY2F0IEEuc2xpY2UoMCxoYWxmKVxyXG5cdFx0QS5wdXNoIG4tMVxyXG5cdGVjaG8gJ0JFUkdFUicscm91bmRzXHJcblx0cm91bmRzXHJcblxyXG5zaG93TWF0cml4ID0gKGZhaXJwYWlyKSAtPlxyXG5cdGlmIHBsYXllcnMubGVuZ3RoID4gMjAgdGhlbiByZXR1cm4gXHJcblx0ZWNobyBcIlwiIFxyXG5cdGZvciBpIGluIHJhbmdlIHBsYXllcnMubGVuZ3RoXHJcblx0XHRsaW5lID0gZmFpcnBhaXIubWF0cml4W2ldXHJcblx0XHRlY2hvIChpICsgc2V0dGluZ3MuT05FKSAlIDEwICsgJyAgICcgKyBsaW5lLmpvaW4oJyAgICcpICsgJyAgJyArIHBsYXllcnNbaV0uZWxvXHJcblx0ZWNobyAnc3VtbWEnLCBmYWlycGFpci5zdW1tYVxyXG5cdGVjaG8gJ0ZBSVJQQUlSJywgZmFpcnBhaXIucm91bmRzXHJcblxyXG5tYWtlRmFpclBhaXIgPSAtPlxyXG5cdGZhaXJwYWlyID0gbmV3IEZhaXJQYWlyIHBsYXllcnMsIHNldHRpbmdzXHJcblx0c2hvd01hdHJpeCBmYWlycGFpclxyXG5cdGZhaXJwYWlyLnJvdW5kc1xyXG5cclxuc2hvd0luZm8gPSAtPlxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykuaW5uZXJIVE1MID0gZGl2IHt9LFxyXG5cdFx0ZGl2IHtjbGFzczpcImhlbHBcIn0sIHByZSB7fSwgaGVscFRleHRcclxuXHJcbnJvdW5kc0NvbnRlbnQgPSAobG9uZywgaSkgLT4gIyByb25kZXJuYXMgZGF0YSArIHBvw6RuZyArIFBSLiBpIGFuZ2VyIHNwZWxhcm51bW1lclxyXG5cclxuXHRyb25kZXIgPSBbXVxyXG5cdG9wcEVsb3MgPSBbXVxyXG5cclxuXHRmb3IgW3csYixjb2xvcixyZXN1bHRdIGluIGxvbmdcclxuXHRcdG9wcG9uZW50ID0gc2V0dGluZ3MuT05FICsgaWYgdyA9PSBpIHRoZW4gYiBlbHNlIHdcclxuXHRcdGlmIGZyaXJvbmQgYW5kIG9wcG9uZW50ID09IGZyaXJvbmQgKyBzZXR0aW5ncy5PTkUgdGhlbiBvcHBvbmVudCA9ICdGJ1xyXG5cdFx0cmVzdWx0ID0gY29udmVydCByZXN1bHQsICd4MTByRkcnLCAnIDEwwr0xMSdcclxuXHJcblx0XHRpZiBjb2xvciA9PSAndycgdGhlbiBhdHRyID0gXCJyaWdodDowcHg7XCIgZWxzZSBhdHRyID0gXCJsZWZ0OjBweDtcIlxyXG5cdFx0Y2VsbCA9IHRkIHtzdHlsZTogXCJwb3NpdGlvbjpyZWxhdGl2ZTtcIn0sXHJcblx0XHRcdGRpdiB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDowcHg7ICBmb250LXNpemU6MC43ZW07XCIgKyBhdHRyfSwgb3Bwb25lbnRcclxuXHRcdFx0ZGl2IHtzdHlsZTogXCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjEycHg7IGZvbnQtc2l6ZToxLjFlbTsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwJSwgLTEwJSlcIn0sIHJlc3VsdFxyXG5cclxuXHRcdHJvbmRlci5wdXNoIGNlbGxcclxuXHJcblx0cm9uZGVyLnB1c2hcdHRkIGFsaWduUmlnaHQsIFwiXCJcclxuXHRyb25kZXIucHVzaCB0ZCB7fSwgXCJcIlxyXG5cdHJvbmRlci5qb2luIFwiXCJcclxuXHJcbnNob3dQbGF5ZXJzID0gKGxvbmdzKSAtPiAjIGxvbmdzIGxhZ3JhZCBzb20gbGlzdGEgYXYgc3BlbGFyZVxyXG5cclxuXHRyb3dzID0gW11cclxuXHJcblx0Zm9yIGxvbmcsIGkgaW4gbG9uZ3NcclxuXHRcdHBsYXllciA9IHBsYXllcnNbaV1cclxuXHRcdGlmIHBsYXllci5uYW1lID09ICdGUklST05EJyB0aGVuIGNvbnRpbnVlXHJcblx0XHRyb3dzLnB1c2ggdHIge30sXHJcblx0XHRcdHRkIHt9LCBpICsgc2V0dGluZ3MuT05FXHJcblx0XHRcdHRkIGFsaWduTGVmdCwgcGxheWVyLm5hbWVcclxuXHRcdFx0dGQge30sIHBsYXllci5lbG9cclxuXHRcdFx0cm91bmRzQ29udGVudCBsb25nLCBpXHJcblxyXG5cdHJlc3VsdCA9IGRpdiB7fSxcclxuXHRcdGgyIHt9LCBzZXR0aW5ncy5USVRMRVxyXG5cdFx0dGFibGUge30sXHJcblx0XHRcdHRoZWFkIHt9LFxyXG5cdFx0XHRcdHRoIHt9LCBcIiNcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIk5hbW5cIlxyXG5cdFx0XHRcdHRoIHt9LCBcIkVsb1wiXHJcblx0XHRcdFx0KHRoIHt9LCBcIiN7aSArIHNldHRpbmdzLk9ORX1cIiBmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoKS5qb2luIFwiXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJQXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJQUlwiXHJcblx0XHRcdHJvd3Muam9pbiBcIlwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFsbG5pbmcnKS5pbm5lckhUTUwgPSByZXN1bHRcclxuXHJcbnNob3dUYWJsZXMgPSAoc2hvcnRzLCBzZWxlY3RlZFJvdW5kKSAtPlxyXG5cdGlmIHJvdW5kcy5sZW5ndGggPT0gMCB0aGVuIHJldHVyblxyXG5cclxuXHRyb3dzID0gXCJcIlxyXG5cdGJvcmQgPSAwXHJcblx0bWVzc2FnZSA9IFwiXCJcclxuXHJcblx0Zm9yIHNob3J0IGluIHNob3J0c1tzZWxlY3RlZFJvdW5kXVxyXG5cdFx0W3csIGIsIGNvbG9yLCByZXNdID0gc2hvcnRcclxuXHRcdGlmIGNvbG9yID09ICdiJyB0aGVuIGNvbnRpbnVlXHJcblxyXG5cdFx0dml0ID0gcGxheWVyc1t3XS5uYW1lXHJcblx0XHRzdmFydCA9IHBsYXllcnNbYl0ubmFtZVxyXG5cclxuXHRcdGlmIHZpdCA9PSAnRlJJUk9ORCdcclxuXHRcdFx0bWVzc2FnZSA9IFwiIOKAoiAje3N2YXJ0fSBoYXIgZnJpcm9uZFwiXHJcblx0XHRcdGNvbnRpbnVlXHJcblx0XHRpZiBzdmFydCA9PSAnRlJJUk9ORCdcclxuXHRcdFx0bWVzc2FnZSA9IFwiIOKAoiAje3ZpdH0gaGFyIGZyaXJvbmRcIlxyXG5cdFx0XHRjb250aW51ZVxyXG5cdFx0cm93cyArPSB0ciB7fSxcclxuXHRcdFx0dGQge30sIGJvcmQgKyBzZXR0aW5ncy5PTkVcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCB2aXRcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCBzdmFydFxyXG5cdFx0XHR0ZCBhbGlnbkNlbnRlciwgcHJldHRpZnkgcmVzXHJcblx0XHRib3JkKytcclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0aDIge30sIFwiQm9yZHNsaXN0YSBmw7ZyIHJvbmQgI3tzZWxlY3RlZFJvdW5kICsgc2V0dGluZ3MuT05FfVwiXHJcblx0XHR0YWJsZSB7fSxcclxuXHRcdFx0dGhlYWQge30sXHJcblx0XHRcdFx0dGgge30sIFwiQm9yZFwiXHJcblx0XHRcdFx0dGgge30sIFwiVml0XCJcclxuXHRcdFx0XHR0aCB7fSwgXCJTdmFydFwiXHJcblx0XHRcdFx0dGgge30sIFwiUmVzdWx0YXRcIiBcclxuXHRcdFx0cm93c1xyXG5cclxuXHRyZXN1bHQgKz0gXCI8YnI+RyN7c2V0dGluZ3MuR0FNRVN9IOKAoiBSI3tzZXR0aW5ncy5ST1VORFN9IOKAoiBTI3tzZXR0aW5ncy5TT1JUfSDigKIgQiN7c2V0dGluZ3MuQkFMQU5DRX0g4oCiICN7aWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuICdCZXJnZXInIGVsc2UgJ0ZhaXJQYWlyJ30gI3ttZXNzYWdlfVwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZXMnKS5pbm5lckhUTUwgPSByZXN1bHRcclxuXHJcbnJlYWRSZXN1bHRzID0gKHBhcmFtcykgLT5cclxuXHRyZXN1bHRzID0gW11cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBmcmlyb25kIHRoZW4gbiAtPSAyXHJcblx0biAvLz0gMlxyXG5cdFxyXG5cdGZvciByIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHRzLnB1c2ggc2FmZUdldCBwYXJhbXMsIFwiciN7cisxfVwiLCBcInhcIi5yZXBlYXQgblxyXG5cdGVjaG8gJ3JlYWRSZXN1bHRzJywgcmVzdWx0c1xyXG5cclxucHJvZ3Jlc3MgPSAocG9pbnRzKSAtPlxyXG5cdGFudGFsID0gMFxyXG5cdGZvciBwb2ludCBpbiBwb2ludHNcclxuXHRcdGFudGFsICs9IHBvaW50XHJcblx0aWYgZnJpcm9uZCBcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogKHBsYXllcnMubGVuZ3RoIC0gMikgLy8gMn1cIlxyXG5cdGVsc2VcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogcGxheWVycy5sZW5ndGggLyAyfVwiXHJcblxyXG5jYWxjUG9pbnRzID0gLT4gIyBIw6RtdGEgY2VsbGVybmEgZnLDpW4gR1VJOnRcclxuXHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNzdGFsbG5pbmcgdGJvZHknXHJcblx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cclxuXHRQUyA9IFtdXHJcblx0UFJTID0gW11cclxuXHRwZXJmb3JtYW5jZXMgPSBbXSBcclxuXHJcblx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0cG9pbnRzID0gMFxyXG5cdFx0cG9pbnRzUFIgPSAwXHJcblx0XHRlbG9zID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRcdGNlbGwgPSByYWQuY2hpbGRyZW5bMytpXVxyXG5cdFx0XHRvcHAgPSBjZWxsLmNoaWxkcmVuWzBdLnRleHRDb250ZW50XHJcblx0XHRcdHZhbCA9IGNlbGwuY2hpbGRyZW5bMV0udGV4dENvbnRlbnRcclxuXHRcdFx0dmFsdWUgPSAwXHJcblx0XHRcdGlmIHZhbCA9PSAnwr0nIHRoZW4gdmFsdWUgPSAwLjVcclxuXHRcdFx0aWYgdmFsID09ICcxJyB0aGVuIHZhbHVlID0gMVxyXG5cdFx0XHRwb2ludHMgKz0gdmFsdWVcclxuXHJcblx0XHRcdGlmIHZhbCBpbiAnMMK9MScgYW5kIG9wcCAhPSAnRicgYW5kIHBsYXllcnNbb3BwLTFdLmVsbyA+IDBcclxuXHRcdFx0XHRwb2ludHNQUiArPSB2YWx1ZVxyXG5cdFx0XHRcdGVsb3MucHVzaCBwbGF5ZXJzW29wcC0xXS5lbG9cclxuXHJcblx0XHRQUy5wdXNoIHBvaW50c1xyXG5cdFx0UFJTLnB1c2ggcG9pbnRzUFJcclxuXHRcdHBlcmZvcm1hbmNlcy5wdXNoIHBlcmZvcm1hbmNlIHBvaW50c1BSLCBlbG9zXHJcblxyXG5cdGRlY2ltYWxzID0gZmluZE51bWJlck9mRGVjaW1hbHMgcGVyZm9ybWFuY2VzXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcmFkZXIubGVuZ3RoXHJcblx0XHRyYWQgPSByYWRlcltpXVxyXG5cdFx0cmFkLmNoaWxkcmVuW3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICsgM10udGV4dENvbnRlbnQgPSBQU1tpXS50b0ZpeGVkIDFcclxuXHRcdHJhZC5jaGlsZHJlbltzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EUyArIDRdLnRleHRDb250ZW50ID0gaWYgcGVyZm9ybWFuY2VzW2ldID4gMzk5OSB0aGVuIFwiXCIgZWxzZSBwZXJmb3JtYW5jZXNbaV0udG9GaXhlZCBkZWNpbWFsc1xyXG5cclxuXHRQUlNcclxuXHJcbm1haW4gPSAtPlxyXG5cclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0aWYgcGFyYW1zLnNpemUgPT0gMCBcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIgXCJjbGlja1wiLCBwYXJzZVRleHRhcmVhIFxyXG5cdFx0c2hvd0luZm8oKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dGFyZWFcIikuc3R5bGUgPSAnZGlzcGxheTogbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5zdHlsZSA9ICdkaXNwbGF5OiBub25lJ1xyXG5cclxuXHRwYXJzZVF1ZXJ5KClcclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPCA0XHJcblx0XHRzaG93SW5mbygpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0cm91bmRzID0gaWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuIG1ha2VCZXJnZXIoKSBlbHNlIG1ha2VGYWlyUGFpcigpXHJcblx0aWYgc2V0dGluZ3MuR0FNRVMgPT0gMiB0aGVuIHJvdW5kcyA9IGV4cGFuZCByb3VuZHNcclxuXHJcblx0cmVhZFJlc3VsdHMgcGFyYW1zXHJcblx0XHJcblx0bG9uZ3MgPSBbXSAjIGlubmVow6VsbGVyIGFsbGEgcm9uZGVybmFcclxuXHRmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRsb25ncy5wdXNoIGxvbmdGb3JtIHJvdW5kc1tyXSxyZXN1bHRzW3JdXHJcblxyXG5cdHNob3J0cyA9IGxvbmdzICMgXy5jbG9uZURlZXBcclxuXHRsb25ncyA9IF8uemlwIC4uLmxvbmdzICMgdHJhbnNwb25lcmFyIG1hdHJpc2VuXHJcblxyXG5cdHNob3dQbGF5ZXJzIGxvbmdzXHJcblx0c2hvd1RhYmxlcyBzaG9ydHMsIDBcclxuXHJcblx0c2thcGFTb3J0ZXJpbmdza2xpY2soKVxyXG5cclxuXHRQUlMgPSBjYWxjUG9pbnRzKClcclxuXHRkb2N1bWVudC50aXRsZSA9IHNldHRpbmdzLlRJVExFICsgcHJvZ3Jlc3MgUFJTXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXl1cCcsIChldmVudCkgLT5cclxuXHJcblx0aWYgZXZlbnQua2V5IGluICcxMjMnIFxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFsbG5pbmdcIikuc3R5bGUuZGlzcGxheSA9IGlmIGV2ZW50LmtleSBpbiBcIjEzXCIgdGhlbiBcInRhYmxlXCIgZWxzZSBcIm5vbmVcIlxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YWJsZXNcIikuc3R5bGUuZGlzcGxheSA9IGlmIGV2ZW50LmtleSBpbiBcIjIzXCIgdGhlbiBcInRhYmxlXCIgZWxzZSBcIm5vbmVcIlxyXG5cclxubWFpbigpXHJcbiJdfQ==
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee