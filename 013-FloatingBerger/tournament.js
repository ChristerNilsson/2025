// Generated by CoffeeScript 2.7.0
  // ½ •
var RESULTS, alignCenter, alignLeft, alignRight, antalBord, ass, calcPoints, changeRound, changeTable, convert, convertLong, currRound, currTable, echo, expand, findNumberOfDecimals, frirond, longForm, longs, main, makeBerger, makeFloating, other, parseQuery, parseTextarea, players, prettyResult, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setResult, settings, shortForm, shorts, showInfo, showMatrix, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning, sättMarkör, updateLongsAndShorts,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

settings = {
  TITLE: '',
  GAMES: 0,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1 // ONE = 1 # 0=dev 1=prod
};

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

// Tillståndet ges av dessa fem variabler:
players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

currRound = 0;

currTable = 0;

// display = 3 # both
frirond = null; // ingen frirond. Annars index för frironden

sorteringsOrdning = {}; // Spara per kolumn

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  echo('Assertion failed: (open the Assertion below to find the failing assertion)');
  echo('  expect', JSON.stringify(a));
  echo('  actual', JSON.stringify(b));
  return console.assert(false); // can be used to track the assert
};

ass(7, 3 + 4);

antalBord = function() {
  return Math.floor((players.length + 1) / 2);
};

// The short Form is used to render the table list
// rounds: produced by makeBerger and makeFloating
// results: produced by the human
shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, j, len, ref, results1;
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "F"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "x"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10rx"));

// listify = (s) -> ('0r1'.indexOf ch) for ch in s # omvandla "r01x1" till [1,0,2,-1,2] 
// ass [0,1,2,-1,2], listify '0r1x1'
convert = function(input, a, b) {
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

other = function(input) {
  return convert(input, "01FG", "1011");
};

ass('1', other('0'));

ass('r', other('r'));

ass('0', other('1'));

ass('1', other('F'));

ass('1', other('G'));

ass('x', other('x'));

longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  if (rounds.length > results.length) { //then results += 'F'
    [w, b] = rounds[0];
    results = w === frirond || b === frirond ? 'F' + results : results + 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  // echo 'longForm',rounds,results,result
  return result;
};

ass([[0, 11, 'w', 'F'], [1, 10, 'w', '0'], [2, 9, 'w', 'r'], [3, 8, 'w', '1'], [4, 7, 'w', '0'], [5, 6, 'w', 'r'], [6, 5, 'b', 'r'], [7, 4, 'b', '1'], [8, 3, 'b', '0'], [9, 2, 'b', 'r'], [10, 1, 'b', '1'], [11, 0, 'b', '1']], longForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

// ass [[1,10,"0"], [2,9,"r"], [3,8,"1"], [4,7,"0"], [5,6,"r"], [0,11,"x"]], longForm [[1,10], [2,9], [3,8], [4,7], [5,6], [0,11]], "0r10rx"

// prettify = (ch) -> if ch == undefined then return " - " else convertLong ch, "xF0r1","-|-|0 - 1|½ - ½|1 - 0"
// ass "0 - 1", prettify '0'
// ass "½ - ½", prettify 'r'
// ass "1 - 0", prettify '1'
// ass "-", prettify 'x'
prettyResult = function(ch) {
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

ass("-", prettyResult('x'));

ass("0 - 1", prettyResult('0'));

ass("½ - ½", prettyResult('1'));

ass("1 - 0", prettyResult('2'));

expand = function(rounds) { // make a double round from a single
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

ass([[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]], expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]));

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

ass(0, findNumberOfDecimals([1200, 1200]));

ass(0, findNumberOfDecimals([1200, 1201]));

ass(0, findNumberOfDecimals([1200.23, 1200.23]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(3, findNumberOfDecimals([1200.23, 1200.2345]));

ass(0, findNumberOfDecimals([1200.12345, 1200.12345]));

sättMarkör = function(round, table) {
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  index = -1;
  results1 = [];
  for (k = 0, len1 = trs.length; k < len1; k++) {
    _tr = trs[k];
    index++;
    color = index === currTable + 1 ? 'yellow' : 'white';
    results1.push(_tr.children[3].style = `background-color:${color}`);
  }
  return results1;
};

setResult = function(key, res) { // key in [del 0 space 1]     res in [-1 0 1 2]
  var _td, _tr, b, success, tr3, trs, w;
  // Sätt stallning
  trs = document.querySelectorAll('#stallning tr');
  [w, b] = rounds[currRound][currTable];
  results[currRound][currTable] = res;
  updateLongsAndShorts();
  echo('results', results);
  _td = trs[w + 1].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[b + 1].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  _tr = trs[currTable + 1];
  tr3 = _tr.children[3];
  success = false;
  if (key === 'Delete') {
    success = true;
  } else {
    success = tr3.textContent === '-' || tr3.textContent === res;
  }
  if (success) {
    tr3.textContent = prettyResult(res);
    return currTable = modulo(currTable + 1, antalBord());
  }
};

skapaSorteringsklick = function() {
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var k, key, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseFloat(cellA);
          numB = parseFloat(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (k = 0, len1 = rader.length; k < len1; k++) {
          rad = rader[k];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var elo, i, j, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  i = 0;
  echo("");
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(i, elo, name);
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  return echo(settings);
};

parseTextarea = function() {
  var j, k, key, l, len, len1, len2, line, lines, n, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo('textarea', raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
      if (key[0] === 'r') {
        n = Math.floor(players.length / 2);
        if (rounds === null) {
          rounds = new Array(settings.GAMES * settings.ROUNDS).fill("x".repeat(n));
        }
        rounds[key.slice(1) - 1] = val;
      }
    } else {
      players.push(line);
    }
  }
  echo(rounds);
  echo(window.location.href);
  if (rounds === null) {
    rounds = [];
  }
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (k = 0, len1 = players.length; k < len1; k++) {
    player = players[k];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    r = ref[l];
    if ('' === rounds[r].replaceAll('x', '')) {
      continue;
    }
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  players = [];
  rounds = [];
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

makeBerger = function() {
  var A, half, i, j, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

showMatrix = function(floating) {
  var i, j, len, line, ref;
  if (players.length > 20) {
    return;
  }
  echo("");
  ref = range(players.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i];
    echo((i + settings.ONE) % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
  }
  echo('Summa', floating.summa);
  return echo('Floating', floating.rounds);
};

makeFloating = function() {
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  return floating.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  
  // echo {long}
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    // echo {w,b,color,result,opponent,frirond}
    if (frirond && opponent === frirond + settings.ONE) {
      opponent = 'F';
    }
    result = convert(result, 'x10rFG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

showPlayers = function(longs) { // longs lagrad som lista av spelare
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(alignLeft, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) {
  var b, bord, color, hash, j, len, message, ref, res, result, rows, short, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (color === 'b') {
      continue;
    }
    vit = players[w].name;
    svart = players[b].name;
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
      hash = {
        style: "background-color:red"
      };
      //			hash = {style : "background-color:#{bord == currTable ? 'yellow' : 'white'}" }
      echo(hash);
    }
    rows += tr(hash, td({}, bord + settings.ONE), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettyResult(res))); // prettify
    bord++;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + settings.ONE}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${settings.GAMES} • R${settings.ROUNDS} • S${settings.SORT} • B${settings.BALANCE} • ${settings.ROUNDS === players.length - 1 ? 'Berger' : 'Floating'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var j, len, n, r, ref;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    results.push(safeGet(params, `r${r + 1}`, "x".repeat(n)));
  }
  return echo('readResults', results);
};

progress = function(points) {
  var antal, j, len, point;
  antal = 0;
  for (j = 0, len = points.length; j < len; j++) {
    point = points[j];
    antal += point;
  }
  if (frirond) {
    return ` • ${antal} av ${Math.floor(settings.GAMES * settings.ROUNDS * (players.length - 2) / 2)}`;
  } else {
    return ` • ${antal} av ${settings.GAMES * settings.ROUNDS * players.length / 2}`;
  }
};

calcPoints = function() { // Hämta cellerna från GUI:t
  var PRS, PS, cell, decimals, elos, i, j, k, l, len, len1, len2, opp, performances, points, pointsPR, rad, rader, ref, ref1, tbody, val, value;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  PS = [];
  PRS = [];
  performances = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    points = 0;
    pointsPR = 0;
    elos = [];
    ref = range(settings.GAMES * settings.ROUNDS);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      cell = rad.children[3 + i];
      opp = cell.children[0].textContent;
      val = cell.children[1].textContent;
      value = 0;
      if (val === '½') {
        value = 0.5;
      }
      if (val === '1') {
        value = 1;
      }
      points += value;
      // echo {opp}
      if (indexOf.call('0½1', val) >= 0 && opp !== 'F' && players[opp - settings.ONE].elo > 0) {
        pointsPR += value;
        elos.push(players[opp - settings.ONE].elo);
      }
    }
    PS.push(points);
    PRS.push(pointsPR);
    performances.push(performance(pointsPR, elos));
  }
  decimals = findNumberOfDecimals(performances);
  ref1 = range(rader.length);
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    rad = rader[i];
    rad.children[settings.GAMES * settings.ROUNDS + 3].textContent = PS[i].toFixed(1);
    rad.children[settings.GAMES * settings.ROUNDS + 4].textContent = performances[i] > 3999 ? "" : performances[i].toFixed(decimals);
  }
  return PRS;
};

changeRound = function(delta) {
  currRound = modulo(currRound + delta, rounds.length);
  updateLongsAndShorts();
  return showTables(shorts, currRound);
};

changeTable = function(delta) {
  return currTable = modulo(currTable + delta, antalBord());
};

updateLongsAndShorts = function() {
  var j, len, r, ref;
  longs = []; // innehåller alla ronderna
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    longs.push(longForm(rounds[r], results[r]));
  }
  shorts = longs; // _.cloneDeep
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() {
  var PRS, i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  rounds = settings.ROUNDS === players.length - 1 ? makeBerger() : makeFloating();
  if (settings.GAMES === 2) {
    rounds = expand(rounds);
  }
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(antalBord()).fill('x'));
  }
  echo('results', results);
  // results = [['x','x','x','x'],['x','x','x','x'],['x','x','x','x'],['x','x','x','x'],['x','x','x','x']] # todo
  //	readResults params
  echo('results', results);
  updateLongsAndShorts();
  echo({longs});
  showPlayers(longs);
  showTables(shorts, 0);
  skapaSorteringsklick();
  sättMarkör(currRound, currTable);
  PRS = calcPoints();
  return document.title = settings.TITLE + progress(PRS);
};

document.addEventListener('keydown', function(event) {
  var del, key, ref, ref1, ref2;
  if (ref = event.key, indexOf.call('abc', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("ac", ref1) >= 0) ? "table" : "none";
    document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("bc", ref2) >= 0) ? "table" : "none";
  }
  if (event.key === 'ArrowLeft') {
    changeRound(-1);
  }
  if (event.key === 'ArrowRight') {
    changeRound(+1);
  }
  if (event.key === 'ArrowUp') {
    changeTable(-1);
  }
  if (event.key === 'ArrowDown') {
    changeTable(+1);
  }
  del = 'Delete';
  key = event.key;
  if (key === del) {
    setResult(key, 'x'); // "  -  "
  }
  if (key === '0') {
    setResult(key, '0'); // "0 - 1"
  }
  if (key === ' ') {
    setResult(key, '1'); // "½ - ½"
  }
  if (key === '1') {
    setResult(key, '2'); // "1 - 0"
  }
  return sättMarkör(currRound, currTable);
});

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFLO0FBQUEsSUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxvQkFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLG9CQUFBLEVBQUEsaUJBQUEsRUFBQSxVQUFBLEVBQUEsb0JBQUE7RUFBQTs7O0FBRUwsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFdBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxLQUFSO0VBQWMsS0FBZDtFQUFvQixFQUFwQjtFQUF1QixFQUF2QjtFQUEwQixFQUExQjtFQUE2QixDQUE3QjtFQUErQixHQUEvQjtFQUFtQyxHQUFuQztFQUF1QyxDQUF2QztFQUF5QyxFQUF6QztDQUFBLE1BQUE7O0FBRUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixLQUFBLEdB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LENBQWlDLENBQUMsS0FBSyxDQUFDLE9BQXhDLFdBQXFELEtBQUssQ0FBQyxrQkFBTyxNQUFiLFdBQUgsR0FBMEIsT0FBMUIsR0FBdUMsT0FGMUY7O0VBSUEsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLFdBQWhCO0lBQWtDLFdBQUEsQ0FBWSxDQUFDLENBQWIsRUFBbEM7O0VBQ0EsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLFlBQWhCO0lBQWtDLFdBQUEsQ0FBWSxDQUFDLENBQWIsRUFBbEM7O0VBQ0EsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLFNBQWhCO0lBQWtDLFdBQUEsQ0FBWSxDQUFDLENBQWIsRUFBbEM7O0VBQ0EsSUFBRyxLQUFLLENBQUMsR0FBTixLQUFhLFdBQWhCO0lBQWtDLFdBQUEsQ0FBWSxDQUFDLENBQWIsRUFBbEM7O0VBRUEsR0FBQSxHQUFNO0VBQ04sR0FBQSxHQUFNLEtBQUssQ0FBQztFQUNaLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztTQUVBLFVBQUEsQ0FBVyxTQUFYLEVBQXFCLFNBQXJCO0FBbEJvQyxDQUFyQzs7QUFvQkEsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyDCvSDigKJcclxuXHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuL3BsYXllci5qcydcclxuaW1wb3J0IHtGbG9hdGluZ30gZnJvbSAnLi9mbG9hdGluZy5qcydcclxuaW1wb3J0IHtoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcbmltcG9ydCB7dGFibGUsdGhlYWQsdGgsdHIsdGQsYSxkaXYscHJlLHAsaDJ9IGZyb20gJy4vaHRtbC5qcydcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbnNldHRpbmdzID0ge1RJVExFOicnLCBHQU1FUzowLCBST1VORFM6MCwgU09SVDoxLCBPTkU6MSwgQkFMQU5DRToxfSAjIE9ORSA9IDEgIyAwPWRldiAxPXByb2RcclxuXHJcblJFU1VMVFMgPSBbXVxyXG5cclxuYWxpZ25MZWZ0ICAgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpsZWZ0XCJ9XHJcbmFsaWduQ2VudGVyID0ge3N0eWxlOiBcInRleHQtYWxpZ246Y2VudGVyXCJ9XHJcbmFsaWduUmlnaHQgID0ge3N0eWxlOiBcInRleHQtYWxpZ246cmlnaHRcIn1cclxuXHJcbiMgVGlsbHN0w6VuZGV0IGdlcyBhdiBkZXNzYSBmZW0gdmFyaWFibGVyOlxyXG5wbGF5ZXJzID0gW11cclxucm91bmRzID0gW10gIyB2ZW0gbcO2dGVyIHZlbT8gW3csYl0uIFQgZXggWzAsOV0sIFsxLDhdIC4uLl1cclxucmVzdWx0cyA9IFtdICMgW1swLDEsMiwtMSwyXSwgWzEsMiwtMSwwLDJdXSBWaXRzcGVsYXJuYXMgcmVzdWx0YXQgaSB2YXJqZSByb25kLiAtMSA8PT4geCBkdnMgZWogc3BlbGFkXHJcbmN1cnJSb3VuZCA9IDBcclxuY3VyclRhYmxlID0gMFxyXG5cclxuIyBkaXNwbGF5ID0gMyAjIGJvdGhcclxuZnJpcm9uZCA9IG51bGwgIyBpbmdlbiBmcmlyb25kLiBBbm5hcnMgaW5kZXggZsO2ciBmcmlyb25kZW5cclxuXHJcbnNvcnRlcmluZ3NPcmRuaW5nID0ge31cdCMgU3BhcmEgcGVyIGtvbHVtblxyXG5cclxubG9uZ3MgPSBbXSAjIHVuZGVybGFnIGbDtnIgc2hvd1BsYXllcnNcclxuc2hvcnRzID0gW10gIyB1bmRlcmxhZyBmw7ZyIHNob3dUYWJsZXNcclxuXHJcbmFzcyA9IChhLGIpIC0+XHJcblx0aWYgXy5pc0VxdWFsIGEsIGIgdGhlbiByZXR1cm5cclxuXHRlY2hvICdBc3NlcnRpb24gZmFpbGVkOiAob3BlbiB0aGUgQXNzZXJ0aW9uIGJlbG93IHRvIGZpbmQgdGhlIGZhaWxpbmcgYXNzZXJ0aW9uKSdcclxuXHRlY2hvICcgIGV4cGVjdCcsIEpTT04uc3RyaW5naWZ5IGEgXHJcblx0ZWNobyAnICBhY3R1YWwnLCBKU09OLnN0cmluZ2lmeSBiXHJcblx0Y29uc29sZS5hc3NlcnQgZmFsc2UgIyBjYW4gYmUgdXNlZCB0byB0cmFjayB0aGUgYXNzZXJ0XHJcbmFzcyA3LCAzICsgNFxyXG5cclxuYW50YWxCb3JkID0gLT4gKHBsYXllcnMubGVuZ3RoICsgMSkgLy8gMlxyXG5cclxuIyBUaGUgc2hvcnQgRm9ybSBpcyB1c2VkIHRvIHJlbmRlciB0aGUgdGFibGUgbGlzdFxyXG4jIHJvdW5kczogcHJvZHVjZWQgYnkgbWFrZUJlcmdlciBhbmQgbWFrZUZsb2F0aW5nXHJcbiMgcmVzdWx0czogcHJvZHVjZWQgYnkgdGhlIGh1bWFuXHJcbnNob3J0Rm9ybSA9IChyb3VuZHMsIHJlc3VsdHMpIC0+ICMgcHJvZHVjZXMgdGhlIHNob3J0IGZvcm0gZm9yIE9ORSByb3VuZCAoYm9yZHNsaXN0YW4pLiBJZiB0aGVyZSBpcyBhIEJZRSwgcHV0IGl0IGxhc3QgaW4gdGhlIGxpc3RcclxuXHRpZiByb3VuZHMubGVuZ3RoID4gcmVzdWx0cy5sZW5ndGggdGhlbiByZXN1bHRzICs9ICdGJ1xyXG5cdHJvdW5kc1tpXS5jb25jYXQgcmVzdWx0c1tpXSBmb3IgaSBpbiByYW5nZSByZXN1bHRzLmxlbmd0aFxyXG5hc3MgW1sxLDEwLFwiMFwiXSwgWzIsOSxcInJcIl0sIFszLDgsXCIxXCJdLCBbNCw3LFwiMFwiXSwgWzUsNixcInJcIl0sIFswLDExLFwiRlwiXV0sIHNob3J0Rm9ybSBbWzEsMTBdLCBbMiw5XSwgWzMsOF0sIFs0LDddLCBbNSw2XSwgWzAsMTFdXSwgXCIwcjEwclwiXHJcbmFzcyBbWzEsMTAsXCIwXCJdLCBbMiw5LFwiclwiXSwgWzMsOCxcIjFcIl0sIFs0LDcsXCIwXCJdLCBbNSw2LFwiclwiXSwgWzAsMTEsXCJ4XCJdXSwgc2hvcnRGb3JtIFtbMSwxMF0sIFsyLDldLCBbMyw4XSwgWzQsN10sIFs1LDZdLCBbMCwxMV1dLCBcIjByMTByeFwiXHJcblxyXG4jIGxpc3RpZnkgPSAocykgLT4gKCcwcjEnLmluZGV4T2YgY2gpIGZvciBjaCBpbiBzICMgb212YW5kbGEgXCJyMDF4MVwiIHRpbGwgWzEsMCwyLC0xLDJdIFxyXG4jIGFzcyBbMCwxLDIsLTEsMl0sIGxpc3RpZnkgJzByMXgxJ1xyXG5cclxuY29udmVydCA9IChpbnB1dCxhLGIpIC0+IGlmIGlucHV0IGluIGEgdGhlbiBiW2EuaW5kZXhPZiBpbnB1dF0gZWxzZSBpbnB1dCAjIGEgb2NoIGIgw6RyIHN0csOkbmdhclxyXG5cclxuY29udmVydExvbmcgPSAoaW5wdXQsYSxiKSAtPiAjIGIgw6RyIHNlcGFyZXJhZCBtZWQgfFxyXG5cdGkgPSBhLmluZGV4T2YgaW5wdXRcclxuXHRiID0gYi5zcGxpdCAnfCdcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYltpXSBlbHNlIGlucHV0XHJcblxyXG5vdGhlciA9IChpbnB1dCkgLT4gY29udmVydCBpbnB1dCwgXCIwMUZHXCIsXCIxMDExXCJcclxuYXNzICcxJywgb3RoZXIgJzAnXHJcbmFzcyAncicsIG90aGVyICdyJ1xyXG5hc3MgJzAnLCBvdGhlciAnMSdcclxuYXNzICcxJywgb3RoZXIgJ0YnXHJcbmFzcyAnMScsIG90aGVyICdHJ1xyXG5hc3MgJ3gnLCBvdGhlciAneCdcclxuXHJcbmxvbmdGb3JtID0gKHJvdW5kcywgcmVzdWx0cykgLT4gIyBwcm9kdWNlcyB0aGUgbG9uZyBmb3JtIGZvciBPTkUgcm91bmQgKHNwZWxhcmxpc3RhbikuIElmIHRoZXJlIGlzIGEgQllFLCBwdXQgaXQgbGFzdCBpbiB0aGUgbGlzdFxyXG5cdGlmIHJvdW5kcy5sZW5ndGggPiByZXN1bHRzLmxlbmd0aCAjdGhlbiByZXN1bHRzICs9ICdGJ1xyXG5cdFx0W3csYl0gPSByb3VuZHNbMF1cclxuXHRcdHJlc3VsdHMgPSBpZiB3PT1mcmlyb25kIG9yIGI9PWZyaXJvbmQgdGhlbiAnRicgKyByZXN1bHRzIGVsc2UgcmVzdWx0cyArICdGJ1xyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0W3csYl0gPSByb3VuZHNbaV1cclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJlc3VsdC5wdXNoIFt3LGIsJ3cnLHJlc11cclxuXHRcdHJlc3VsdC5wdXNoIFtiLHcsJ2InLG90aGVyIHJlc11cclxuXHJcblx0cmVzdWx0LnNvcnQgKGEsYikgLT4gYVswXSAtIGJbMF1cclxuXHQjIGVjaG8gJ2xvbmdGb3JtJyxyb3VuZHMscmVzdWx0cyxyZXN1bHRcclxuXHRyZXN1bHRcclxuYXNzIFtcclxuXHRbIDAsMTEsJ3cnLCdGJ11cclxuXHRbIDEsMTAsJ3cnLCcwJ11cclxuXHRbIDIsIDksJ3cnLCdyJ11cclxuXHRbIDMsIDgsJ3cnLCcxJ11cclxuXHRbIDQsIDcsJ3cnLCcwJ11cclxuXHRbIDUsIDYsJ3cnLCdyJ11cclxuXHRbIDYsIDUsJ2InLCdyJ11cclxuXHRbIDcsIDQsJ2InLCcxJ11cclxuXHRbIDgsIDMsJ2InLCcwJ11cclxuXHRbIDksIDIsJ2InLCdyJ11cclxuXHRbMTAsIDEsJ2InLCcxJ11cclxuXHRbMTEsIDAsJ2InLCcxJ11cclxuXSwgbG9uZ0Zvcm0gW1sxLDEwXSwgWzIsOV0sIFszLDhdLCBbNCw3XSwgWzUsNl0sIFswLDExXV0sIFwiMHIxMHJcIlxyXG4jIGFzcyBbWzEsMTAsXCIwXCJdLCBbMiw5LFwiclwiXSwgWzMsOCxcIjFcIl0sIFs0LDcsXCIwXCJdLCBbNSw2LFwiclwiXSwgWzAsMTEsXCJ4XCJdXSwgbG9uZ0Zvcm0gW1sxLDEwXSwgWzIsOV0sIFszLDhdLCBbNCw3XSwgWzUsNl0sIFswLDExXV0sIFwiMHIxMHJ4XCJcclxuXHJcbiMgcHJldHRpZnkgPSAoY2gpIC0+IGlmIGNoID09IHVuZGVmaW5lZCB0aGVuIHJldHVybiBcIiAtIFwiIGVsc2UgY29udmVydExvbmcgY2gsIFwieEYwcjFcIixcIi18LXwwIC0gMXzCvSAtIMK9fDEgLSAwXCJcclxuIyBhc3MgXCIwIC0gMVwiLCBwcmV0dGlmeSAnMCdcclxuIyBhc3MgXCLCvSAtIMK9XCIsIHByZXR0aWZ5ICdyJ1xyXG4jIGFzcyBcIjEgLSAwXCIsIHByZXR0aWZ5ICcxJ1xyXG4jIGFzcyBcIi1cIiwgcHJldHRpZnkgJ3gnXHJcblxyXG5wcmV0dHlSZXN1bHQgPSAoY2gpIC0+IFxyXG5cdGlmIGNoID09ICd4JyB0aGVuIHJldHVybiBcIi1cIlxyXG5cdGlmIGNoID09ICcwJyB0aGVuIHJldHVybiBcIjAgLSAxXCJcclxuXHRpZiBjaCA9PSAnMScgdGhlbiByZXR1cm4gXCLCvSAtIMK9XCJcclxuXHRpZiBjaCA9PSAnMicgdGhlbiByZXR1cm4gXCIxIC0gMFwiXHJcbmFzcyBcIi1cIiwgICAgIHByZXR0eVJlc3VsdCAneCdcclxuYXNzIFwiMCAtIDFcIiwgcHJldHR5UmVzdWx0ICcwJ1xyXG5hc3MgXCLCvSAtIMK9XCIsIHByZXR0eVJlc3VsdCAnMSdcclxuYXNzIFwiMSAtIDBcIiwgcHJldHR5UmVzdWx0ICcyJ1xyXG5cclxuZXhwYW5kID0gKHJvdW5kcykgLT4gIyBtYWtlIGEgZG91YmxlIHJvdW5kIGZyb20gYSBzaW5nbGVcclxuXHRyZXN1bHQgPSBbXVxyXG5cdGZvciByb3VuZCBpbiByb3VuZHNcclxuXHRcdHJlc3VsdC5wdXNoIChbdyxiXSBmb3IgW3csYl0gaW4gcm91bmQpXHJcblx0XHRyZXN1bHQucHVzaCAoW2Isd10gZm9yIFt3LGJdIGluIHJvdW5kKVxyXG5cdHJlc3VsdFxyXG5hc3MgW1tbMSwyXSxbMyw0XV0sW1syLDFdLFs0LDNdXSxbWzEsNF0sWzIsM11dLFtbNCwxXSxbMywyXV1dLCBleHBhbmQgW1tbMSwyXSxbMyw0XV0sIFtbMSw0XSxbMiwzXV1dXHJcblxyXG5maW5kTnVtYmVyT2ZEZWNpbWFscyA9IChsc3QpIC0+XHJcblx0YmVzdCA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHR1bmlrID0gXy51bmlxIChpdGVtLnRvRml4ZWQoaSkgZm9yIGl0ZW0gaW4gbHN0KVxyXG5cdFx0aWYgdW5pay5sZW5ndGggPiBiZXN0IHRoZW4gW2Jlc3QsaWJlc3RdID0gW3VuaWsubGVuZ3RoLGldXHJcblx0aWJlc3RcclxuYXNzIDAsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLDEyMDBdXHJcbmFzcyAwLCBmaW5kTnVtYmVyT2ZEZWNpbWFscyBbMTIwMCwxMjAxXVxyXG5hc3MgMCwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMjMsMTIwMC4yM11cclxuYXNzIDEsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuM11cclxuYXNzIDEsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuM11cclxuYXNzIDMsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuMjM0NV1cclxuYXNzIDAsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjEyMzQ1LDEyMDAuMTIzNDVdXHJcblxyXG5zw6R0dE1hcmvDtnIgPSAocm91bmQsIHRhYmxlKSAtPlxyXG5cclxuXHR0aHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRoJ1xyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgX3RoIGluIHRoc1xyXG5cdFx0aW5kZXgrK1xyXG5cdFx0Y29sb3IgPSBpZiBpbmRleCA9PSBjdXJyUm91bmQgKyAzIHRoZW4gJ3llbGxvdycgZWxzZSAnd2hpdGUnXHJcblx0XHRfdGguc3R5bGUgPSBcImJhY2tncm91bmQtY29sb3I6I3tjb2xvcn1cIlxyXG5cclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjdGFibGVzIHRyJ1xyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgX3RyIGluIHRyc1xyXG5cdFx0aW5kZXgrK1xyXG5cdFx0Y29sb3IgPSBpZiBpbmRleCA9PSBjdXJyVGFibGUgKyAxIHRoZW4gJ3llbGxvdycgZWxzZSAnd2hpdGUnXHJcblx0XHRfdHIuY2hpbGRyZW5bM10uc3R5bGUgPSBcImJhY2tncm91bmQtY29sb3I6I3tjb2xvcn1cIlxyXG5cclxuc2V0UmVzdWx0ID0gKGtleSwgcmVzKSAtPiAjIGtleSBpbiBbZGVsIDAgc3BhY2UgMV0gICAgIHJlcyBpbiBbLTEgMCAxIDJdXHJcblx0IyBTw6R0dCBzdGFsbG5pbmdcclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRyJ1xyXG5cclxuXHRbdyxiXSA9IHJvdW5kc1tjdXJyUm91bmRdW2N1cnJUYWJsZV1cclxuXHJcblx0cmVzdWx0c1tjdXJyUm91bmRdW2N1cnJUYWJsZV0gPSByZXNcclxuXHJcblx0dXBkYXRlTG9uZ3NBbmRTaG9ydHMoKVxyXG5cclxuXHRlY2hvICdyZXN1bHRzJyxyZXN1bHRzXHJcblxyXG5cdF90ZCA9IHRyc1t3ICsgMV0uY2hpbGRyZW5bMyArIGN1cnJSb3VuZF0uY2hpbGRyZW5bMV1cclxuXHRfdGQudGV4dENvbnRlbnQgPSBcIjDCvTFcIltyZXNdXHJcblxyXG5cdF90ZCA9IHRyc1tiICsgMV0uY2hpbGRyZW5bMyArIGN1cnJSb3VuZF0uY2hpbGRyZW5bMV1cclxuXHRfdGQudGV4dENvbnRlbnQgPSBcIjHCvTBcIltyZXNdXHJcblxyXG5cdCMgU8OkdHQgdGFibGVzXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3RhYmxlcyB0cidcclxuXHRfdHIgPSB0cnNbY3VyclRhYmxlICsgMV1cclxuXHR0cjMgPSBfdHIuY2hpbGRyZW5bM11cclxuXHJcblx0c3VjY2VzcyA9IGZhbHNlXHJcblx0aWYga2V5ID09ICdEZWxldGUnIHRoZW4gc3VjY2VzcyA9IHRydWVcclxuXHRlbHNlIHN1Y2Nlc3MgPSB0cjMudGV4dENvbnRlbnQgPT0gJy0nIG9yIHRyMy50ZXh0Q29udGVudCA9PSByZXNcclxuXHRpZiBzdWNjZXNzXHJcblx0XHR0cjMudGV4dENvbnRlbnQgPSBwcmV0dHlSZXN1bHQgcmVzXHJcblx0XHRjdXJyVGFibGUgPSAoY3VyclRhYmxlICsgMSkgJSUgYW50YWxCb3JkKClcclxuXHJcblxyXG5za2FwYVNvcnRlcmluZ3NrbGljayA9IC0+XHJcblxyXG5cdHRocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdGgnXHJcblxyXG5cdCNlY2hvIHRoc1xyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgX3RoIGluIHRoc1xyXG5cdFx0aW5kZXgrK1xyXG5cdFx0ZG8gKF90aCxpbmRleCkgLT5cclxuXHRcdFx0X3RoLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgKGV2ZW50KSAtPlxyXG5cdFx0XHRcdGtleSA9IF90aC50ZXh0Q29udGVudFxyXG5cdFx0XHRcdGlmICFpc05hTiBwYXJzZUludCBrZXlcclxuXHRcdFx0XHRcdGtleSA9IHBhcnNlSW50KGtleSkgLSBzZXR0aW5ncy5PTkVcclxuXHRcdFx0XHRcdHNob3dUYWJsZXMgc2hvcnRzLCBrZXlcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cclxuXHRcdFx0XHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNzdGFsbG5pbmcgdGJvZHknXHJcblx0XHRcdFx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cdFx0XHRcdHN0aWdhbmRlID0ga2V5IGluIFwiIyBOYW1uXCIuc3BsaXQgJyAnXHJcblxyXG5cdFx0XHRcdHJhZGVyLnNvcnQgKGEsIGIpIC0+XHJcblx0XHRcdFx0XHRjZWxsQSA9IGEuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cdFx0XHRcdFx0Y2VsbEIgPSBiLmNoaWxkcmVuW2luZGV4XS50ZXh0Q29udGVudC50cmltKClcclxuXHJcblx0XHRcdFx0XHQjIEbDtnJzw7ZrIGrDpG1mw7ZyYSBzb20gdGFsLCBhbm5hcnMgc29tIHRleHRcclxuXHRcdFx0XHRcdG51bUEgPSBwYXJzZUZsb2F0IGNlbGxBXHJcblx0XHRcdFx0XHRudW1CID0gcGFyc2VGbG9hdCBjZWxsQlxyXG5cdFx0XHRcdFx0aWYgIWlzTmFOKG51bUEpIGFuZCAhaXNOYU4obnVtQilcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGlmIHN0aWdhbmRlIHRoZW4gbnVtQSAtIG51bUIgZWxzZSBudW1CIC0gbnVtQVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBjZWxsQS5sb2NhbGVDb21wYXJlIGNlbGxCIGVsc2UgY2VsbEIubG9jYWxlQ29tcGFyZSBjZWxsQVxyXG5cclxuXHRcdFx0XHQjIEzDpGdnIHRpbGxiYWthIHJhZGVybmEgaSBzb3J0ZXJhZCBvcmRuaW5nXHJcblx0XHRcdFx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0XHRcdFx0dGJvZHkuYXBwZW5kQ2hpbGQgcmFkXHJcblxyXG5zYWZlR2V0ID0gKHBhcmFtcyxrZXksc3RhbmRhcmQ9XCJcIikgLT4gXHJcblx0aWYgcGFyYW1zLmdldCBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldChrZXkpLnRyaW0oKVxyXG5cdGlmIHBhcmFtcy5nZXQgJyAnICsga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQoJyAnICsga2V5KS50cmltKClcclxuXHRzdGFuZGFyZFxyXG5cclxucGFyc2VRdWVyeSA9IC0+XHJcblx0ZWNobyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblxyXG5cdHNldHRpbmdzLlRJVExFID0gc2FmZUdldCBwYXJhbXMsIFwiVElUTEVcIlxyXG5cdHNldHRpbmdzLkdBTUVTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiR0FNRVNcIiwgXCIxXCJcclxuXHRzZXR0aW5ncy5TT1JUID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiU09SVFwiLCBcIjFcIlxyXG5cdHNldHRpbmdzLk9ORSA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIk9ORVwiLCBcIjFcIlxyXG5cdHNldHRpbmdzLkJBTEFOQ0UgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJCQUxBTkNFXCIsIFwiMVwiXHJcblxyXG5cdFJFU1VMVFMgPSBbMCwxLDJdICMgaW50ZXJudCBicnVrXHJcblxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHBlcnNvbnMgPSBwYXJhbXMuZ2V0QWxsIFwicFwiXHJcblxyXG5cdGlmIHNldHRpbmdzLlNPUlQgPT0gMSB0aGVuIHBlcnNvbnMuc29ydCgpLnJldmVyc2UoKVxyXG5cclxuXHRpID0gMFxyXG5cdGVjaG8gXCJcIlxyXG5cdGZvciBwZXJzb24gaW4gcGVyc29uc1xyXG5cdFx0aSArPSAxXHJcblx0XHRlbG8gPSBwYXJzZUludCBwZXJzb24uc2xpY2UgMCw0XHJcblx0XHRuYW1lID0gcGVyc29uLnNsaWNlKDQpLnRyaW0oKVxyXG5cdFx0ZWNobyBpLCBlbG8sbmFtZVxyXG5cdFx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgcGxheWVycy5sZW5ndGgsIG5hbWUsIGVsb1xyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCAlIDIgPT0gMVxyXG5cdFx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgcGxheWVycy5sZW5ndGgsICdGUklST05EJywgMFxyXG5cdFx0ZnJpcm9uZCA9IHBsYXllcnMubGVuZ3RoIC0gMVxyXG5cdGVsc2VcclxuXHRcdGZyaXJvbmQgPSBudWxsXHJcblxyXG5cdHNldHRpbmdzLlJPVU5EUyA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIlJPVU5EU1wiLCBcIiN7cGxheWVycy5sZW5ndGgtMX1cIlxyXG5cdGVjaG8gc2V0dGluZ3NcclxuXHJcbnBhcnNlVGV4dGFyZWEgPSAtPlxyXG5cdGVjaG8gJ3BhcnNlVGV4dEFyZWEnXHJcblx0cmF3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJ0ZXh0YXJlYVwiXHJcblx0ZWNobyAndGV4dGFyZWEnLHJhdy52YWx1ZVxyXG5cclxuXHRsaW5lcyA9IHJhdy52YWx1ZVxyXG5cdGxpbmVzID0gbGluZXMuc3BsaXQgXCJcXG5cIlxyXG5cclxuXHRyb3VuZHMgPSBudWxsXHJcblxyXG5cdGZvciBsaW5lIGluIGxpbmVzIFxyXG5cdFx0aWYgbGluZSA9PSBcIlwiIHRoZW4gY29udGludWVcclxuXHRcdGlmIGxpbmUuaW5jbHVkZXMgJz0nXHJcblx0XHRcdFtrZXksIHZhbF0gPSBsaW5lLnNwbGl0ICc9J1xyXG5cdFx0XHRrZXkgPSBrZXkudHJpbSgpXHJcblx0XHRcdHZhbCA9IHZhbC50cmltKClcclxuXHRcdFx0aWYga2V5ID09ICdUSVRMRScgdGhlbiBzZXR0aW5ncy5USVRMRSA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ0dBTUVTJyB0aGVuIHNldHRpbmdzLkdBTUVTID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnUk9VTkRTJyB0aGVuIHNldHRpbmdzLlJPVU5EUyA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ1NPUlQnIHRoZW4gc2V0dGluZ3MuU09SVCA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ09ORScgdGhlbiBzZXR0aW5ncy5PTkUgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdCQUxBTkNFJyB0aGVuIHNldHRpbmdzLkJBTEFOQ0UgPSB2YWxcclxuXHRcdFx0aWYga2V5WzBdID09ICdyJ1xyXG5cdFx0XHRcdG4gPSBwbGF5ZXJzLmxlbmd0aCAvLyAyXHJcblx0XHRcdFx0aWYgcm91bmRzID09IG51bGwgdGhlbiByb3VuZHMgPSBuZXcgQXJyYXkoc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFMpLmZpbGwgXCJ4XCIucmVwZWF0IG5cclxuXHRcdFx0XHRyb3VuZHNba2V5LnNsaWNlKDEpIC0gMV0gPSB2YWxcclxuXHRcdGVsc2VcclxuXHRcdFx0cGxheWVycy5wdXNoIGxpbmVcclxuXHJcblx0ZWNobyByb3VuZHNcclxuXHRlY2hvIHdpbmRvdy5sb2NhdGlvbi5ocmVmXHJcblxyXG5cdGlmIHJvdW5kcyA9PSBudWxsIHRoZW4gcm91bmRzID0gW11cclxuXHJcblx0dXJsID0gXCIuL1wiXHJcblxyXG5cdHVybCArPSBcIj9USVRMRT0je3NldHRpbmdzLlRJVExFfVwiXHJcblx0dXJsICs9IFwiJkdBTUVTPSN7c2V0dGluZ3MuR0FNRVN9XCJcclxuXHR1cmwgKz0gXCImUk9VTkRTPSN7c2V0dGluZ3MuUk9VTkRTfVwiXHJcblx0dXJsICs9IFwiJlNPUlQ9I3tzZXR0aW5ncy5TT1JUfVwiXHJcblx0dXJsICs9IFwiJk9ORT0je3NldHRpbmdzLk9ORX1cIlxyXG5cdHVybCArPSBcIiZCQUxBTkNFPSN7c2V0dGluZ3MuQkFMQU5DRX1cIlxyXG5cclxuXHRmb3IgcGxheWVyIGluIHBsYXllcnNcclxuXHRcdHVybCArPSBcIiZwPSN7cGxheWVyfVwiXHJcblxyXG5cdGZvciByIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdGlmICcnID09IHJvdW5kc1tyXS5yZXBsYWNlQWxsICd4JywnJyB0aGVuIGNvbnRpbnVlXHJcblx0XHR1cmwgKz0gXCImciN7cisxfT0je3JvdW5kc1tyXX1cIlxyXG5cclxuXHR1cmwgPSB1cmwucmVwbGFjZUFsbCAnICcsICcrJ1xyXG5cclxuXHRlY2hvIHVybFxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHJvdW5kcyA9IFtdXHJcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmxcclxuXHJcbnNhdmVQYWlyaW5nID0gKHIsIEEsIGhhbGYsIG4pIC0+XHJcblx0bHN0ID0gaWYgciAlIDIgPT0gMSB0aGVuIFtbQVtuIC0gMV0sIEFbMF1dXSBlbHNlIFtbQVswXSwgQVtuIC0gMV1dXVxyXG5cdGZvciBpIGluIFsxLi4uaGFsZl1cclxuXHRcdGxzdC5wdXNoIFtBW2ldLCBBW24gLSAxIC0gaV1dXHJcblx0aWYgZnJpcm9uZCB0aGVuIGxzdC5wdXNoIGxzdC5zaGlmdCgpXHJcblx0bHN0LnNvcnQoKVxyXG5cclxubWFrZUJlcmdlciA9IC0+XHJcblx0ZWNobyAnQkVSR0VSJ1xyXG5cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBuICUgMiA9PSAxIHRoZW4gbiArPSAxXHJcblx0aGFsZiA9IG4gLy8gMiBcclxuXHRBID0gWzAuLi5uXVxyXG5cdHJvdW5kcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyb3VuZHMucHVzaCBzYXZlUGFpcmluZyBpLCBBLCBoYWxmLCBuXHJcblx0XHRBLnBvcCgpXHJcblx0XHRBID0gQS5zbGljZShoYWxmKS5jb25jYXQgQS5zbGljZSgwLGhhbGYpXHJcblx0XHRBLnB1c2ggbi0xXHJcblx0ZWNobyAnQkVSR0VSJyxyb3VuZHNcclxuXHRyb3VuZHNcclxuXHJcbnNob3dNYXRyaXggPSAoZmxvYXRpbmcpIC0+XHJcblx0aWYgcGxheWVycy5sZW5ndGggPiAyMCB0aGVuIHJldHVybiBcclxuXHRlY2hvIFwiXCIgXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcGxheWVycy5sZW5ndGhcclxuXHRcdGxpbmUgPSBmbG9hdGluZy5tYXRyaXhbaV1cclxuXHRcdGVjaG8gKGkgKyBzZXR0aW5ncy5PTkUpICUgMTAgKyAnICAgJyArIGxpbmUuam9pbignICAgJykgKyAnICAnICsgcGxheWVyc1tpXS5lbG9cclxuXHRlY2hvICdTdW1tYScsIGZsb2F0aW5nLnN1bW1hXHJcblx0ZWNobyAnRmxvYXRpbmcnLCBmbG9hdGluZy5yb3VuZHNcclxuXHJcbm1ha2VGbG9hdGluZyA9IC0+XHJcblx0ZmxvYXRpbmcgPSBuZXcgRmxvYXRpbmcgcGxheWVycywgc2V0dGluZ3NcclxuXHRzaG93TWF0cml4IGZsb2F0aW5nXHJcblx0ZmxvYXRpbmcucm91bmRzXHJcblxyXG5zaG93SW5mbyA9IC0+XHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKS5pbm5lckhUTUwgPSBkaXYge30sXHJcblx0XHRkaXYge2NsYXNzOlwiaGVscFwifSwgcHJlIHt9LCBoZWxwVGV4dFxyXG5cclxucm91bmRzQ29udGVudCA9IChsb25nLCBpKSAtPiAjIHJvbmRlcm5hcyBkYXRhICsgcG/DpG5nICsgUFIuIGkgYW5nZXIgc3BlbGFybnVtbWVyXHJcblxyXG5cdCMgZWNobyB7bG9uZ31cclxuXHRyb25kZXIgPSBbXVxyXG5cdG9wcEVsb3MgPSBbXVxyXG5cclxuXHRmb3IgW3csYixjb2xvcixyZXN1bHRdIGluIGxvbmdcclxuXHRcdG9wcG9uZW50ID0gc2V0dGluZ3MuT05FICsgaWYgdyA9PSBpIHRoZW4gYiBlbHNlIHdcclxuXHRcdCMgZWNobyB7dyxiLGNvbG9yLHJlc3VsdCxvcHBvbmVudCxmcmlyb25kfVxyXG5cdFx0aWYgZnJpcm9uZCBhbmQgb3Bwb25lbnQgPT0gZnJpcm9uZCArIHNldHRpbmdzLk9ORSB0aGVuIG9wcG9uZW50ID0gJ0YnXHJcblx0XHRyZXN1bHQgPSBjb252ZXJ0IHJlc3VsdCwgJ3gxMHJGRycsICcgMTDCvTExJ1xyXG5cclxuXHRcdGF0dHIgPSBpZiBjb2xvciA9PSAndycgdGhlbiBcInJpZ2h0OjBweDtcIiBlbHNlIFwibGVmdDowcHg7XCJcclxuXHRcdGNlbGwgPSB0ZCB7c3R5bGU6IFwicG9zaXRpb246cmVsYXRpdmU7XCJ9LFxyXG5cdFx0XHRkaXYge3N0eWxlOiBcInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MHB4OyAgZm9udC1zaXplOjAuN2VtO1wiICsgYXR0cn0sIG9wcG9uZW50XHJcblx0XHRcdGRpdiB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDoxMnB4OyBmb250LXNpemU6MS4xZW07IHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMCUsIC0xMCUpXCJ9LCByZXN1bHRcclxuXHJcblx0XHRyb25kZXIucHVzaCBjZWxsXHJcblxyXG5cdHJvbmRlci5wdXNoXHR0ZCBhbGlnblJpZ2h0LCBcIlwiXHJcblx0cm9uZGVyLnB1c2ggdGQge30sIFwiXCJcclxuXHRyb25kZXIuam9pbiBcIlwiXHJcblxyXG5zaG93UGxheWVycyA9IChsb25ncykgLT4gIyBsb25ncyBsYWdyYWQgc29tIGxpc3RhIGF2IHNwZWxhcmVcclxuXHJcblx0cm93cyA9IFtdXHJcblxyXG5cdGZvciBsb25nLCBpIGluIGxvbmdzXHJcblx0XHRwbGF5ZXIgPSBwbGF5ZXJzW2ldXHJcblx0XHRpZiBwbGF5ZXIubmFtZSA9PSAnRlJJUk9ORCcgdGhlbiBjb250aW51ZVxyXG5cdFx0cm93cy5wdXNoIHRyIHt9LFxyXG5cdFx0XHR0ZCB7fSwgaSArIHNldHRpbmdzLk9ORVxyXG5cdFx0XHR0ZCBhbGlnbkxlZnQsIHBsYXllci5uYW1lXHJcblx0XHRcdHRkIHt9LCBwbGF5ZXIuZWxvXHJcblx0XHRcdHJvdW5kc0NvbnRlbnQgbG9uZywgaVxyXG5cclxuXHRyZXN1bHQgPSBkaXYge30sXHJcblx0XHRoMiB7fSwgc2V0dGluZ3MuVElUTEVcclxuXHRcdHRhYmxlIHt9LFxyXG5cdFx0XHR0aGVhZCB7fSxcclxuXHRcdFx0XHR0aCB7fSwgXCIjXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJOYW1uXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJFbG9cIlxyXG5cdFx0XHRcdCh0aCB7fSwgXCIje2kgKyBzZXR0aW5ncy5PTkV9XCIgZm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aCkuam9pbiBcIlwiXHJcblx0XHRcdFx0dGgge30sIFwiUFwiXHJcblx0XHRcdFx0dGgge30sIFwiUFJcIlxyXG5cdFx0XHRyb3dzLmpvaW4gXCJcIlxyXG5cclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhbGxuaW5nJykuaW5uZXJIVE1MID0gcmVzdWx0XHJcblxyXG5zaG93VGFibGVzID0gKHNob3J0cywgc2VsZWN0ZWRSb3VuZCkgLT5cclxuXHRpZiByb3VuZHMubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHJcblx0cm93cyA9IFwiXCJcclxuXHRib3JkID0gMFxyXG5cdG1lc3NhZ2UgPSBcIlwiXHJcblxyXG5cdGZvciBzaG9ydCBpbiBzaG9ydHNbc2VsZWN0ZWRSb3VuZF1cclxuXHRcdFt3LCBiLCBjb2xvciwgcmVzXSA9IHNob3J0XHJcblx0XHRpZiBjb2xvciA9PSAnYicgdGhlbiBjb250aW51ZVxyXG5cclxuXHRcdHZpdCA9IHBsYXllcnNbd10ubmFtZVxyXG5cdFx0c3ZhcnQgPSBwbGF5ZXJzW2JdLm5hbWVcclxuXHJcblx0XHRpZiB2aXQgPT0gJ0ZSSVJPTkQnXHJcblx0XHRcdG1lc3NhZ2UgPSBcIiDigKIgI3tzdmFydH0gaGFyIGZyaXJvbmRcIlxyXG5cdFx0XHRjb250aW51ZVxyXG5cdFx0aWYgc3ZhcnQgPT0gJ0ZSSVJPTkQnXHJcblx0XHRcdG1lc3NhZ2UgPSBcIiDigKIgI3t2aXR9IGhhciBmcmlyb25kXCJcclxuXHRcdFx0Y29udGludWVcclxuXHRcdFx0aGFzaCA9IHtzdHlsZSA6IFwiYmFja2dyb3VuZC1jb2xvcjpyZWRcIn1cclxuI1x0XHRcdGhhc2ggPSB7c3R5bGUgOiBcImJhY2tncm91bmQtY29sb3I6I3tib3JkID09IGN1cnJUYWJsZSA/ICd5ZWxsb3cnIDogJ3doaXRlJ31cIiB9XHJcblx0XHRcdGVjaG8gaGFzaCBcclxuXHRcdHJvd3MgKz0gdHIgaGFzaCxcclxuXHRcdFx0dGQge30sIGJvcmQgKyBzZXR0aW5ncy5PTkVcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCB2aXRcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCBzdmFydFxyXG5cdFx0XHR0ZCBhbGlnbkNlbnRlciwgcHJldHR5UmVzdWx0IHJlcyAjIHByZXR0aWZ5XHJcblx0XHRib3JkKytcclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0aDIge30sIFwiQm9yZHNsaXN0YSBmw7ZyIHJvbmQgI3tzZWxlY3RlZFJvdW5kICsgc2V0dGluZ3MuT05FfVwiXHJcblx0XHR0YWJsZSB7fSxcclxuXHRcdFx0dGhlYWQge30sXHJcblx0XHRcdFx0dGgge30sIFwiQm9yZFwiXHJcblx0XHRcdFx0dGgge30sIFwiVml0XCJcclxuXHRcdFx0XHR0aCB7fSwgXCJTdmFydFwiXHJcblx0XHRcdFx0dGgge30sIFwiUmVzdWx0YXRcIiBcclxuXHRcdFx0cm93c1xyXG5cclxuXHRyZXN1bHQgKz0gXCI8YnI+RyN7c2V0dGluZ3MuR0FNRVN9IOKAoiBSI3tzZXR0aW5ncy5ST1VORFN9IOKAoiBTI3tzZXR0aW5ncy5TT1JUfSDigKIgQiN7c2V0dGluZ3MuQkFMQU5DRX0g4oCiICN7aWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuICdCZXJnZXInIGVsc2UgJ0Zsb2F0aW5nJ30gI3ttZXNzYWdlfVwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZXMnKS5pbm5lckhUTUwgPSByZXN1bHRcclxuXHJcbnJlYWRSZXN1bHRzID0gKHBhcmFtcykgLT5cclxuXHRyZXN1bHRzID0gW11cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBmcmlyb25kIHRoZW4gbiAtPSAyXHJcblx0biAvLz0gMlxyXG5cdFxyXG5cdGZvciByIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHRzLnB1c2ggc2FmZUdldCBwYXJhbXMsIFwiciN7cisxfVwiLCBcInhcIi5yZXBlYXQgblxyXG5cdGVjaG8gJ3JlYWRSZXN1bHRzJywgcmVzdWx0c1xyXG5cclxucHJvZ3Jlc3MgPSAocG9pbnRzKSAtPlxyXG5cdGFudGFsID0gMFxyXG5cdGZvciBwb2ludCBpbiBwb2ludHNcclxuXHRcdGFudGFsICs9IHBvaW50XHJcblx0aWYgZnJpcm9uZCBcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogKHBsYXllcnMubGVuZ3RoIC0gMikgLy8gMn1cIlxyXG5cdGVsc2VcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogcGxheWVycy5sZW5ndGggLyAyfVwiXHJcblxyXG5jYWxjUG9pbnRzID0gLT4gIyBIw6RtdGEgY2VsbGVybmEgZnLDpW4gR1VJOnRcclxuXHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNzdGFsbG5pbmcgdGJvZHknXHJcblx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cclxuXHRQUyA9IFtdXHJcblx0UFJTID0gW11cclxuXHRwZXJmb3JtYW5jZXMgPSBbXSBcclxuXHJcblx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0cG9pbnRzID0gMFxyXG5cdFx0cG9pbnRzUFIgPSAwXHJcblx0XHRlbG9zID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRcdGNlbGwgPSByYWQuY2hpbGRyZW5bMytpXVxyXG5cdFx0XHRvcHAgPSBjZWxsLmNoaWxkcmVuWzBdLnRleHRDb250ZW50XHJcblx0XHRcdHZhbCA9IGNlbGwuY2hpbGRyZW5bMV0udGV4dENvbnRlbnRcclxuXHRcdFx0dmFsdWUgPSAwXHJcblx0XHRcdGlmIHZhbCA9PSAnwr0nIHRoZW4gdmFsdWUgPSAwLjVcclxuXHRcdFx0aWYgdmFsID09ICcxJyB0aGVuIHZhbHVlID0gMVxyXG5cdFx0XHRwb2ludHMgKz0gdmFsdWVcclxuXHJcblx0XHRcdCMgZWNobyB7b3BwfVxyXG5cdFx0XHRpZiB2YWwgaW4gJzDCvTEnIGFuZCBvcHAgIT0gJ0YnIGFuZCBwbGF5ZXJzW29wcC1zZXR0aW5ncy5PTkVdLmVsbyA+IDBcclxuXHRcdFx0XHRwb2ludHNQUiArPSB2YWx1ZVxyXG5cdFx0XHRcdGVsb3MucHVzaCBwbGF5ZXJzW29wcC1zZXR0aW5ncy5PTkVdLmVsb1xyXG5cclxuXHRcdFBTLnB1c2ggcG9pbnRzXHJcblx0XHRQUlMucHVzaCBwb2ludHNQUlxyXG5cdFx0cGVyZm9ybWFuY2VzLnB1c2ggcGVyZm9ybWFuY2UgcG9pbnRzUFIsIGVsb3NcclxuXHJcblx0ZGVjaW1hbHMgPSBmaW5kTnVtYmVyT2ZEZWNpbWFscyBwZXJmb3JtYW5jZXNcclxuXHRmb3IgaSBpbiByYW5nZSByYWRlci5sZW5ndGhcclxuXHRcdHJhZCA9IHJhZGVyW2ldXHJcblx0XHRyYWQuY2hpbGRyZW5bc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFMgKyAzXS50ZXh0Q29udGVudCA9IFBTW2ldLnRvRml4ZWQgMVxyXG5cdFx0cmFkLmNoaWxkcmVuW3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICsgNF0udGV4dENvbnRlbnQgPSBpZiBwZXJmb3JtYW5jZXNbaV0gPiAzOTk5IHRoZW4gXCJcIiBlbHNlIHBlcmZvcm1hbmNlc1tpXS50b0ZpeGVkIGRlY2ltYWxzXHJcblxyXG5cdFBSU1xyXG5cclxuY2hhbmdlUm91bmQgPSAoZGVsdGEpIC0+XHJcblx0Y3VyclJvdW5kID0gKGN1cnJSb3VuZCArIGRlbHRhKSAlJSByb3VuZHMubGVuZ3RoXHJcblx0dXBkYXRlTG9uZ3NBbmRTaG9ydHMoKVxyXG5cdHNob3dUYWJsZXMgc2hvcnRzLCBjdXJyUm91bmRcclxuXHJcbmNoYW5nZVRhYmxlID0gKGRlbHRhKSAtPlxyXG5cdGN1cnJUYWJsZSA9IChjdXJyVGFibGUgKyBkZWx0YSkgJSUgYW50YWxCb3JkKClcclxuXHJcbnVwZGF0ZUxvbmdzQW5kU2hvcnRzID0gLT5cclxuXHRsb25ncyA9IFtdICMgaW5uZWjDpWxsZXIgYWxsYSByb25kZXJuYVxyXG5cdGZvciByIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdGxvbmdzLnB1c2ggbG9uZ0Zvcm0gcm91bmRzW3JdLHJlc3VsdHNbcl1cclxuXHJcblx0c2hvcnRzID0gbG9uZ3MgIyBfLmNsb25lRGVlcFxyXG5cdGxvbmdzID0gXy56aXAgLi4ubG9uZ3MgIyB0cmFuc3BvbmVyYXIgbWF0cmlzZW5cclxuXHJcbm1haW4gPSAtPlxyXG5cclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0aWYgcGFyYW1zLnNpemUgPT0gMCBcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIgXCJjbGlja1wiLCBwYXJzZVRleHRhcmVhIFxyXG5cdFx0c2hvd0luZm8oKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dGFyZWFcIikuc3R5bGUgPSAnZGlzcGxheTogbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5zdHlsZSA9ICdkaXNwbGF5OiBub25lJ1xyXG5cclxuXHRwYXJzZVF1ZXJ5KClcclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPCA0XHJcblx0XHRzaG93SW5mbygpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0cm91bmRzID0gaWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuIG1ha2VCZXJnZXIoKSBlbHNlIG1ha2VGbG9hdGluZygpXHJcblx0aWYgc2V0dGluZ3MuR0FNRVMgPT0gMiB0aGVuIHJvdW5kcyA9IGV4cGFuZCByb3VuZHNcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHRzLnB1c2ggQXJyYXkoYW50YWxCb3JkKCkpLmZpbGwgJ3gnXHJcblxyXG5cdGVjaG8gJ3Jlc3VsdHMnLHJlc3VsdHNcclxuXHQjIHJlc3VsdHMgPSBbWyd4JywneCcsJ3gnLCd4J10sWyd4JywneCcsJ3gnLCd4J10sWyd4JywneCcsJ3gnLCd4J10sWyd4JywneCcsJ3gnLCd4J10sWyd4JywneCcsJ3gnLCd4J11dICMgdG9kb1xyXG4jXHRyZWFkUmVzdWx0cyBwYXJhbXNcclxuXHJcblx0ZWNobyAncmVzdWx0cycscmVzdWx0c1xyXG5cclxuXHR1cGRhdGVMb25nc0FuZFNob3J0cygpXHJcblx0XHJcblxyXG5cdGVjaG8ge2xvbmdzfVxyXG5cclxuXHRzaG93UGxheWVycyBsb25nc1xyXG5cdHNob3dUYWJsZXMgc2hvcnRzLCAwXHJcblxyXG5cdHNrYXBhU29ydGVyaW5nc2tsaWNrKClcclxuXHRzw6R0dE1hcmvDtnIgY3VyclJvdW5kLGN1cnJUYWJsZVxyXG5cclxuXHRQUlMgPSBjYWxjUG9pbnRzKClcclxuXHRkb2N1bWVudC50aXRsZSA9IHNldHRpbmdzLlRJVExFICsgcHJvZ3Jlc3MgUFJTXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXlkb3duJywgKGV2ZW50KSAtPlxyXG5cclxuXHRpZiBldmVudC5rZXkgaW4gJ2FiYycgXHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YWxsbmluZ1wiKS5zdHlsZS5kaXNwbGF5ID0gaWYgZXZlbnQua2V5IGluIFwiYWNcIiB0aGVuIFwidGFibGVcIiBlbHNlIFwibm9uZVwiXHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhYmxlc1wiKS5zdHlsZS5kaXNwbGF5ID0gaWYgZXZlbnQua2V5IGluIFwiYmNcIiB0aGVuIFwidGFibGVcIiBlbHNlIFwibm9uZVwiXHJcblx0XHJcblx0aWYgZXZlbnQua2V5ID09ICdBcnJvd0xlZnQnICB0aGVuIGNoYW5nZVJvdW5kIC0xXHJcblx0aWYgZXZlbnQua2V5ID09ICdBcnJvd1JpZ2h0JyB0aGVuIGNoYW5nZVJvdW5kICsxXHJcblx0aWYgZXZlbnQua2V5ID09ICdBcnJvd1VwJyAgICB0aGVuIGNoYW5nZVRhYmxlIC0xXHJcblx0aWYgZXZlbnQua2V5ID09ICdBcnJvd0Rvd24nICB0aGVuIGNoYW5nZVRhYmxlICsxXHJcblxyXG5cdGRlbCA9ICdEZWxldGUnXHJcblx0a2V5ID0gZXZlbnQua2V5XHJcblx0aWYga2V5ID09IGRlbCB0aGVuIHNldFJlc3VsdCBrZXksICd4JyAjIFwiICAtICBcIlxyXG5cdGlmIGtleSA9PSAnMCcgdGhlbiBzZXRSZXN1bHQga2V5LCAnMCcgIyBcIjAgLSAxXCJcclxuXHRpZiBrZXkgPT0gJyAnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzEnICMgXCLCvSAtIMK9XCJcclxuXHRpZiBrZXkgPT0gJzEnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzInICMgXCIxIC0gMFwiXHJcblxyXG5cdHPDpHR0TWFya8O2ciBjdXJyUm91bmQsY3VyclRhYmxlXHJcblxyXG5tYWluKClcclxuIl19
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee