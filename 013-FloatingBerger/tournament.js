// Generated by CoffeeScript 2.7.0
  // ½
var RESULTS, alignCenter, alignLeft, alignRight, ass, calcPoints, convert, convertLong, display, echo, expand, findNumberOfDecimals, frirond, longForm, longs, main, makeBerger, makeFairPair, other, parseQuery, parseTextarea, players, prettify, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, settings, shortForm, shorts, showInfo, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

settings = {
  TITLE: '',
  GAMES: 0,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1 // ONE = 1 # 0=dev 1=prod
};

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

display = 3; // both

frirond = null; // ingen frirond. Annars index för frironden

sorteringsOrdning = {}; // Spara per kolumn

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  echo('Assertion failed: (open the Assertion below to find the failing assertion)');
  echo('  expect', JSON.stringify(a));
  echo('  actual', JSON.stringify(b));
  return console.assert(false); // can be used to track the assert
};

ass(7, 3 + 4);

// The short Form is used to render the table list
// rounds: produced by makeBerger and makeFairPair
// results: produced by the human
shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, j, len, ref, results1;
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "F"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "x"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10rx"));

// listify = (s) -> ('0r1'.indexOf ch) for ch in s # omvandla "r01x1" till [1,0,2,-1,2] 
// ass [0,1,2,-1,2], listify '0r1x1'
convert = function(input, a, b) {
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

other = function(input) {
  return convert(input, "01FG", "1011");
};

ass('1', other('0'));

ass('r', other('r'));

ass('0', other('1'));

ass('1', other('F'));

ass('1', other('G'));

ass('x', other('x'));

longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  if (rounds.length > results.length) {
    results += 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  return result.sort(function(a, b) {
    return a[0] - b[0];
  });
};

ass([[0, 11, 'w', 'F'], [1, 10, 'w', '0'], [2, 9, 'w', 'r'], [3, 8, 'w', '1'], [4, 7, 'w', '0'], [5, 6, 'w', 'r'], [6, 5, 'b', 'r'], [7, 4, 'b', '1'], [8, 3, 'b', '0'], [9, 2, 'b', 'r'], [10, 1, 'b', '1'], [11, 0, 'b', '1']], longForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

// ass [[1,10,"0"], [2,9,"r"], [3,8,"1"], [4,7,"0"], [5,6,"r"], [0,11,"x"]], longForm [[1,10], [2,9], [3,8], [4,7], [5,6], [0,11]], "0r10rx"
prettify = function(ch) {
  if (ch === void 0) {
    return " - ";
  } else {
    return convertLong(ch, "xF0r1", "-|-|0 - 1|½ - ½|1 - 0");
  }
};

ass("0 - 1", prettify('0'));

ass("½ - ½", prettify('r'));

ass("1 - 0", prettify('1'));

ass("-", prettify('x'));

expand = function(rounds) { // make a double round from a single
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

ass([[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]], expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]));

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

ass(0, findNumberOfDecimals([1200, 1200]));

ass(0, findNumberOfDecimals([1200, 1201]));

ass(0, findNumberOfDecimals([1200.23, 1200.23]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(3, findNumberOfDecimals([1200.23, 1200.2345]));

ass(0, findNumberOfDecimals([1200.12345, 1200.12345]));

skapaSorteringsklick = function() {
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var k, key, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseFloat(cellA);
          numB = parseFloat(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (k = 0, len1 = rader.length; k < len1; k++) {
          rad = rader[k];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var elo, i, j, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  i = 0;
  echo("");
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(i, elo, name);
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  return echo(settings);
};

parseTextarea = function() {
  var j, k, key, l, len, len1, len2, line, lines, n, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo('textarea', raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key[0] === 'r') {
        n = Math.floor(players.length / 2);
        if (rounds === null) {
          rounds = new Array(settings.GAMES * settings.ROUNDS).fill("x".repeat(n));
        }
        rounds[key.slice(1) - 1] = val;
      }
    } else {
      players.push(line);
    }
  }
  echo(rounds);
  echo(window.location.href);
  if (rounds === null) {
    rounds = [];
  }
  if (window.location.href.includes("github")) {
    url = "https://christernilsson.github.io/2025/013-FloatingBerger/";
  } else {
    url = '/';
  }
  url += `?TITLE=${settings.TITLE}`;
  if (settings.GAMES) {
    url += `&GAMES=${settings.GAMES}`;
  }
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  for (k = 0, len1 = players.length; k < len1; k++) {
    player = players[k];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    r = ref[l];
    if (rounds[r] === 'xxxxx') {
      continue;
    }
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  players = [];
  rounds = [];
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort(); //###
};

makeBerger = function() {
  var A, half, i, j, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, j, len, line, ref;
  fairpair = new FairPair(players, settings.ROUNDS, settings.GAMES);
  if (players.length <= 20) {
    echo("");
    ref = range(players.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      line = fairpair.matrix[i];
      echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
    }
    echo('summa', fairpair.summa);
    echo('FAIRPAIR', fairpair.rounds);
  }
  return fairpair.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    if (frirond && opponent === frirond + settings.ONE) {
      opponent = 'F';
    }
    result = convert(result, 'x10rFG', ' 10½11');
    if (color === 'w') {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

showPlayers = function(longs) { // longs lagrad som lista av spelare
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(alignLeft, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) {
  var b, bord, color, j, len, message, ref, res, result, rows, short, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (color === 'b') {
      continue;
    }
    vit = players[w].name;
    svart = players[b].name;
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
    }
    rows += tr({}, td({}, bord + settings.ONE), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(res)));
    bord++;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + settings.ONE}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${settings.GAMES} • R${settings.ROUNDS} • ${settings.ROUNDS === players.length - 1 ? 'Berger' : 'FairPair'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var j, len, n, r, ref;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    results.push(safeGet(params, `r${r + 1}`, "x".repeat(n)));
  }
  return echo('readResults', results);
};

progress = function(points) {
  var antal, j, len, point;
  antal = 0;
  for (j = 0, len = points.length; j < len; j++) {
    point = points[j];
    antal += point;
  }
  if (frirond) {
    return ` • ${antal} av ${Math.floor(settings.GAMES * settings.ROUNDS * (players.length - 2) / 2)}`;
  } else {
    return ` • ${antal} av ${settings.GAMES * settings.ROUNDS * players.length / 2}`;
  }
};

calcPoints = function() { // Hämta cellerna från GUI:t
  var PRS, PS, cell, decimals, elos, i, j, k, l, len, len1, len2, opp, performances, points, pointsPR, rad, rader, ref, ref1, tbody, val, value;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  PS = [];
  PRS = [];
  performances = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    points = 0;
    pointsPR = 0;
    elos = [];
    ref = range(settings.GAMES * settings.ROUNDS);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      cell = rad.children[3 + i];
      opp = cell.children[0].textContent;
      val = cell.children[1].textContent;
      value = 0;
      if (val === '½') {
        value = 0.5;
      }
      if (val === '1') {
        value = 1;
      }
      points += value;
      if (indexOf.call('0½1', val) >= 0 && opp !== 'F' && players[opp - 1].elo > 0) {
        pointsPR += value;
        elos.push(players[opp - 1].elo);
      }
    }
    PS.push(points);
    PRS.push(pointsPR);
    performances.push(performance(pointsPR, elos));
  }
  decimals = findNumberOfDecimals(performances);
  ref1 = range(rader.length);
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    rad = rader[i];
    rad.children[settings.GAMES * settings.ROUNDS + 3].textContent = PS[i].toFixed(1);
    rad.children[settings.GAMES * settings.ROUNDS + 4].textContent = performances[i] > 3999 ? "" : performances[i].toFixed(decimals);
  }
  return PRS;
};

main = function() {
  var PRS, j, len, params, r, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  rounds = settings.ROUNDS === players.length - 1 ? makeBerger() : makeFairPair();
  if (settings.GAMES === 2) {
    rounds = expand(rounds);
  }
  readResults(params);
  longs = []; // innehåller alla ronderna
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    longs.push(longForm(rounds[r], results[r]));
  }
  shorts = longs; // _.cloneDeep
  longs = _.zip(...longs); // transponerar matrisen
  showPlayers(longs);
  showTables(shorts, 0);
  skapaSorteringsklick();
  PRS = calcPoints();
  return document.title = settings.TITLE + progress(PRS);
};

document.addEventListener('keyup', function(event) {
  var ref, ref1, ref2;
  if (ref = event.key, indexOf.call('123', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("13", ref1) >= 0) ? "table" : "none";
    return document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("23", ref2) >= 0) ? "table" : "none";
  }
});

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee