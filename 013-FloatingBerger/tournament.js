// Generated by CoffeeScript 2.7.0
  // ½
var ONE, RESULTS, alignCenter, alignLeft, alignRight, ass, calcPoints, convert, convertLong, display, echo, expand, findNumberOfDecimals, frirond, longForm, longs, main, makeBerger, makeFairPair, other, parseQuery, parseTextarea, players, prettify, progress, range, readResults, results, rounds, roundsContent, safeGet, savePairing, settings, shortForm, shorts, showInfo, showPlayers, showTables, skapaSorteringsklick, sorteringsOrdning,
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

settings = {
  TITLE: '',
  GAMES: 0,
  ROUNDS: 0,
  SORT: 1
};

ONE = 0; // 0=dev 1=prod

RESULTS = [];

alignLeft = {
  style: "text-align:left"
};

alignCenter = {
  style: "text-align:center"
};

alignRight = {
  style: "text-align:right"
};

players = [];

rounds = []; // vem möter vem? [w,b]. T ex [0,9], [1,8] ...]

results = []; // [[0,1,2,-1,2], [1,2,-1,0,2]] Vitspelarnas resultat i varje rond. -1 <=> x dvs ej spelad

display = 3; // both

frirond = null; // ingen frirond. Annars index för frironden

sorteringsOrdning = {}; // Spara per kolumn

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    return;
  }
  echo('Assertion failed: (open the Assertion below to find the failing assertion)');
  echo('  expect', JSON.stringify(a));
  echo('  actual', JSON.stringify(b));
  return console.assert(false); // can be used to track the assert
};

ass(7, 3 + 4);

// The short Form is used to render the table list
// rounds: produced by makeBerger and makeFairPair
// results: produced by the human
shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, j, len, ref, results1;
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "F"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

ass([[1, 10, "0"], [2, 9, "r"], [3, 8, "1"], [4, 7, "0"], [5, 6, "r"], [0, 11, "x"]], shortForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10rx"));

// listify = (s) -> ('0r1'.indexOf ch) for ch in s # omvandla "r01x1" till [1,0,2,-1,2] 
// ass [0,1,2,-1,2], listify '0r1x1'
convert = function(input, a, b) {
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

other = function(input) {
  return convert(input, "01FG", "1011");
};

ass('1', other('0'));

ass('r', other('r'));

ass('0', other('1'));

ass('1', other('F'));

ass('1', other('G'));

ass('x', other('x'));

longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  if (rounds.length > results.length) {
    results += 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  return result.sort(function(a, b) {
    return a[0] - b[0];
  });
};

ass([[0, 11, 'w', 'F'], [1, 10, 'w', '0'], [2, 9, 'w', 'r'], [3, 8, 'w', '1'], [4, 7, 'w', '0'], [5, 6, 'w', 'r'], [6, 5, 'b', 'r'], [7, 4, 'b', '1'], [8, 3, 'b', '0'], [9, 2, 'b', 'r'], [10, 1, 'b', '1'], [11, 0, 'b', '1']], longForm([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [0, 11]], "0r10r"));

// ass [[1,10,"0"], [2,9,"r"], [3,8,"1"], [4,7,"0"], [5,6,"r"], [0,11,"x"]], longForm [[1,10], [2,9], [3,8], [4,7], [5,6], [0,11]], "0r10rx"
prettify = function(ch) {
  if (ch === void 0) {
    return " - ";
  } else {
    return convertLong(ch, "xF0r1", "-|-|0 - 1|½ - ½|1 - 0");
  }
};

ass("0 - 1", prettify('0'));

ass("½ - ½", prettify('r'));

ass("1 - 0", prettify('1'));

ass("-", prettify('x'));

expand = function(rounds) { // make a double round from a single
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

ass([[[1, 2], [3, 4]], [[2, 1], [4, 3]], [[1, 4], [2, 3]], [[4, 1], [3, 2]]], expand([[[1, 2], [3, 4]], [[1, 4], [2, 3]]]));

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

ass(0, findNumberOfDecimals([1200, 1200]));

ass(0, findNumberOfDecimals([1200, 1201]));

ass(0, findNumberOfDecimals([1200.23, 1200.23]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(1, findNumberOfDecimals([1200.23, 1200.3]));

ass(3, findNumberOfDecimals([1200.23, 1200.2345]));

ass(0, findNumberOfDecimals([1200.12345, 1200.12345]));

skapaSorteringsklick = function() {
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  //echo ths
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index += 1;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var k, key, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - 1;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseFloat(cellA);
          numB = parseFloat(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (k = 0, len1 = rader.length; k < len1; k++) {
          rad = rader[k];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

safeGet = function(params, key, standard = "") {
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

parseQuery = function() {
  var elo, i, j, len, name, params, person, persons;
  echo(window.location.search);
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  RESULTS = [
    0,
    1,
    2 // internt bruk
  ];
  players = [];
  persons = params.getAll("p");
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  i = 0;
  echo("");
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    echo(i, elo, name);
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  return echo(settings);
};

parseTextarea = function() {
  var j, k, key, l, len, len1, len2, line, lines, n, player, r, raw, ref, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo('textarea', raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line === "") {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key[0] === 'r') {
        n = Math.floor(players.length / 2);
        if (rounds === null) {
          rounds = new Array(settings.GAMES * settings.ROUNDS).fill("x".repeat(n));
        }
        rounds[key.slice(1) - 1] = val;
      }
    } else {
      players.push(line);
    }
  }
  echo(rounds);
  echo(window.location.href);
  if (rounds === null) {
    rounds = [];
  }
  if (window.location.href.includes("github")) {
    url = "https://christernilsson.github.io/2025/013-FloatingBerger/";
  } else {
    url = '/';
  }
  url += `?TITLE=${settings.TITLE}`;
  if (settings.GAMES) {
    url += `&GAMES=${settings.GAMES}`;
  }
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  for (k = 0, len1 = players.length; k < len1; k++) {
    player = players[k];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    r = ref[l];
    if (rounds[r] === 'xxxxx') {
      continue;
    }
    url += `&r${r + 1}=${rounds[r]}`;
  }
  url = url.replaceAll(' ', '+');
  echo(url);
  players = [];
  rounds = [];
  return window.location.href = url;
};

savePairing = function(r, A, half, n) {
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort(); //###
};

makeBerger = function() {
  var A, half, i, j, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

makeFairPair = function() {
  var fairpair, i, j, len, line, ref;
  fairpair = new FairPair(players, settings.ROUNDS, settings.GAMES);
  if (players.length <= 20) {
    echo("");
    ref = range(players.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      line = fairpair.matrix[i];
      echo(i % 10 + '   ' + line.join('   ') + '  ' + players[i].elo);
    }
    echo('summa', fairpair.summa);
    echo('FAIRPAIR', fairpair.rounds);
  }
  return fairpair.rounds;
};

showInfo = function() {
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = 1 + (w === i ? b : w);
    if (frirond && opponent === frirond + 1) {
      opponent = 'F';
    }
    result = convert(result, 'x10rFG', ' 10½11');
    if (color === 'w') {
      attr = "right:0px;";
    } else {
      attr = "left:0px;";
    }
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(alignRight, "")); //(points[i]/2).toFixed 1
  ronder.push(td({}, "")); // performance pointsPR/2, oppElos
  return ronder.join("");
};

showPlayers = function(longs) { // longs lagrad som lista av spelare
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + 1), td(alignLeft, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + 1}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) {
  var b, bord, color, j, len, message, ref, res, result, rows, short, svart, vit, w;
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (color === 'b') {
      continue;
    }
    vit = players[w].name; // or ""
    svart = players[b].name; // or ""
    // echo w,b,res,vit,svart, prettify res
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
    }
    rows += tr({}, td({}, bord + 1), td(alignLeft, vit), td(alignLeft, svart), td(alignCenter, prettify(res)));
    bord += 1;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + 1}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${settings.GAMES} • R${settings.ROUNDS} • ${settings.ROUNDS === players.length - 1 ? 'Berger' : 'FairPair'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

readResults = function(params) {
  var j, len, n, r, ref;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    results.push(safeGet(params, `r${r + 1}`, "x".repeat(n)));
  }
  return echo('readResults', results);
};

progress = function(points) {
  var antal, j, len, point;
  antal = 0;
  for (j = 0, len = points.length; j < len; j++) {
    point = points[j];
    antal += point;
  }
  if (frirond) {
    return ` • ${antal} av ${Math.floor(settings.GAMES * settings.ROUNDS * (players.length - 2) / 2)}`;
  } else {
    return ` • ${antal} av ${settings.GAMES * settings.ROUNDS * players.length / 2}`;
  }
};

calcPoints = function() { // Hämta cellerna från GUI:t
  var PRS, PS, cell, decimals, elos, i, j, k, l, len, len1, len2, opp, performances, points, pointsPR, rad, rader, ref, ref1, tbody, val, value;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  PS = [];
  PRS = [];
  performances = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    points = 0;
    pointsPR = 0;
    elos = [];
    ref = range(settings.GAMES * settings.ROUNDS);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      cell = rad.children[3 + i];
      opp = cell.children[0].textContent;
      val = cell.children[1].textContent;
      value = 0;
      if (val === '½') {
        value = 0.5;
      }
      if (val === '1') {
        value = 1;
      }
      points += value;
      if (indexOf.call('0½1', val) >= 0 && opp !== 'F' && players[opp - 1].elo > 0) {
        pointsPR += value;
        elos.push(players[opp - 1].elo);
      }
    }
    PS.push(points);
    PRS.push(pointsPR);
    performances.push(performance(pointsPR, elos));
  }
  decimals = findNumberOfDecimals(performances);
  ref1 = range(rader.length);
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    rad = rader[i];
    rad.children[settings.GAMES * settings.ROUNDS + 3].textContent = PS[i].toFixed(1);
    rad.children[settings.GAMES * settings.ROUNDS + 4].textContent = performances[i] > 3999 ? "" : performances[i].toFixed(decimals);
  }
  return PRS;
};

main = function() {
  var PRS, j, len, params, r, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseQuery();
  if (players.length < 4) {
    showInfo();
    return;
  }
  rounds = settings.ROUNDS === players.length - 1 ? makeBerger() : makeFairPair();
  if (settings.GAMES === 2) {
    rounds = expand(rounds);
  }
  readResults(params);
  longs = []; // innehåller alla ronderna
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    longs.push(longForm(rounds[r], results[r]));
  }
  shorts = longs; // _.cloneDeep
  longs = _.zip(...longs); // transponerar matrisen
  showPlayers(longs);
  showTables(shorts, 0);
  skapaSorteringsklick();
  PRS = calcPoints();
  return document.title = settings.TITLE + progress(PRS);
};

document.addEventListener('keyup', function(event) {
  var ref, ref1, ref2;
  if (ref = event.key, indexOf.call('123', ref) >= 0) {
    document.getElementById("stallning").style.display = (ref1 = event.key, indexOf.call("13", ref1) >= 0) ? "table" : "none";
    return document.getElementById("tables").style.display = (ref2 = event.key, indexOf.call("23", ref2) >= 0) ? "table" : "none";
  }
});

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFHO0FBQUEsSUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxvQkFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxvQkFBQSxFQUFBLGlCQUFBO0VBQUE7O0FBRUgsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFdBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxLQUFSO0VBQWMsS0FBZDtFQUFvQixFQUFwQjtFQUF1QixFQUF2QjtFQUEwQixFQUExQjtFQUE2QixDQUE3QjtFQUErQixHQUEvQjtFQUFtQyxHQUFuQztFQUF1QyxDQUF2QztFQUF5QyxFQUF6QztDQUFBLE1BQUE7O0FBRUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUVWLFFBQUEsR0FBVztFQUFDLEtBQUEsRUFBTSxFQUFQO0VBQVcsS0FBQSxFQUFNLENBQWpCO0VB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QUYsQ0FBTSxHQUFHLEtBQVQsRUExQlQ7RUE0QkMsV0FBQSxDQUFZLEtBQVo7RUFDQSxVQUFBLENBQVcsTUFBWCxFQUFtQixDQUFuQjtFQUVBLG9CQUFBLENBQUE7RUFFQSxHQUFBLEdBQU0sVUFBQSxDQUFBO1NBQ04sUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBQSxDQUFTLEdBQVQ7QUFwQzVCOztBQXNDUCxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsUUFBQSxDQUFDLEtBQUQsQ0FBQTtBQUVuQyxNQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7RUFBQyxVQUFHLEtBQUssQ0FBQyxrQkFBTyxPQUFiLFNBQUg7SUFDQyxRQUFRLENBQUMsY0FBVCxDQUF3QixXQUF4QixDQUFvQyxDQUFDLEtBQUssQ0FBQyxPQUEzQyxXQUF3RCxLQUFLLENBQUMsa0JBQU8sTUFBYixXQUFILEdBQTBCLE9BQTFCLEdBQXVDO1dBQzVGLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWlDLENBQUMsS0FBSyxDQUFDLE9BQXhDLFdBQXFELEtBQUssQ0FBQyxrQkFBTyxNQUFiLFdBQUgsR0FBMEIsT0FBMUIsR0FBdUMsT0FGMUY7O0FBRmtDLENBQW5DOztBQU1BLElBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMgwr1cclxuXHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuL3BsYXllci5qcydcclxuaW1wb3J0IHtGYWlyUGFpcn0gZnJvbSAnLi9mYWlycGFpci5qcydcclxuaW1wb3J0IHtoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcbmltcG9ydCB7dGFibGUsdGhlYWQsdGgsdHIsdGQsYSxkaXYscHJlLHAsaDJ9IGZyb20gJy4vaHRtbC5qcydcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbnNldHRpbmdzID0ge1RJVExFOicnLCBHQU1FUzowLCBST1VORFM6MCwgU09SVDoxfVxyXG5cclxuT05FID0gMCAjIDA9ZGV2IDE9cHJvZFxyXG5cclxuUkVTVUxUUyA9IFtdXHJcblxyXG5hbGlnbkxlZnQgICA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOmxlZnRcIn1cclxuYWxpZ25DZW50ZXIgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpjZW50ZXJcIn1cclxuYWxpZ25SaWdodCAgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpyaWdodFwifVxyXG5cclxucGxheWVycyA9IFtdXHJcbnJvdW5kcyA9IFtdICMgdmVtIG3DtnRlciB2ZW0/IFt3LGJdLiBUIGV4IFswLDldLCBbMSw4XSAuLi5dXHJcbnJlc3VsdHMgPSBbXSAjIFtbMCwxLDIsLTEsMl0sIFsxLDIsLTEsMCwyXV0gVml0c3BlbGFybmFzIHJlc3VsdGF0IGkgdmFyamUgcm9uZC4gLTEgPD0+IHggZHZzIGVqIHNwZWxhZFxyXG5cclxuZGlzcGxheSA9IDMgIyBib3RoXHJcbmZyaXJvbmQgPSBudWxsICMgaW5nZW4gZnJpcm9uZC4gQW5uYXJzIGluZGV4IGbDtnIgZnJpcm9uZGVuXHJcblxyXG5zb3J0ZXJpbmdzT3JkbmluZyA9IHt9XHQjIFNwYXJhIHBlciBrb2x1bW5cclxuXHJcbmxvbmdzID0gW10gIyB1bmRlcmxhZyBmw7ZyIHNob3dQbGF5ZXJzXHJcbnNob3J0cyA9IFtdICMgdW5kZXJsYWcgZsO2ciBzaG93VGFibGVzXHJcblxyXG5hc3MgPSAoYSxiKSAtPlxyXG5cdGlmIF8uaXNFcXVhbCBhLCBiIHRoZW4gcmV0dXJuXHJcblx0ZWNobyAnQXNzZXJ0aW9uIGZhaWxlZDogKG9wZW4gdGhlIEFzc2VydGlvbiBiZWxvdyB0byBmaW5kIHRoZSBmYWlsaW5nIGFzc2VydGlvbiknXHJcblx0ZWNobyAnICBleHBlY3QnLCBKU09OLnN0cmluZ2lmeSBhIFxyXG5cdGVjaG8gJyAgYWN0dWFsJywgSlNPTi5zdHJpbmdpZnkgYlxyXG5cdGNvbnNvbGUuYXNzZXJ0IGZhbHNlICMgY2FuIGJlIHVzZWQgdG8gdHJhY2sgdGhlIGFzc2VydFxyXG5hc3MgNywgMyArIDRcclxuXHJcbiMgVGhlIHNob3J0IEZvcm0gaXMgdXNlZCB0byByZW5kZXIgdGhlIHRhYmxlIGxpc3RcclxuIyByb3VuZHM6IHByb2R1Y2VkIGJ5IG1ha2VCZXJnZXIgYW5kIG1ha2VGYWlyUGFpclxyXG4jIHJlc3VsdHM6IHByb2R1Y2VkIGJ5IHRoZSBodW1hblxyXG5zaG9ydEZvcm0gPSAocm91bmRzLCByZXN1bHRzKSAtPiAjIHByb2R1Y2VzIHRoZSBzaG9ydCBmb3JtIGZvciBPTkUgcm91bmQgKGJvcmRzbGlzdGFuKS4gSWYgdGhlcmUgaXMgYSBCWUUsIHB1dCBpdCBsYXN0IGluIHRoZSBsaXN0XHJcblx0aWYgcm91bmRzLmxlbmd0aCA+IHJlc3VsdHMubGVuZ3RoIHRoZW4gcmVzdWx0cyArPSAnRidcclxuXHRyb3VuZHNbaV0uY29uY2F0IHJlc3VsdHNbaV0gZm9yIGkgaW4gcmFuZ2UgcmVzdWx0cy5sZW5ndGhcclxuYXNzIFtbMSwxMCxcIjBcIl0sIFsyLDksXCJyXCJdLCBbMyw4LFwiMVwiXSwgWzQsNyxcIjBcIl0sIFs1LDYsXCJyXCJdLCBbMCwxMSxcIkZcIl1dLCBzaG9ydEZvcm0gW1sxLDEwXSwgWzIsOV0sIFszLDhdLCBbNCw3XSwgWzUsNl0sIFswLDExXV0sIFwiMHIxMHJcIlxyXG5hc3MgW1sxLDEwLFwiMFwiXSwgWzIsOSxcInJcIl0sIFszLDgsXCIxXCJdLCBbNCw3LFwiMFwiXSwgWzUsNixcInJcIl0sIFswLDExLFwieFwiXV0sIHNob3J0Rm9ybSBbWzEsMTBdLCBbMiw5XSwgWzMsOF0sIFs0LDddLCBbNSw2XSwgWzAsMTFdXSwgXCIwcjEwcnhcIlxyXG5cclxuIyBsaXN0aWZ5ID0gKHMpIC0+ICgnMHIxJy5pbmRleE9mIGNoKSBmb3IgY2ggaW4gcyAjIG9tdmFuZGxhIFwicjAxeDFcIiB0aWxsIFsxLDAsMiwtMSwyXSBcclxuIyBhc3MgWzAsMSwyLC0xLDJdLCBsaXN0aWZ5ICcwcjF4MSdcclxuXHJcbmNvbnZlcnQgPSAoaW5wdXQsYSxiKSAtPiBpZiBpbnB1dCBpbiBhIHRoZW4gYlthLmluZGV4T2YgaW5wdXRdIGVsc2UgaW5wdXQgIyBhIG9jaCBiIMOkciBzdHLDpG5nYXJcclxuXHJcbmNvbnZlcnRMb25nID0gKGlucHV0LGEsYikgLT4gIyBiIMOkciBzZXBhcmVyYWQgbWVkIHxcclxuXHRpID0gYS5pbmRleE9mIGlucHV0XHJcblx0YiA9IGIuc3BsaXQgJ3wnXHJcblx0aWYgaW5wdXQgaW4gYSB0aGVuIGJbaV0gZWxzZSBpbnB1dFxyXG5cclxub3RoZXIgPSAoaW5wdXQpIC0+IGNvbnZlcnQgaW5wdXQsIFwiMDFGR1wiLFwiMTAxMVwiXHJcbmFzcyAnMScsIG90aGVyICcwJ1xyXG5hc3MgJ3InLCBvdGhlciAncidcclxuYXNzICcwJywgb3RoZXIgJzEnXHJcbmFzcyAnMScsIG90aGVyICdGJ1xyXG5hc3MgJzEnLCBvdGhlciAnRydcclxuYXNzICd4Jywgb3RoZXIgJ3gnXHJcblxyXG5sb25nRm9ybSA9IChyb3VuZHMsIHJlc3VsdHMpIC0+ICMgcHJvZHVjZXMgdGhlIGxvbmcgZm9ybSBmb3IgT05FIHJvdW5kIChzcGVsYXJsaXN0YW4pLiBJZiB0aGVyZSBpcyBhIEJZRSwgcHV0IGl0IGxhc3QgaW4gdGhlIGxpc3RcclxuXHRpZiByb3VuZHMubGVuZ3RoID4gcmVzdWx0cy5sZW5ndGggdGhlbiByZXN1bHRzICs9ICdGJ1xyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0W3csYl0gPSByb3VuZHNbaV1cclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJlc3VsdC5wdXNoIFt3LGIsJ3cnLHJlc11cclxuXHRcdHJlc3VsdC5wdXNoIFtiLHcsJ2InLG90aGVyIHJlc11cclxuXHRyZXN1bHQuc29ydCAoYSxiKSAtPiBhWzBdIC0gYlswXVxyXG5hc3MgW1xyXG5cdFsgMCwxMSwndycsJ0YnXVxyXG5cdFsgMSwxMCwndycsJzAnXVxyXG5cdFsgMiwgOSwndycsJ3InXVxyXG5cdFsgMywgOCwndycsJzEnXVxyXG5cdFsgNCwgNywndycsJzAnXVxyXG5cdFsgNSwgNiwndycsJ3InXVxyXG5cdFsgNiwgNSwnYicsJ3InXVxyXG5cdFsgNywgNCwnYicsJzEnXVxyXG5cdFsgOCwgMywnYicsJzAnXVxyXG5cdFsgOSwgMiwnYicsJ3InXVxyXG5cdFsxMCwgMSwnYicsJzEnXVxyXG5cdFsxMSwgMCwnYicsJzEnXVxyXG5dLCBsb25nRm9ybSBbWzEsMTBdLCBbMiw5XSwgWzMsOF0sIFs0LDddLCBbNSw2XSwgWzAsMTFdXSwgXCIwcjEwclwiXHJcbiMgYXNzIFtbMSwxMCxcIjBcIl0sIFsyLDksXCJyXCJdLCBbMyw4LFwiMVwiXSwgWzQsNyxcIjBcIl0sIFs1LDYsXCJyXCJdLCBbMCwxMSxcInhcIl1dLCBsb25nRm9ybSBbWzEsMTBdLCBbMiw5XSwgWzMsOF0sIFs0LDddLCBbNSw2XSwgWzAsMTFdXSwgXCIwcjEwcnhcIlxyXG5cclxucHJldHRpZnkgPSAoY2gpIC0+IGlmIGNoID09IHVuZGVmaW5lZCB0aGVuIHJldHVybiBcIiAtIFwiIGVsc2UgY29udmVydExvbmcgY2gsIFwieEYwcjFcIixcIi18LXwwIC0gMXzCvSAtIMK9fDEgLSAwXCJcclxuYXNzIFwiMCAtIDFcIiwgcHJldHRpZnkgJzAnXHJcbmFzcyBcIsK9IC0gwr1cIiwgcHJldHRpZnkgJ3InXHJcbmFzcyBcIjEgLSAwXCIsIHByZXR0aWZ5ICcxJ1xyXG5hc3MgXCItXCIsIHByZXR0aWZ5ICd4J1xyXG5cclxuZXhwYW5kID0gKHJvdW5kcykgLT4gIyBtYWtlIGEgZG91YmxlIHJvdW5kIGZyb20gYSBzaW5nbGVcclxuXHRyZXN1bHQgPSBbXVxyXG5cdGZvciByb3VuZCBpbiByb3VuZHNcclxuXHRcdHJlc3VsdC5wdXNoIChbdyxiXSBmb3IgW3csYl0gaW4gcm91bmQpXHJcblx0XHRyZXN1bHQucHVzaCAoW2Isd10gZm9yIFt3LGJdIGluIHJvdW5kKVxyXG5cdHJlc3VsdFxyXG5hc3MgW1tbMSwyXSxbMyw0XV0sW1syLDFdLFs0LDNdXSxbWzEsNF0sWzIsM11dLFtbNCwxXSxbMywyXV1dLCBleHBhbmQgW1tbMSwyXSxbMyw0XV0sIFtbMSw0XSxbMiwzXV1dXHJcblxyXG5maW5kTnVtYmVyT2ZEZWNpbWFscyA9IChsc3QpIC0+XHJcblx0YmVzdCA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHR1bmlrID0gXy51bmlxIChpdGVtLnRvRml4ZWQoaSkgZm9yIGl0ZW0gaW4gbHN0KVxyXG5cdFx0aWYgdW5pay5sZW5ndGggPiBiZXN0IHRoZW4gW2Jlc3QsaWJlc3RdID0gW3VuaWsubGVuZ3RoLGldXHJcblx0aWJlc3RcclxuYXNzIDAsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLDEyMDBdXHJcbmFzcyAwLCBmaW5kTnVtYmVyT2ZEZWNpbWFscyBbMTIwMCwxMjAxXVxyXG5hc3MgMCwgZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMDAuMjMsMTIwMC4yM11cclxuYXNzIDEsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuM11cclxuYXNzIDEsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuM11cclxuYXNzIDMsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjIzLDEyMDAuMjM0NV1cclxuYXNzIDAsIGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjAwLjEyMzQ1LDEyMDAuMTIzNDVdXHJcblxyXG5za2FwYVNvcnRlcmluZ3NrbGljayA9IC0+XHJcblxyXG5cdHRocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdGgnXHJcblxyXG5cdCNlY2hvIHRoc1xyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgX3RoIGluIHRoc1xyXG5cdFx0aW5kZXggKz0gMVxyXG5cdFx0ZG8gKF90aCxpbmRleCkgLT5cclxuXHRcdFx0X3RoLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgKGV2ZW50KSAtPlxyXG5cdFx0XHRcdGtleSA9IF90aC50ZXh0Q29udGVudFxyXG5cdFx0XHRcdGlmICFpc05hTiBwYXJzZUludCBrZXlcclxuXHRcdFx0XHRcdGtleSA9IHBhcnNlSW50KGtleSkgLSAxIFxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcyBzaG9ydHMsIGtleVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciAnI3N0YWxsbmluZyB0Ym9keSdcclxuXHRcdFx0XHRyYWRlciA9IEFycmF5LmZyb20gdGJvZHkucXVlcnlTZWxlY3RvckFsbCAndHInXHJcblx0XHRcdFx0c3RpZ2FuZGUgPSBrZXkgaW4gXCIjIE5hbW5cIi5zcGxpdCAnICdcclxuXHJcblx0XHRcdFx0cmFkZXIuc29ydCAoYSwgYikgLT5cclxuXHRcdFx0XHRcdGNlbGxBID0gYS5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblx0XHRcdFx0XHRjZWxsQiA9IGIuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cclxuXHRcdFx0XHRcdCMgRsO2cnPDtmsgasOkbWbDtnJhIHNvbSB0YWwsIGFubmFycyBzb20gdGV4dFxyXG5cdFx0XHRcdFx0bnVtQSA9IHBhcnNlRmxvYXQgY2VsbEFcclxuXHRcdFx0XHRcdG51bUIgPSBwYXJzZUZsb2F0IGNlbGxCXHJcblx0XHRcdFx0XHRpZiAhaXNOYU4obnVtQSkgYW5kICFpc05hTihudW1CKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBudW1BIC0gbnVtQiBlbHNlIG51bUIgLSBudW1BXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIGNlbGxBLmxvY2FsZUNvbXBhcmUgY2VsbEIgZWxzZSBjZWxsQi5sb2NhbGVDb21wYXJlIGNlbGxBXHJcblxyXG5cdFx0XHRcdCMgTMOkZ2cgdGlsbGJha2EgcmFkZXJuYSBpIHNvcnRlcmFkIG9yZG5pbmdcclxuXHRcdFx0XHRmb3IgcmFkIGluIHJhZGVyXHJcblx0XHRcdFx0XHR0Ym9keS5hcHBlbmRDaGlsZCByYWRcclxuXHJcbnNhZmVHZXQgPSAocGFyYW1zLGtleSxzdGFuZGFyZD1cIlwiKSAtPiBcclxuXHRpZiBwYXJhbXMuZ2V0IGtleSB0aGVuIHJldHVybiBwYXJhbXMuZ2V0KGtleSkudHJpbSgpXHJcblx0aWYgcGFyYW1zLmdldCAnICcgKyBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldCgnICcgKyBrZXkpLnRyaW0oKVxyXG5cdHN0YW5kYXJkXHJcblxyXG5wYXJzZVF1ZXJ5ID0gLT5cclxuXHRlY2hvIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0c2V0dGluZ3MuVElUTEUgPSBzYWZlR2V0IHBhcmFtcywgXCJUSVRMRVwiXHJcblx0c2V0dGluZ3MuR0FNRVMgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJHQU1FU1wiLCBcIjFcIlxyXG5cdHNldHRpbmdzLlNPUlQgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJTT1JUXCIsIFwiMVwiXHJcblxyXG5cdFJFU1VMVFMgPSBbMCwxLDJdICMgaW50ZXJudCBicnVrXHJcblxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHBlcnNvbnMgPSBwYXJhbXMuZ2V0QWxsIFwicFwiXHJcblxyXG5cdGlmIHNldHRpbmdzLlNPUlQgPT0gMSB0aGVuIHBlcnNvbnMuc29ydCgpLnJldmVyc2UoKVxyXG5cclxuXHRpID0gMFxyXG5cdGVjaG8gXCJcIlxyXG5cdGZvciBwZXJzb24gaW4gcGVyc29uc1xyXG5cdFx0aSArPSAxXHJcblx0XHRlbG8gPSBwYXJzZUludCBwZXJzb24uc2xpY2UgMCw0XHJcblx0XHRuYW1lID0gcGVyc29uLnNsaWNlKDQpLnRyaW0oKVxyXG5cdFx0ZWNobyBpLCBlbG8sbmFtZVxyXG5cdFx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgcGxheWVycy5sZW5ndGgsIG5hbWUsIGVsb1xyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCAlIDIgPT0gMVxyXG5cdFx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgcGxheWVycy5sZW5ndGgsICdGUklST05EJywgMFxyXG5cdFx0ZnJpcm9uZCA9IHBsYXllcnMubGVuZ3RoIC0gMVxyXG5cdGVsc2VcclxuXHRcdGZyaXJvbmQgPSBudWxsXHJcblxyXG5cdHNldHRpbmdzLlJPVU5EUyA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIlJPVU5EU1wiLCBcIiN7cGxheWVycy5sZW5ndGgtMX1cIlxyXG5cdGVjaG8gc2V0dGluZ3NcclxuXHJcbnBhcnNlVGV4dGFyZWEgPSAtPlxyXG5cdGVjaG8gJ3BhcnNlVGV4dEFyZWEnXHJcblx0cmF3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJ0ZXh0YXJlYVwiXHJcblx0ZWNobyAndGV4dGFyZWEnLHJhdy52YWx1ZVxyXG5cclxuXHRsaW5lcyA9IHJhdy52YWx1ZVxyXG5cdGxpbmVzID0gbGluZXMuc3BsaXQgXCJcXG5cIlxyXG5cclxuXHRyb3VuZHMgPSBudWxsXHJcblxyXG5cdGZvciBsaW5lIGluIGxpbmVzIFxyXG5cdFx0aWYgbGluZSA9PSBcIlwiIHRoZW4gY29udGludWVcclxuXHRcdGlmIGxpbmUuaW5jbHVkZXMgJz0nXHJcblx0XHRcdFtrZXksIHZhbF0gPSBsaW5lLnNwbGl0ICc9J1xyXG5cdFx0XHRrZXkgPSBrZXkudHJpbSgpXHJcblx0XHRcdHZhbCA9IHZhbC50cmltKClcclxuXHRcdFx0aWYga2V5ID09ICdUSVRMRScgdGhlbiBzZXR0aW5ncy5USVRMRSA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ0dBTUVTJyB0aGVuIHNldHRpbmdzLkdBTUVTID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnUk9VTkRTJyB0aGVuIHNldHRpbmdzLlJPVU5EUyA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ1NPUlQnIHRoZW4gc2V0dGluZ3MuU09SVCA9IHZhbFxyXG5cdFx0XHRpZiBrZXlbMF0gPT0gJ3InXHJcblx0XHRcdFx0biA9IHBsYXllcnMubGVuZ3RoIC8vIDJcclxuXHRcdFx0XHRpZiByb3VuZHMgPT0gbnVsbCB0aGVuIHJvdW5kcyA9IG5ldyBBcnJheShzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EUykuZmlsbCBcInhcIi5yZXBlYXQgblxyXG5cdFx0XHRcdHJvdW5kc1trZXkuc2xpY2UoMSkgLSAxXSA9IHZhbFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwbGF5ZXJzLnB1c2ggbGluZVxyXG5cclxuXHRlY2hvIHJvdW5kc1xyXG5cdGVjaG8gd2luZG93LmxvY2F0aW9uLmhyZWZcclxuXHJcblx0aWYgcm91bmRzID09IG51bGwgdGhlbiByb3VuZHMgPSBbXVxyXG5cclxuXHRpZiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyBcImdpdGh1YlwiIHRoZW4gdXJsID0gXCJodHRwczovL2NocmlzdGVybmlsc3Nvbi5naXRodWIuaW8vMjAyNS8wMTMtRmxvYXRpbmdCZXJnZXIvXCIgZWxzZSB1cmwgPSAnLydcclxuXHJcblx0dXJsICs9IFwiP1RJVExFPSN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHRpZiBzZXR0aW5ncy5HQU1FUyB0aGVuIHVybCArPSBcIiZHQU1FUz0je3NldHRpbmdzLkdBTUVTfVwiXHJcblx0dXJsICs9IFwiJlJPVU5EUz0je3NldHRpbmdzLlJPVU5EU31cIlxyXG5cdHVybCArPSBcIiZTT1JUPSN7c2V0dGluZ3MuU09SVH1cIlxyXG5cclxuXHRmb3IgcGxheWVyIGluIHBsYXllcnNcclxuXHRcdHVybCArPSBcIiZwPSN7cGxheWVyfVwiXHJcblxyXG5cdGZvciByIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdGlmIHJvdW5kc1tyXSA9PSAneHh4eHgnIHRoZW4gY29udGludWVcclxuXHRcdHVybCArPSBcIiZyI3tyKzF9PSN7cm91bmRzW3JdfVwiXHJcblxyXG5cdHVybCA9IHVybC5yZXBsYWNlQWxsICcgJywgJysnXHJcblxyXG5cdGVjaG8gdXJsXHJcblx0cGxheWVycyA9IFtdXHJcblx0cm91bmRzID0gW11cclxuXHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybFxyXG5cclxuc2F2ZVBhaXJpbmcgPSAociwgQSwgaGFsZiwgbikgLT5cclxuXHRsc3QgPSBpZiByICUgMiA9PSAxIHRoZW4gW1tBW24gLSAxXSwgQVswXV1dIGVsc2UgW1tBWzBdLCBBW24gLSAxXV1dXHJcblx0Zm9yIGkgaW4gWzEuLi5oYWxmXVxyXG5cdFx0bHN0LnB1c2ggW0FbaV0sIEFbbiAtIDEgLSBpXV1cclxuXHRpZiBmcmlyb25kIHRoZW4gbHN0LnB1c2ggbHN0LnNoaWZ0KClcclxuXHRsc3Quc29ydCgpICAjIyMjXHJcblxyXG5tYWtlQmVyZ2VyID0gLT5cclxuXHRlY2hvICdCRVJHRVInXHJcblxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cdGlmIG4gJSAyID09IDEgdGhlbiBuICs9IDFcclxuXHRoYWxmID0gbiAvLyAyIFxyXG5cdEEgPSBbMC4uLm5dXHJcblx0cm91bmRzID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSBzZXR0aW5ncy5ST1VORFNcclxuXHRcdHJvdW5kcy5wdXNoIHNhdmVQYWlyaW5nIGksIEEsIGhhbGYsIG5cclxuXHRcdEEucG9wKClcclxuXHRcdEEgPSBBLnNsaWNlKGhhbGYpLmNvbmNhdCBBLnNsaWNlKDAsaGFsZilcclxuXHRcdEEucHVzaCBuLTFcclxuXHRlY2hvICdCRVJHRVInLHJvdW5kc1xyXG5cdHJvdW5kc1xyXG4gXHJcbm1ha2VGYWlyUGFpciA9IC0+XHJcblx0ZmFpcnBhaXIgPSBuZXcgRmFpclBhaXIgcGxheWVycywgc2V0dGluZ3MuUk9VTkRTLCBzZXR0aW5ncy5HQU1FU1xyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCA8PSAyMFxyXG5cclxuXHRcdGVjaG8gXCJcIiBcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0XHRsaW5lID0gZmFpcnBhaXIubWF0cml4W2ldXHJcblx0XHRcdGVjaG8gaSUxMCArICcgICAnICsgbGluZS5qb2luKCcgICAnKSArICcgICcgKyBwbGF5ZXJzW2ldLmVsb1xyXG5cclxuXHRcdGVjaG8gJ3N1bW1hJywgZmFpcnBhaXIuc3VtbWFcclxuXHRcdGVjaG8gJ0ZBSVJQQUlSJywgZmFpcnBhaXIucm91bmRzXHJcblxyXG5cdGZhaXJwYWlyLnJvdW5kc1xyXG5cclxuc2hvd0luZm8gPSAtPlxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJykuaW5uZXJIVE1MID0gZGl2IHt9LFxyXG5cdFx0ZGl2IHtjbGFzczpcImhlbHBcIn0sIHByZSB7fSwgaGVscFRleHRcclxuXHJcbnJvdW5kc0NvbnRlbnQgPSAobG9uZywgaSkgLT4gIyByb25kZXJuYXMgZGF0YSArIHBvw6RuZyArIFBSLiBpIGFuZ2VyIHNwZWxhcm51bW1lclxyXG5cclxuXHRyb25kZXIgPSBbXVxyXG5cdG9wcEVsb3MgPSBbXVxyXG5cclxuXHRmb3IgW3csYixjb2xvcixyZXN1bHRdIGluIGxvbmdcclxuXHRcdG9wcG9uZW50ID0gMSArIGlmIHcgPT0gaSB0aGVuIGIgZWxzZSB3XHJcblx0XHRpZiBmcmlyb25kIGFuZCBvcHBvbmVudCA9PSBmcmlyb25kICsgMSB0aGVuIG9wcG9uZW50ID0gJ0YnXHJcblx0XHRyZXN1bHQgPSBjb252ZXJ0IHJlc3VsdCwgJ3gxMHJGRycsICcgMTDCvTExJ1xyXG5cclxuXHRcdGlmIGNvbG9yID09ICd3JyB0aGVuIGF0dHIgPSBcInJpZ2h0OjBweDtcIiBlbHNlIGF0dHIgPSBcImxlZnQ6MHB4O1wiXHJcblx0XHRjZWxsID0gdGQge3N0eWxlOiBcInBvc2l0aW9uOnJlbGF0aXZlO1wifSxcclxuXHRcdFx0ZGl2IHtzdHlsZTogXCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjBweDsgIGZvbnQtc2l6ZTowLjdlbTtcIiArIGF0dHJ9LCBvcHBvbmVudFxyXG5cdFx0XHRkaXYge3N0eWxlOiBcInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MTJweDsgZm9udC1zaXplOjEuMWVtOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAlLCAtMTAlKVwifSwgcmVzdWx0XHJcblxyXG5cdFx0cm9uZGVyLnB1c2ggY2VsbFxyXG5cclxuXHRyb25kZXIucHVzaFx0dGQgYWxpZ25SaWdodCwgXCJcIiAjKHBvaW50c1tpXS8yKS50b0ZpeGVkIDFcclxuXHRyb25kZXIucHVzaCB0ZCB7fSwgXCJcIiAjIHBlcmZvcm1hbmNlIHBvaW50c1BSLzIsIG9wcEVsb3NcclxuXHRyb25kZXIuam9pbiBcIlwiXHJcblxyXG5zaG93UGxheWVycyA9IChsb25ncykgLT4gIyBsb25ncyBsYWdyYWQgc29tIGxpc3RhIGF2IHNwZWxhcmVcclxuXHJcblx0cm93cyA9IFtdXHJcblxyXG5cdGZvciBsb25nLCBpIGluIGxvbmdzXHJcblx0XHRwbGF5ZXIgPSBwbGF5ZXJzW2ldXHJcblx0XHRpZiBwbGF5ZXIubmFtZSA9PSAnRlJJUk9ORCcgdGhlbiBjb250aW51ZVxyXG5cdFx0cm93cy5wdXNoIHRyIHt9LFxyXG5cdFx0XHR0ZCB7fSwgaSArIDFcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCBwbGF5ZXIubmFtZVxyXG5cdFx0XHR0ZCB7fSwgcGxheWVyLmVsb1xyXG5cdFx0XHRyb3VuZHNDb250ZW50IGxvbmcsIGlcclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0aDIge30sIHNldHRpbmdzLlRJVExFXHJcblx0XHR0YWJsZSB7fSxcclxuXHRcdFx0dGhlYWQge30sXHJcblx0XHRcdFx0dGgge30sIFwiI1wiXHJcblx0XHRcdFx0dGgge30sIFwiTmFtblwiXHJcblx0XHRcdFx0dGgge30sIFwiRWxvXCJcclxuXHRcdFx0XHQodGgge30sIFwiI3tpKzF9XCIgZm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aCkuam9pbiBcIlwiXHJcblx0XHRcdFx0dGgge30sIFwiUFwiXHJcblx0XHRcdFx0dGgge30sIFwiUFJcIlxyXG5cdFx0XHRyb3dzLmpvaW4gXCJcIlxyXG5cclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhbGxuaW5nJykuaW5uZXJIVE1MID0gcmVzdWx0XHJcblxyXG5zaG93VGFibGVzID0gKHNob3J0cywgc2VsZWN0ZWRSb3VuZCkgLT5cclxuXHRpZiByb3VuZHMubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHJcblx0cm93cyA9IFwiXCJcclxuXHRib3JkID0gMFxyXG5cdG1lc3NhZ2UgPSBcIlwiXHJcblxyXG5cdGZvciBzaG9ydCBpbiBzaG9ydHNbc2VsZWN0ZWRSb3VuZF1cclxuXHRcdFt3LCBiLCBjb2xvciwgcmVzXSA9IHNob3J0XHJcblx0XHRpZiBjb2xvciA9PSAnYicgdGhlbiBjb250aW51ZVxyXG5cclxuXHRcdHZpdCA9IHBsYXllcnNbd10ubmFtZSAjIG9yIFwiXCJcclxuXHRcdHN2YXJ0ID0gcGxheWVyc1tiXS5uYW1lICMgb3IgXCJcIlxyXG5cdFx0IyBlY2hvIHcsYixyZXMsdml0LHN2YXJ0LCBwcmV0dGlmeSByZXNcclxuXHJcblx0XHRpZiB2aXQgPT0gJ0ZSSVJPTkQnXHJcblx0XHRcdG1lc3NhZ2UgPSBcIiDigKIgI3tzdmFydH0gaGFyIGZyaXJvbmRcIlxyXG5cdFx0XHRjb250aW51ZVxyXG5cdFx0aWYgc3ZhcnQgPT0gJ0ZSSVJPTkQnXHJcblx0XHRcdG1lc3NhZ2UgPSBcIiDigKIgI3t2aXR9IGhhciBmcmlyb25kXCJcclxuXHRcdFx0Y29udGludWVcclxuXHRcdHJvd3MgKz0gdHIge30sXHJcblx0XHRcdHRkIHt9LCBib3JkKzFcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCB2aXRcclxuXHRcdFx0dGQgYWxpZ25MZWZ0LCBzdmFydFxyXG5cdFx0XHR0ZCBhbGlnbkNlbnRlciwgcHJldHRpZnkgcmVzXHJcblx0XHRib3JkICs9IDFcclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0aDIge30sIFwiQm9yZHNsaXN0YSBmw7ZyIHJvbmQgI3tzZWxlY3RlZFJvdW5kKzF9XCJcclxuXHRcdHRhYmxlIHt9LFxyXG5cdFx0XHR0aGVhZCB7fSxcclxuXHRcdFx0XHR0aCB7fSwgXCJCb3JkXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJWaXRcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIlN2YXJ0XCJcclxuXHRcdFx0XHR0aCB7fSwgXCJSZXN1bHRhdFwiIFxyXG5cdFx0XHRyb3dzXHJcblxyXG5cdHJlc3VsdCArPSBcIjxicj5HI3tzZXR0aW5ncy5HQU1FU30g4oCiIFIje3NldHRpbmdzLlJPVU5EU30g4oCiICN7aWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuICdCZXJnZXInIGVsc2UgJ0ZhaXJQYWlyJ30gI3ttZXNzYWdlfVwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZXMnKS5pbm5lckhUTUwgPSByZXN1bHRcclxuXHJcbnJlYWRSZXN1bHRzID0gKHBhcmFtcykgLT5cclxuXHRyZXN1bHRzID0gW11cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBmcmlyb25kIHRoZW4gbiAtPSAyXHJcblx0biAvLz0gMlxyXG5cdFxyXG5cdGZvciByIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHRzLnB1c2ggc2FmZUdldCBwYXJhbXMsIFwiciN7cisxfVwiLCBcInhcIi5yZXBlYXQgblxyXG5cdGVjaG8gJ3JlYWRSZXN1bHRzJywgcmVzdWx0c1xyXG5cclxucHJvZ3Jlc3MgPSAocG9pbnRzKSAtPlxyXG5cdGFudGFsID0gMFxyXG5cdGZvciBwb2ludCBpbiBwb2ludHNcclxuXHRcdGFudGFsICs9IHBvaW50XHJcblx0aWYgZnJpcm9uZCBcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogKHBsYXllcnMubGVuZ3RoIC0gMikgLy8gMn1cIlxyXG5cdGVsc2VcclxuXHRcdFwiIOKAoiAje2FudGFsfSBhdiAje3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICogcGxheWVycy5sZW5ndGggLyAyfVwiXHJcblxyXG5jYWxjUG9pbnRzID0gLT4gIyBIw6RtdGEgY2VsbGVybmEgZnLDpW4gR1VJOnRcclxuXHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNzdGFsbG5pbmcgdGJvZHknXHJcblx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cclxuXHRQUyA9IFtdXHJcblx0UFJTID0gW11cclxuXHRwZXJmb3JtYW5jZXMgPSBbXSBcclxuXHJcblx0Zm9yIHJhZCBpbiByYWRlclxyXG5cdFx0cG9pbnRzID0gMFxyXG5cdFx0cG9pbnRzUFIgPSAwXHJcblx0XHRlbG9zID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRcdGNlbGwgPSByYWQuY2hpbGRyZW5bMytpXVxyXG5cdFx0XHRvcHAgPSBjZWxsLmNoaWxkcmVuWzBdLnRleHRDb250ZW50XHJcblx0XHRcdHZhbCA9IGNlbGwuY2hpbGRyZW5bMV0udGV4dENvbnRlbnRcclxuXHRcdFx0dmFsdWUgPSAwXHJcblx0XHRcdGlmIHZhbCA9PSAnwr0nIHRoZW4gdmFsdWUgPSAwLjVcclxuXHRcdFx0aWYgdmFsID09ICcxJyB0aGVuIHZhbHVlID0gMVxyXG5cdFx0XHRwb2ludHMgKz0gdmFsdWVcclxuXHJcblx0XHRcdGlmIHZhbCBpbiAnMMK9MScgYW5kIG9wcCAhPSAnRicgYW5kIHBsYXllcnNbb3BwLTFdLmVsbyA+IDBcclxuXHRcdFx0XHRwb2ludHNQUiArPSB2YWx1ZVxyXG5cdFx0XHRcdGVsb3MucHVzaCBwbGF5ZXJzW29wcC0xXS5lbG9cclxuXHJcblx0XHRQUy5wdXNoIHBvaW50c1xyXG5cdFx0UFJTLnB1c2ggcG9pbnRzUFJcclxuXHRcdHBlcmZvcm1hbmNlcy5wdXNoIHBlcmZvcm1hbmNlIHBvaW50c1BSLCBlbG9zXHJcblxyXG5cdGRlY2ltYWxzID0gZmluZE51bWJlck9mRGVjaW1hbHMgcGVyZm9ybWFuY2VzXHJcblx0Zm9yIGkgaW4gcmFuZ2UgcmFkZXIubGVuZ3RoXHJcblx0XHRyYWQgPSByYWRlcltpXVxyXG5cdFx0cmFkLmNoaWxkcmVuW3NldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTICsgM10udGV4dENvbnRlbnQgPSBQU1tpXS50b0ZpeGVkIDFcclxuXHRcdHJhZC5jaGlsZHJlbltzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EUyArIDRdLnRleHRDb250ZW50ID0gaWYgcGVyZm9ybWFuY2VzW2ldID4gMzk5OSB0aGVuIFwiXCIgZWxzZSBwZXJmb3JtYW5jZXNbaV0udG9GaXhlZCBkZWNpbWFsc1xyXG5cclxuXHRQUlNcclxuXHJcbm1haW4gPSAtPlxyXG5cclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0aWYgcGFyYW1zLnNpemUgPT0gMCBcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIgXCJjbGlja1wiLCBwYXJzZVRleHRhcmVhIFxyXG5cdFx0c2hvd0luZm8oKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dGFyZWFcIikuc3R5bGUgPSAnZGlzcGxheTogbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5zdHlsZSA9ICdkaXNwbGF5OiBub25lJ1xyXG5cclxuXHRwYXJzZVF1ZXJ5KClcclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPCA0XHJcblx0XHRzaG93SW5mbygpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0cm91bmRzID0gaWYgc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMSB0aGVuIG1ha2VCZXJnZXIoKSBlbHNlIG1ha2VGYWlyUGFpcigpXHJcblx0aWYgc2V0dGluZ3MuR0FNRVMgPT0gMiB0aGVuIHJvdW5kcyA9IGV4cGFuZCByb3VuZHNcclxuXHJcblx0cmVhZFJlc3VsdHMgcGFyYW1zXHJcblx0XHJcblx0bG9uZ3MgPSBbXSAjIGlubmVow6VsbGVyIGFsbGEgcm9uZGVybmFcclxuXHRmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRsb25ncy5wdXNoIGxvbmdGb3JtIHJvdW5kc1tyXSxyZXN1bHRzW3JdXHJcblxyXG5cdHNob3J0cyA9IGxvbmdzICMgXy5jbG9uZURlZXBcclxuXHRsb25ncyA9IF8uemlwIC4uLmxvbmdzICMgdHJhbnNwb25lcmFyIG1hdHJpc2VuXHJcblxyXG5cdHNob3dQbGF5ZXJzIGxvbmdzXHJcblx0c2hvd1RhYmxlcyBzaG9ydHMsIDBcclxuXHJcblx0c2thcGFTb3J0ZXJpbmdza2xpY2soKVxyXG5cclxuXHRQUlMgPSBjYWxjUG9pbnRzKClcclxuXHRkb2N1bWVudC50aXRsZSA9IHNldHRpbmdzLlRJVExFICsgcHJvZ3Jlc3MgUFJTXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXl1cCcsIChldmVudCkgLT5cclxuXHJcblx0aWYgZXZlbnQua2V5IGluICcxMjMnIFxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFsbG5pbmdcIikuc3R5bGUuZGlzcGxheSA9IGlmIGV2ZW50LmtleSBpbiBcIjEzXCIgdGhlbiBcInRhYmxlXCIgZWxzZSBcIm5vbmVcIlxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YWJsZXNcIikuc3R5bGUuZGlzcGxheSA9IGlmIGV2ZW50LmtleSBpbiBcIjIzXCIgdGhlbiBcInRhYmxlXCIgZWxzZSBcIm5vbmVcIlxyXG5cclxubWFpbigpXHJcbiJdfQ==
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee