// Generated by CoffeeScript 2.7.0
  // ½ •
var ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, changeRound, changeTable, convert, convertLong, createSortEvents, currRound, currTable, echo, frirond, invert, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setCursor, setResult, set_P, set_PR, settings, shorts, showInfo, showMatrix, showPlayers, showTables, tableCount, updateLongsAndShorts,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

//# V A R I A B L E R ##
settings = {
  TITLE: '',
  GAMES: 0,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa fem variabler:
players = [];

rounds = []; // vem möter vem? [w,b]. T ex [[0,9], [1,8] ...]

results = []; // [['0','1','2','x'], ['0','1','2','x'] ...] Vitspelarnas resultat i varje rond.

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden

longs = []; // underlag för showPlayers

shorts = []; // underlag för showTables


//# F U N K T I O N E R ##
changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  // updateLongsAndShorts()
  return showTables(shorts, currRound);
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var k, key, len1, rad, rader, results2, stigande, tbody;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(shorts, key);
          return;
        }
        tbody = document.querySelector('#stallning tbody');
        rader = Array.from(tbody.querySelectorAll('tr'));
        stigande = indexOf.call("# Namn".split(' '), key) >= 0;
        rader.sort(function(a, b) {
          var cellA, cellB, numA, numB;
          cellA = a.children[index].textContent.trim();
          cellB = b.children[index].textContent.trim();
          // Försök jämföra som tal, annars som text
          numA = parseFloat(cellA);
          numB = parseFloat(cellB);
          if (!isNaN(numA) && !isNaN(numB)) {
            if (stigande) {
              return numA - numB;
            } else {
              return numB - numA;
            }
          } else {
            if (stigande) {
              return cellA.localeCompare(cellB);
            } else {
              return cellB.localeCompare(cellA);
            }
          }
        });
// Lägg tillbaka raderna i sorterad ordning
        results2 = [];
        for (k = 0, len1 = rader.length; k < len1; k++) {
          rad = rader[k];
          results2.push(tbody.appendChild(rad));
        }
        return results2;
      });
    })(_th, index));
  }
  return results1;
};

export var expand = function(rounds) { // make a double round from a single
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([b, w]);
      }
      return results1;
    })());
  }
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  echo('lst', lst);
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

invert = function(lst) {
  var i, item, j, len, ref, result;
  result = _.clone(lst);
  ref = range(lst.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    item = lst[i];
    result[item] = i;
  }
  return result;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  if (rounds.length > results.length) { //then results += 'F'
    [w, b] = rounds[0];
    results = w === frirond || b === frirond ? 'F' + results : results + 'F';
  }
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  // echo 'longForm',rounds,results,result
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  echo('BERGER');
  n = players.length;
  if (n % 2 === 1) {
    n += 1;
  }
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  echo('BERGER', rounds);
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012FG", "21022");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, n, raw, url, val;
  echo('parseTextArea');
  raw = document.getElementById("textarea");
  echo('textarea', raw.value);
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
      if (key[0] === 'r') {
        n = Math.floor(players.length / 2);
        if (rounds === null) {
          rounds = new Array(settings.GAMES * settings.ROUNDS).fill("x".repeat(n));
        }
        rounds[key.slice(1) - 1] = val;
      }
    } else {
      players.push(line);
    }
  }
  echo(settings);
  echo(window.location.href);
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('url', url);
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  
  //echo window.location.search
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  players = [];
  persons = params.getAll("p");
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  i = 0;
//echo ""
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    //echo i, elo,name
    players.push(new Player(players.length, name, elo));
  }
  if (players.length % 2 === 1) {
    players.push(new Player(players.length, 'FRIROND', 0));
    frirond = players.length - 1;
  } else {
    frirond = null;
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  //echo 'settings', settings

  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  //echo 'rounds',rounds
  return readResults(params);
};

//echo 'parseURL',results
export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    //echo 'result',result
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

//echo 'readResults', results,results.length
roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  
  // echo {long}
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    // echo {w,b,color,result,opponent,frirond}
    if (frirond && opponent === frirond + settings.ONE) {
      opponent = 'F';
    }
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(ALIGN_RIGHT, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  index = -1;
  results1 = [];
  for (k = 0, len1 = trs.length; k < len1; k++) {
    _tr = trs[k];
    index++;
    color = index === currTable + 1 ? 'yellow' : 'white';
    results1.push(_tr.children[3].style = `background-color:${color}`);
  }
  return results1;
};

set_P = function(trs, index, translator) {
  var _tdP, andel, ch, elo, elos, j, len, opp, perf, r, ref, scores, value;
  scores = [];
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    if (value !== -1) {
      opp = longs[index][r][1];
      elo = players[opp].elo;
      scores.push(value);
      elos.push(Math.round(elo));
    }
  }
  _tdP = trs[translator[index] + 1].children[3 + settings.GAMES * settings.ROUNDS];
  // _tdPR = trs[translator[index] + 1].children[4 + settings.GAMES * settings.ROUNDS]
  _tdP.textContent = (_.sum(scores) / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  andel = _.sum(scores) / 2;
  perf = performance(andel, elos);
  return players[index].PR = perf;
};

// _tdPR.textContent = perf.toFixed 3
set_PR = function(trs, index, translator) {
  var _tdPR;
  _tdPR = trs[translator[index] + 1].children[4 + settings.GAMES * settings.ROUNDS];
  return _tdPR.textContent = players[index].PR.toFixed(3);
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var _td, _tr, b, i, j, len, one, ref, success, tr3, translator, trs, url, w;
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(1, trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  [w, b] = rounds[currRound][currTable];
  echo(`key ${key} res ${res} w ${w} b ${b}`);
  echo("rounds", rounds);
  echo("translator", translator);
  results[currRound][currTable] = res;
  one = settings.ONE;
  document.title = `${currRound + one}:${currTable + one} ${w + one}-${b + one} ${settings.TITLE}`;
  url = makeURL();
  updateLongsAndShorts();
  _td = trs[translator[w] + 1].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[translator[b] + 1].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  set_P(trs, b, translator);
  set_P(trs, w, translator);
  // echo 'players',players
  // xxx = findNumberOfDecimals (player.PR for player in players when player.PR > 0)
  // echo 'xxx',xxx
  set_PR(trs, b, translator);
  set_PR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  _tr = trs[currTable + 1];
  tr3 = _tr.children[3];
  success = false;
  if (key === 'Delete') {
    success = true;
  } else {
    success = tr3.textContent === '-' || tr3.textContent === res;
  }
  if (success) {
    tr3.textContent = prettyResult(res);
    return currTable = modulo(currTable + 1, tableCount());
  }
};

//history.pushState {}, "", url # för att slippa omladdning av sidan
export var shortForm = function(rounds, results) { // produces the short form for ONE round (bordslistan). If there is a BYE, put it last in the list
  var i, j, len, ref, results1;
  // The short Form is used to render the table list
  // rounds: produced by makeBerger and makeFloating
  // results: produced by the human
  if (rounds.length > results.length) {
    results += 'F';
  }
  ref = range(results.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(rounds[i].concat(results[i]));
  }
  return results1;
};

showInfo = function() { // Visa helpText på skärmen
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, helpText)));
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var i, j, len, line, ref, results1;
  if (players.length > 20) {
    return;
  }
  ref = range(players.length);
  
  //echo "" 
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i];
    results1.push(echo((i + settings.ONE) % 10 + '   ' + line.join('   ') + '  ' + players[i].elo));
  }
  return results1;
};

//echo 'Summa', floating.summa
//echo 'Floating', floating.rounds
showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(ALIGN_LEFT, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) { // Visa bordslistan
  var b, bord, color, hash, j, len, message, ref, res, result, rows, short, svart, vit, w;
  echo('showTables', shorts);
  if (rounds.length === 0) {
    return;
  }
  rows = "";
  bord = 0;
  message = "";
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (selectedRound % 2 === 0 && color === 'b') {
      continue;
    }
    if (selectedRound % 2 === 1 && color === 'w') {
      continue;
    }
    if (color === 'w') {
      vit = players[w].name;
      svart = players[b].name;
    } else {
      vit = players[b].name;
      svart = players[w].name;
    }
    if (vit === 'FRIROND') {
      message = ` • ${svart} har frirond`;
      continue;
    }
    if (svart === 'FRIROND') {
      message = ` • ${vit} har frirond`;
      continue;
      hash = {
        style: "background-color:red"
      };
      // hash = {style : "background-color:#{bord == currTable ? 'yellow' : 'white'}" }
      echo(hash);
    }
    rows += tr(hash, td({}, bord + settings.ONE), td(ALIGN_LEFT, vit), td(ALIGN_LEFT, svart), td(ALIGN_CENTER, prettyResult(res))); // prettify
    bord++;
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + settings.ONE}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows));
  result += `<br>G${settings.GAMES} • R${settings.ROUNDS} • S${settings.SORT} • B${settings.BALANCE} • ${settings.ROUNDS === players.length - 1 ? 'Berger' : 'Floating'} ${message}`;
  return document.getElementById('tables').innerHTML = result;
};

tableCount = function() { // Beräkna antal bord
  return Math.floor((players.length + 1) / 2);
};

updateLongsAndShorts = function() { // Uppdaterar longs och shorts utifrån rounds och results
  var j, len, r, ref;
  longs = []; // innehåller alla ronderna
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    longs.push(longForm(rounds[r], results[r]));
  }
  shorts = longs;
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo();
    return;
  }
  rounds = settings.ROUNDS === players.length - 1 ? makeBerger() : makeFloating();
  if (settings.GAMES === 2) {
    rounds = expand(rounds);
  }
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  //echo 'results',results
  readResults(params);
  //echo 'results',results
  updateLongsAndShorts();
  echo({longs});
  showPlayers(longs);
  showTables(shorts, 0);
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, key, ref1, ref2, ref3;
    if (ref1 = event.key, indexOf.call('abc', ref1) >= 0) {
      document.getElementById("stallning").style.display = (ref2 = event.key, indexOf.call("ac", ref2) >= 0) ? "table" : "none";
      document.getElementById("tables").style.display = (ref3 = event.key, indexOf.call("bc", ref3) >= 0) ? "table" : "none";
    }
    if (event.key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (event.key === 'ArrowRight') {
      changeRound(+1);
    }
    if (event.key === 'ArrowUp') {
      changeTable(-1);
    }
    if (event.key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    key = event.key;
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    return setCursor(currRound, currTable);
  });
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee