// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var Floating = class Floating {
  constructor(players, settings) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.settings = settings;
    this.N = this.players.length;
    if (this.settings.sort === 1) {
      this.players.sort(function(a, b) {
        return a.elo - b.elo;
      });
    }
    //echo @players
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("â€¢");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    //echo @matrix
    this.summa = 0;
    this.rounds = [];
    ref = range(this.settings.ROUNDS);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      //echo 'edges',edges
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      //echo 'magic',magic
      this.rounds.push(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = Math.abs(a.elo - b.elo);
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  // sortTables : (tables) -> # Blossom verkar redan ge en bra bordsplacering
  // 	tables.sort (x,y) -> y[2] - x[2]
  // 	table.slice 0,2 for table in tables
  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    // if not @settings.BALANS and @settings.GAMES % 2 == 0 then return true
    if (this.settings.BALANS === 0) {
      return true;
    }
    return Math.abs(a.balans() + b.balans()) < 2;
  }

  updatePlayers(magic, r) {
    var a, b, i, id, j, k, len, tables;
    tables = [];
//echo 'matrix',@matrix
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      if (i === this.matrix.length || j === this.matrix[0].length) {
        continue;
      }
      this.matrix[i][j] = `${r + this.settings.ONE}`;
      if (i > j) {
        continue;
      }
      //echo i + @settings.ONE, j + @settings.ONE, Math.abs @players[i].elo - @players[j].elo
      this.summa += Math.abs(this.players[i].elo - this.players[j].elo);
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      if (a.balans() > b.balans()) {
        a.col += 'b';
        b.col += 'w';
        tables.push([j, i]);
      } else {
        a.col += 'w';
        b.col += 'b';
        tables.push([i, j]);
      }
    }
    //@sortTables tables
    //echo 'updatePlayers',tables
    return tables;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvYXRpbmcuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZsb2F0aW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLFVBQUEsQ0FBQTtBQUNmLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtJQURnQixJQUFDLENBQUE7SUFBUyxJQUFDLENBQUE7SUFDekIsSUFBQyxDQUFBLENBQUQsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDO0lBQ2QsSUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDLElBQVYsS0FBZ0IsQ0FBbkI7TUFBMEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7ZUFBUyxDQUFDLENBQUMsR0FBRixHQUFRLENBQUMsQ0FBQztNQUFuQixDQUFkLEVBQTFCO0tBREY7O0lBR0UsSUFBQyxDQUFBLE1BQUQ7O0FBQVc7QUFBQTtNQUFBLEtBQUEscUNBQUE7Ozs7QUFBQztBQUFBO1VBQUEsS0FBQSx3Q0FBQTs7MEJBQUE7VUFBQSxDQUFBOzs7TUFBRCxDQUFBOztrQkFIYjs7SUFLRSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBQ1QsSUFBQyxDQUFBLE1BQUQsR0FBVTtBQUVWO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxLQUFBLEdBQVEsSUFBQyxDQUFBLFNBQUQsQ0FBQSxFQUFYOztNQUVHLE9BQUEsR0FBVSxJQUFJLE9BQUosQ0FBWSxLQUFaO01BQ1YsS0FBQSxHQUFRLE9BQU8sQ0FBQyxp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QUFHLENBQUMsSUFBTixDQUFXLENBQVg7TUFDQSxJQUFHLENBQUMsQ0FBQyxNQUFGLENBQUEsQ0FBQSxHQUFhLENBQUMsQ0FBQyxNQUFGLENBQUEsQ0FBaEI7UUFDQyxDQUFDLENBQUMsR0FBRixJQUFTO1FBQ1QsQ0FBQyxDQUFDLEdBQUYsSUFBUztRQUNULE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFaLEVBSEQ7T0FBQSxNQUFBO1FBS0MsQ0FBQyxDQUFDLEdBQUYsSUFBUztRQUNULENBQUMsQ0FBQyxHQUFGLElBQVM7UUFDVCxNQUFNLENBQUMsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBWixFQVBEOztJQVpELENBRkY7OztXQXlCRTtFQTFCZTs7QUF4Q1YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZG1vbmRzIH0gZnJvbSAnLi9ibG9zc29tLmpzJyAgXHJcblxyXG5yYW5nZSA9IF8ucmFuZ2VcclxuZWNobyA9IGNvbnNvbGUubG9nXHJcblxyXG5leHBvcnQgY2xhc3MgRmxvYXRpbmdcclxuXHRjb25zdHJ1Y3RvciA6IChAcGxheWVycywgQHNldHRpbmdzKSAtPlxyXG5cdFx0QE4gPSBAcGxheWVycy5sZW5ndGhcclxuXHRcdGlmIEBzZXR0aW5ncy5zb3J0PT0xIHRoZW4gQHBsYXllcnMuc29ydCAoYSxiKSAtPiBhLmVsbyAtIGIuZWxvXHJcblx0XHQjZWNobyBAcGxheWVyc1xyXG5cdFx0QG1hdHJpeCA9ICgoXCLigKJcIiBmb3IgaSBpbiByYW5nZSBATikgZm9yIGogaW4gcmFuZ2UgQE4pXHJcblx0XHQjZWNobyBAbWF0cml4XHJcblx0XHRAc3VtbWEgPSAwXHJcblx0XHRAcm91bmRzID0gW11cclxuXHJcblx0XHRmb3IgciBpbiByYW5nZSBAc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRcdGVkZ2VzID0gQG1ha2VFZGdlcygpXHJcblx0XHRcdCNlY2hvICdlZGdlcycsZWRnZXNcclxuXHRcdFx0ZWRtb25kcyA9IG5ldyBFZG1vbmRzIGVkZ2VzXHJcblx0XHRcdG1hZ2ljID0gZWRtb25kcy5tYXhXZWlnaHRNYXRjaGluZyBlZGdlc1xyXG5cdFx0XHQjZWNobyAnbWFnaWMnLG1hZ2ljXHJcblx0XHRcdEByb3VuZHMucHVzaCBAdXBkYXRlUGxheWVycyBtYWdpYyxyXHJcblxyXG5cdG1ha2VFZGdlcyA6IC0+XHJcblx0XHRlZGdlcyA9IFtdIFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQE5cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aWYgaT09aiB0aGVuIEBtYXRyaXhbaV1bal0gPSAnICdcclxuXHRcdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0XHRkaWZmID0gTWF0aC5hYnMgYS5lbG8gLSBiLmVsb1xyXG5cdFx0XHRcdGlmIEBvayBhLGIgdGhlbiBlZGdlcy5wdXNoIFtpLCBqLCAxMDAwMCAtIGRpZmYgKiogMS4wMV1cclxuXHRcdGVkZ2VzXHJcblxyXG5cdCMgc29ydFRhYmxlcyA6ICh0YWJsZXMpIC0+ICMgQmxvc3NvbSB2ZXJrYXIgcmVkYW4gZ2UgZW4gYnJhIGJvcmRzcGxhY2VyaW5nXHJcblx0IyBcdHRhYmxlcy5zb3J0ICh4LHkpIC0+IHlbMl0gLSB4WzJdXHJcblx0IyBcdHRhYmxlLnNsaWNlIDAsMiBmb3IgdGFibGUgaW4gdGFibGVzXHJcblxyXG5cdG9rIDogKGEsYikgLT4gXHJcblx0XHRpZiBhLmlkID09IGIuaWQgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIGEuaWQgaW4gYi5vcHAgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdCMgaWYgbm90IEBzZXR0aW5ncy5CQUxBTlMgYW5kIEBzZXR0aW5ncy5HQU1FUyAlIDIgPT0gMCB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRpZiBAc2V0dGluZ3MuQkFMQU5TID09IDAgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0TWF0aC5hYnMoYS5iYWxhbnMoKSArIGIuYmFsYW5zKCkpIDwgMlxyXG5cclxuXHR1cGRhdGVQbGF5ZXJzIDogKG1hZ2ljLHIpIC0+IFxyXG5cdFx0dGFibGVzID0gW11cclxuXHRcdCNlY2hvICdtYXRyaXgnLEBtYXRyaXhcclxuXHRcdGZvciBpZCBpbiBtYWdpY1xyXG5cdFx0XHRpID0gaWRcclxuXHRcdFx0aiA9IG1hZ2ljW2lkXVxyXG5cdFx0XHRpZiBpID09IEBtYXRyaXgubGVuZ3RoIG9yIGogPT0gQG1hdHJpeFswXS5sZW5ndGggdGhlbiBjb250aW51ZVxyXG5cdFx0XHRAbWF0cml4W2ldW2pdID0gXCIje3IgKyBAc2V0dGluZ3MuT05FfVwiXHJcblx0XHRcdGlmIGkgPiBqIHRoZW4gY29udGludWVcclxuXHRcdFx0I2VjaG8gaSArIEBzZXR0aW5ncy5PTkUsIGogKyBAc2V0dGluZ3MuT05FLCBNYXRoLmFicyBAcGxheWVyc1tpXS5lbG8gLSBAcGxheWVyc1tqXS5lbG9cclxuXHRcdFx0QHN1bW1hICs9IE1hdGguYWJzIEBwbGF5ZXJzW2ldLmVsbyAtIEBwbGF5ZXJzW2pdLmVsb1xyXG5cdFx0XHRhID0gQHBsYXllcnNbaV1cclxuXHRcdFx0YiA9IEBwbGF5ZXJzW2pdXHJcblx0XHRcdGEub3BwLnB1c2ggalxyXG5cdFx0XHRiLm9wcC5wdXNoIGlcclxuXHRcdFx0aWYgYS5iYWxhbnMoKSA+IGIuYmFsYW5zKClcclxuXHRcdFx0XHRhLmNvbCArPSAnYidcclxuXHRcdFx0XHRiLmNvbCArPSAndydcclxuXHRcdFx0XHR0YWJsZXMucHVzaCBbaiwgaV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGEuY29sICs9ICd3J1xyXG5cdFx0XHRcdGIuY29sICs9ICdiJ1xyXG5cdFx0XHRcdHRhYmxlcy5wdXNoIFtpLCBqXVxyXG5cclxuXHRcdCNAc29ydFRhYmxlcyB0YWJsZXNcclxuXHRcdCNlY2hvICd1cGRhdGVQbGF5ZXJzJyx0YWJsZXNcclxuXHRcdHRhYmxlc1xyXG4iXX0=
//# sourceURL=c:\github\2025\013-FloatingBerger\floating.coffee